// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/admin/AdminData.proto

package adminconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	admin "server/api/v1/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminDataControllerName is the fully-qualified name of the AdminDataController service.
	AdminDataControllerName = "server.admin.AdminDataController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminDataControllerGetByIDProcedure is the fully-qualified name of the AdminDataController's
	// GetByID RPC.
	AdminDataControllerGetByIDProcedure = "/server.admin.AdminDataController/GetByID"
	// AdminDataControllerUpdateProcedure is the fully-qualified name of the AdminDataController's
	// Update RPC.
	AdminDataControllerUpdateProcedure = "/server.admin.AdminDataController/Update"
	// AdminDataControllerGetAllProcedure is the fully-qualified name of the AdminDataController's
	// GetAll RPC.
	AdminDataControllerGetAllProcedure = "/server.admin.AdminDataController/GetAll"
	// AdminDataControllerDeleteProcedure is the fully-qualified name of the AdminDataController's
	// Delete RPC.
	AdminDataControllerDeleteProcedure = "/server.admin.AdminDataController/Delete"
	// AdminDataControllerGetLoginLogListProcedure is the fully-qualified name of the
	// AdminDataController's GetLoginLogList RPC.
	AdminDataControllerGetLoginLogListProcedure = "/server.admin.AdminDataController/GetLoginLogList"
)

// AdminDataControllerClient is a client for the server.admin.AdminDataController service.
type AdminDataControllerClient interface {
	GetByID(context.Context, *connect_go.Request[admin.AdminDataRequest]) (*connect_go.Response[admin.AdminDataResponse], error)
	Update(context.Context, *connect_go.Request[admin.AdminUpdateDataRequest]) (*connect_go.Response[admin.AdminDataResponse], error)
	GetAll(context.Context, *connect_go.Request[admin.AdminListRequest]) (*connect_go.Response[admin.AdminListResponse], error)
	Delete(context.Context, *connect_go.Request[admin.AdminDataRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetLoginLogList(context.Context, *connect_go.Request[admin.AdminLoginLogRequest]) (*connect_go.Response[admin.AdminLoginLogListResponse], error)
}

// NewAdminDataControllerClient constructs a client for the server.admin.AdminDataController
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminDataControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminDataControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminDataControllerClient{
		getByID: connect_go.NewClient[admin.AdminDataRequest, admin.AdminDataResponse](
			httpClient,
			baseURL+AdminDataControllerGetByIDProcedure,
			opts...,
		),
		update: connect_go.NewClient[admin.AdminUpdateDataRequest, admin.AdminDataResponse](
			httpClient,
			baseURL+AdminDataControllerUpdateProcedure,
			opts...,
		),
		getAll: connect_go.NewClient[admin.AdminListRequest, admin.AdminListResponse](
			httpClient,
			baseURL+AdminDataControllerGetAllProcedure,
			opts...,
		),
		delete: connect_go.NewClient[admin.AdminDataRequest, emptypb.Empty](
			httpClient,
			baseURL+AdminDataControllerDeleteProcedure,
			opts...,
		),
		getLoginLogList: connect_go.NewClient[admin.AdminLoginLogRequest, admin.AdminLoginLogListResponse](
			httpClient,
			baseURL+AdminDataControllerGetLoginLogListProcedure,
			opts...,
		),
	}
}

// adminDataControllerClient implements AdminDataControllerClient.
type adminDataControllerClient struct {
	getByID         *connect_go.Client[admin.AdminDataRequest, admin.AdminDataResponse]
	update          *connect_go.Client[admin.AdminUpdateDataRequest, admin.AdminDataResponse]
	getAll          *connect_go.Client[admin.AdminListRequest, admin.AdminListResponse]
	delete          *connect_go.Client[admin.AdminDataRequest, emptypb.Empty]
	getLoginLogList *connect_go.Client[admin.AdminLoginLogRequest, admin.AdminLoginLogListResponse]
}

// GetByID calls server.admin.AdminDataController.GetByID.
func (c *adminDataControllerClient) GetByID(ctx context.Context, req *connect_go.Request[admin.AdminDataRequest]) (*connect_go.Response[admin.AdminDataResponse], error) {
	return c.getByID.CallUnary(ctx, req)
}

// Update calls server.admin.AdminDataController.Update.
func (c *adminDataControllerClient) Update(ctx context.Context, req *connect_go.Request[admin.AdminUpdateDataRequest]) (*connect_go.Response[admin.AdminDataResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// GetAll calls server.admin.AdminDataController.GetAll.
func (c *adminDataControllerClient) GetAll(ctx context.Context, req *connect_go.Request[admin.AdminListRequest]) (*connect_go.Response[admin.AdminListResponse], error) {
	return c.getAll.CallUnary(ctx, req)
}

// Delete calls server.admin.AdminDataController.Delete.
func (c *adminDataControllerClient) Delete(ctx context.Context, req *connect_go.Request[admin.AdminDataRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// GetLoginLogList calls server.admin.AdminDataController.GetLoginLogList.
func (c *adminDataControllerClient) GetLoginLogList(ctx context.Context, req *connect_go.Request[admin.AdminLoginLogRequest]) (*connect_go.Response[admin.AdminLoginLogListResponse], error) {
	return c.getLoginLogList.CallUnary(ctx, req)
}

// AdminDataControllerHandler is an implementation of the server.admin.AdminDataController service.
type AdminDataControllerHandler interface {
	GetByID(context.Context, *connect_go.Request[admin.AdminDataRequest]) (*connect_go.Response[admin.AdminDataResponse], error)
	Update(context.Context, *connect_go.Request[admin.AdminUpdateDataRequest]) (*connect_go.Response[admin.AdminDataResponse], error)
	GetAll(context.Context, *connect_go.Request[admin.AdminListRequest]) (*connect_go.Response[admin.AdminListResponse], error)
	Delete(context.Context, *connect_go.Request[admin.AdminDataRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetLoginLogList(context.Context, *connect_go.Request[admin.AdminLoginLogRequest]) (*connect_go.Response[admin.AdminLoginLogListResponse], error)
}

// NewAdminDataControllerHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminDataControllerHandler(svc AdminDataControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	adminDataControllerGetByIDHandler := connect_go.NewUnaryHandler(
		AdminDataControllerGetByIDProcedure,
		svc.GetByID,
		opts...,
	)
	adminDataControllerUpdateHandler := connect_go.NewUnaryHandler(
		AdminDataControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	adminDataControllerGetAllHandler := connect_go.NewUnaryHandler(
		AdminDataControllerGetAllProcedure,
		svc.GetAll,
		opts...,
	)
	adminDataControllerDeleteHandler := connect_go.NewUnaryHandler(
		AdminDataControllerDeleteProcedure,
		svc.Delete,
		opts...,
	)
	adminDataControllerGetLoginLogListHandler := connect_go.NewUnaryHandler(
		AdminDataControllerGetLoginLogListProcedure,
		svc.GetLoginLogList,
		opts...,
	)
	return "/server.admin.AdminDataController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminDataControllerGetByIDProcedure:
			adminDataControllerGetByIDHandler.ServeHTTP(w, r)
		case AdminDataControllerUpdateProcedure:
			adminDataControllerUpdateHandler.ServeHTTP(w, r)
		case AdminDataControllerGetAllProcedure:
			adminDataControllerGetAllHandler.ServeHTTP(w, r)
		case AdminDataControllerDeleteProcedure:
			adminDataControllerDeleteHandler.ServeHTTP(w, r)
		case AdminDataControllerGetLoginLogListProcedure:
			adminDataControllerGetLoginLogListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminDataControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminDataControllerHandler struct{}

func (UnimplementedAdminDataControllerHandler) GetByID(context.Context, *connect_go.Request[admin.AdminDataRequest]) (*connect_go.Response[admin.AdminDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.AdminDataController.GetByID is not implemented"))
}

func (UnimplementedAdminDataControllerHandler) Update(context.Context, *connect_go.Request[admin.AdminUpdateDataRequest]) (*connect_go.Response[admin.AdminDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.AdminDataController.Update is not implemented"))
}

func (UnimplementedAdminDataControllerHandler) GetAll(context.Context, *connect_go.Request[admin.AdminListRequest]) (*connect_go.Response[admin.AdminListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.AdminDataController.GetAll is not implemented"))
}

func (UnimplementedAdminDataControllerHandler) Delete(context.Context, *connect_go.Request[admin.AdminDataRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.AdminDataController.Delete is not implemented"))
}

func (UnimplementedAdminDataControllerHandler) GetLoginLogList(context.Context, *connect_go.Request[admin.AdminLoginLogRequest]) (*connect_go.Response[admin.AdminLoginLogListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.AdminDataController.GetLoginLogList is not implemented"))
}
