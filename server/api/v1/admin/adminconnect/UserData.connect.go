// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/admin/UserData.proto

package adminconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	admin "server/api/v1/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserDataControllerName is the fully-qualified name of the UserDataController service.
	UserDataControllerName = "server.admin.UserDataController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserDataControllerGetByIDProcedure is the fully-qualified name of the UserDataController's
	// GetByID RPC.
	UserDataControllerGetByIDProcedure = "/server.admin.UserDataController/GetByID"
	// UserDataControllerUpdateProcedure is the fully-qualified name of the UserDataController's Update
	// RPC.
	UserDataControllerUpdateProcedure = "/server.admin.UserDataController/Update"
	// UserDataControllerDeleteProcedure is the fully-qualified name of the UserDataController's Delete
	// RPC.
	UserDataControllerDeleteProcedure = "/server.admin.UserDataController/Delete"
	// UserDataControllerGetListProcedure is the fully-qualified name of the UserDataController's
	// GetList RPC.
	UserDataControllerGetListProcedure = "/server.admin.UserDataController/GetList"
	// UserDataControllerGetLoginLogListProcedure is the fully-qualified name of the
	// UserDataController's GetLoginLogList RPC.
	UserDataControllerGetLoginLogListProcedure = "/server.admin.UserDataController/GetLoginLogList"
)

// UserDataControllerClient is a client for the server.admin.UserDataController service.
type UserDataControllerClient interface {
	GetByID(context.Context, *connect_go.Request[admin.UserIDRequest]) (*connect_go.Response[admin.UserDataResponse], error)
	Update(context.Context, *connect_go.Request[admin.UserUpdateDataRequest]) (*connect_go.Response[admin.UserDataResponse], error)
	Delete(context.Context, *connect_go.Request[admin.UserDeleteRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetList(context.Context, *connect_go.Request[admin.UserListFilterRequest]) (*connect_go.Response[admin.UserListResponse], error)
	GetLoginLogList(context.Context, *connect_go.Request[admin.UserLoginLogRequest]) (*connect_go.Response[admin.UserLoginLogListResponse], error)
}

// NewUserDataControllerClient constructs a client for the server.admin.UserDataController service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserDataControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserDataControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userDataControllerClient{
		getByID: connect_go.NewClient[admin.UserIDRequest, admin.UserDataResponse](
			httpClient,
			baseURL+UserDataControllerGetByIDProcedure,
			opts...,
		),
		update: connect_go.NewClient[admin.UserUpdateDataRequest, admin.UserDataResponse](
			httpClient,
			baseURL+UserDataControllerUpdateProcedure,
			opts...,
		),
		delete: connect_go.NewClient[admin.UserDeleteRequest, emptypb.Empty](
			httpClient,
			baseURL+UserDataControllerDeleteProcedure,
			opts...,
		),
		getList: connect_go.NewClient[admin.UserListFilterRequest, admin.UserListResponse](
			httpClient,
			baseURL+UserDataControllerGetListProcedure,
			opts...,
		),
		getLoginLogList: connect_go.NewClient[admin.UserLoginLogRequest, admin.UserLoginLogListResponse](
			httpClient,
			baseURL+UserDataControllerGetLoginLogListProcedure,
			opts...,
		),
	}
}

// userDataControllerClient implements UserDataControllerClient.
type userDataControllerClient struct {
	getByID         *connect_go.Client[admin.UserIDRequest, admin.UserDataResponse]
	update          *connect_go.Client[admin.UserUpdateDataRequest, admin.UserDataResponse]
	delete          *connect_go.Client[admin.UserDeleteRequest, emptypb.Empty]
	getList         *connect_go.Client[admin.UserListFilterRequest, admin.UserListResponse]
	getLoginLogList *connect_go.Client[admin.UserLoginLogRequest, admin.UserLoginLogListResponse]
}

// GetByID calls server.admin.UserDataController.GetByID.
func (c *userDataControllerClient) GetByID(ctx context.Context, req *connect_go.Request[admin.UserIDRequest]) (*connect_go.Response[admin.UserDataResponse], error) {
	return c.getByID.CallUnary(ctx, req)
}

// Update calls server.admin.UserDataController.Update.
func (c *userDataControllerClient) Update(ctx context.Context, req *connect_go.Request[admin.UserUpdateDataRequest]) (*connect_go.Response[admin.UserDataResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls server.admin.UserDataController.Delete.
func (c *userDataControllerClient) Delete(ctx context.Context, req *connect_go.Request[admin.UserDeleteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.delete.CallUnary(ctx, req)
}

// GetList calls server.admin.UserDataController.GetList.
func (c *userDataControllerClient) GetList(ctx context.Context, req *connect_go.Request[admin.UserListFilterRequest]) (*connect_go.Response[admin.UserListResponse], error) {
	return c.getList.CallUnary(ctx, req)
}

// GetLoginLogList calls server.admin.UserDataController.GetLoginLogList.
func (c *userDataControllerClient) GetLoginLogList(ctx context.Context, req *connect_go.Request[admin.UserLoginLogRequest]) (*connect_go.Response[admin.UserLoginLogListResponse], error) {
	return c.getLoginLogList.CallUnary(ctx, req)
}

// UserDataControllerHandler is an implementation of the server.admin.UserDataController service.
type UserDataControllerHandler interface {
	GetByID(context.Context, *connect_go.Request[admin.UserIDRequest]) (*connect_go.Response[admin.UserDataResponse], error)
	Update(context.Context, *connect_go.Request[admin.UserUpdateDataRequest]) (*connect_go.Response[admin.UserDataResponse], error)
	Delete(context.Context, *connect_go.Request[admin.UserDeleteRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetList(context.Context, *connect_go.Request[admin.UserListFilterRequest]) (*connect_go.Response[admin.UserListResponse], error)
	GetLoginLogList(context.Context, *connect_go.Request[admin.UserLoginLogRequest]) (*connect_go.Response[admin.UserLoginLogListResponse], error)
}

// NewUserDataControllerHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserDataControllerHandler(svc UserDataControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	userDataControllerGetByIDHandler := connect_go.NewUnaryHandler(
		UserDataControllerGetByIDProcedure,
		svc.GetByID,
		opts...,
	)
	userDataControllerUpdateHandler := connect_go.NewUnaryHandler(
		UserDataControllerUpdateProcedure,
		svc.Update,
		opts...,
	)
	userDataControllerDeleteHandler := connect_go.NewUnaryHandler(
		UserDataControllerDeleteProcedure,
		svc.Delete,
		opts...,
	)
	userDataControllerGetListHandler := connect_go.NewUnaryHandler(
		UserDataControllerGetListProcedure,
		svc.GetList,
		opts...,
	)
	userDataControllerGetLoginLogListHandler := connect_go.NewUnaryHandler(
		UserDataControllerGetLoginLogListProcedure,
		svc.GetLoginLogList,
		opts...,
	)
	return "/server.admin.UserDataController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserDataControllerGetByIDProcedure:
			userDataControllerGetByIDHandler.ServeHTTP(w, r)
		case UserDataControllerUpdateProcedure:
			userDataControllerUpdateHandler.ServeHTTP(w, r)
		case UserDataControllerDeleteProcedure:
			userDataControllerDeleteHandler.ServeHTTP(w, r)
		case UserDataControllerGetListProcedure:
			userDataControllerGetListHandler.ServeHTTP(w, r)
		case UserDataControllerGetLoginLogListProcedure:
			userDataControllerGetLoginLogListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserDataControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedUserDataControllerHandler struct{}

func (UnimplementedUserDataControllerHandler) GetByID(context.Context, *connect_go.Request[admin.UserIDRequest]) (*connect_go.Response[admin.UserDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.UserDataController.GetByID is not implemented"))
}

func (UnimplementedUserDataControllerHandler) Update(context.Context, *connect_go.Request[admin.UserUpdateDataRequest]) (*connect_go.Response[admin.UserDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.UserDataController.Update is not implemented"))
}

func (UnimplementedUserDataControllerHandler) Delete(context.Context, *connect_go.Request[admin.UserDeleteRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.UserDataController.Delete is not implemented"))
}

func (UnimplementedUserDataControllerHandler) GetList(context.Context, *connect_go.Request[admin.UserListFilterRequest]) (*connect_go.Response[admin.UserListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.UserDataController.GetList is not implemented"))
}

func (UnimplementedUserDataControllerHandler) GetLoginLogList(context.Context, *connect_go.Request[admin.UserLoginLogRequest]) (*connect_go.Response[admin.UserLoginLogListResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.admin.UserDataController.GetLoginLogList is not implemented"))
}
