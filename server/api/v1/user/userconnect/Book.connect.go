// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/user/Book.proto

package userconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	user "server/api/v1/user"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BookControllerName is the fully-qualified name of the BookController service.
	BookControllerName = "server.user.BookController"
	// PlanControllerName is the fully-qualified name of the PlanController service.
	PlanControllerName = "server.user.PlanController"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookControllerGetMyBookProcedure is the fully-qualified name of the BookController's GetMyBook
	// RPC.
	BookControllerGetMyBookProcedure = "/server.user.BookController/GetMyBook"
	// BookControllerGetBookByIDProcedure is the fully-qualified name of the BookController's
	// GetBookByID RPC.
	BookControllerGetBookByIDProcedure = "/server.user.BookController/GetBookByID"
	// BookControllerCancelProcedure is the fully-qualified name of the BookController's Cancel RPC.
	BookControllerCancelProcedure = "/server.user.BookController/Cancel"
	// BookControllerReserveProcedure is the fully-qualified name of the BookController's Reserve RPC.
	BookControllerReserveProcedure = "/server.user.BookController/Reserve"
	// PlanControllerSearchProcedure is the fully-qualified name of the PlanController's Search RPC.
	PlanControllerSearchProcedure = "/server.user.PlanController/Search"
	// PlanControllerGetDetailProcedure is the fully-qualified name of the PlanController's GetDetail
	// RPC.
	PlanControllerGetDetailProcedure = "/server.user.PlanController/GetDetail"
)

// BookControllerClient is a client for the server.user.BookController service.
type BookControllerClient interface {
	// 現在の自身の予約状況
	GetMyBook(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.BooksResponse], error)
	// 現在の自身の特定の予約の詳細を取得
	GetBookByID(context.Context, *connect_go.Request[user.BookIDRequest]) (*connect_go.Response[user.BookResponse], error)
	// 予約のキャンセル
	Cancel(context.Context, *connect_go.Request[user.BookIDRequest]) (*connect_go.Response[emptypb.Empty], error)
	// 予約情報からプランの予約
	Reserve(context.Context, *connect_go.Request[user.ReserveRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewBookControllerClient constructs a client for the server.user.BookController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BookControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookControllerClient{
		getMyBook: connect_go.NewClient[emptypb.Empty, user.BooksResponse](
			httpClient,
			baseURL+BookControllerGetMyBookProcedure,
			opts...,
		),
		getBookByID: connect_go.NewClient[user.BookIDRequest, user.BookResponse](
			httpClient,
			baseURL+BookControllerGetBookByIDProcedure,
			opts...,
		),
		cancel: connect_go.NewClient[user.BookIDRequest, emptypb.Empty](
			httpClient,
			baseURL+BookControllerCancelProcedure,
			opts...,
		),
		reserve: connect_go.NewClient[user.ReserveRequest, emptypb.Empty](
			httpClient,
			baseURL+BookControllerReserveProcedure,
			opts...,
		),
	}
}

// bookControllerClient implements BookControllerClient.
type bookControllerClient struct {
	getMyBook   *connect_go.Client[emptypb.Empty, user.BooksResponse]
	getBookByID *connect_go.Client[user.BookIDRequest, user.BookResponse]
	cancel      *connect_go.Client[user.BookIDRequest, emptypb.Empty]
	reserve     *connect_go.Client[user.ReserveRequest, emptypb.Empty]
}

// GetMyBook calls server.user.BookController.GetMyBook.
func (c *bookControllerClient) GetMyBook(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.BooksResponse], error) {
	return c.getMyBook.CallUnary(ctx, req)
}

// GetBookByID calls server.user.BookController.GetBookByID.
func (c *bookControllerClient) GetBookByID(ctx context.Context, req *connect_go.Request[user.BookIDRequest]) (*connect_go.Response[user.BookResponse], error) {
	return c.getBookByID.CallUnary(ctx, req)
}

// Cancel calls server.user.BookController.Cancel.
func (c *bookControllerClient) Cancel(ctx context.Context, req *connect_go.Request[user.BookIDRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.cancel.CallUnary(ctx, req)
}

// Reserve calls server.user.BookController.Reserve.
func (c *bookControllerClient) Reserve(ctx context.Context, req *connect_go.Request[user.ReserveRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.reserve.CallUnary(ctx, req)
}

// BookControllerHandler is an implementation of the server.user.BookController service.
type BookControllerHandler interface {
	// 現在の自身の予約状況
	GetMyBook(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.BooksResponse], error)
	// 現在の自身の特定の予約の詳細を取得
	GetBookByID(context.Context, *connect_go.Request[user.BookIDRequest]) (*connect_go.Response[user.BookResponse], error)
	// 予約のキャンセル
	Cancel(context.Context, *connect_go.Request[user.BookIDRequest]) (*connect_go.Response[emptypb.Empty], error)
	// 予約情報からプランの予約
	Reserve(context.Context, *connect_go.Request[user.ReserveRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewBookControllerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookControllerHandler(svc BookControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	bookControllerGetMyBookHandler := connect_go.NewUnaryHandler(
		BookControllerGetMyBookProcedure,
		svc.GetMyBook,
		opts...,
	)
	bookControllerGetBookByIDHandler := connect_go.NewUnaryHandler(
		BookControllerGetBookByIDProcedure,
		svc.GetBookByID,
		opts...,
	)
	bookControllerCancelHandler := connect_go.NewUnaryHandler(
		BookControllerCancelProcedure,
		svc.Cancel,
		opts...,
	)
	bookControllerReserveHandler := connect_go.NewUnaryHandler(
		BookControllerReserveProcedure,
		svc.Reserve,
		opts...,
	)
	return "/server.user.BookController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookControllerGetMyBookProcedure:
			bookControllerGetMyBookHandler.ServeHTTP(w, r)
		case BookControllerGetBookByIDProcedure:
			bookControllerGetBookByIDHandler.ServeHTTP(w, r)
		case BookControllerCancelProcedure:
			bookControllerCancelHandler.ServeHTTP(w, r)
		case BookControllerReserveProcedure:
			bookControllerReserveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedBookControllerHandler struct{}

func (UnimplementedBookControllerHandler) GetMyBook(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[user.BooksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.BookController.GetMyBook is not implemented"))
}

func (UnimplementedBookControllerHandler) GetBookByID(context.Context, *connect_go.Request[user.BookIDRequest]) (*connect_go.Response[user.BookResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.BookController.GetBookByID is not implemented"))
}

func (UnimplementedBookControllerHandler) Cancel(context.Context, *connect_go.Request[user.BookIDRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.BookController.Cancel is not implemented"))
}

func (UnimplementedBookControllerHandler) Reserve(context.Context, *connect_go.Request[user.ReserveRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.BookController.Reserve is not implemented"))
}

// PlanControllerClient is a client for the server.user.PlanController service.
type PlanControllerClient interface {
	Search(context.Context, *connect_go.Request[user.PlanSearchRequest]) (*connect_go.Response[user.SearchPlanResponse], error)
	GetDetail(context.Context, *connect_go.Request[user.PlanDetailRequest]) (*connect_go.Response[user.DisplayPlan], error)
}

// NewPlanControllerClient constructs a client for the server.user.PlanController service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlanControllerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PlanControllerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &planControllerClient{
		search: connect_go.NewClient[user.PlanSearchRequest, user.SearchPlanResponse](
			httpClient,
			baseURL+PlanControllerSearchProcedure,
			opts...,
		),
		getDetail: connect_go.NewClient[user.PlanDetailRequest, user.DisplayPlan](
			httpClient,
			baseURL+PlanControllerGetDetailProcedure,
			opts...,
		),
	}
}

// planControllerClient implements PlanControllerClient.
type planControllerClient struct {
	search    *connect_go.Client[user.PlanSearchRequest, user.SearchPlanResponse]
	getDetail *connect_go.Client[user.PlanDetailRequest, user.DisplayPlan]
}

// Search calls server.user.PlanController.Search.
func (c *planControllerClient) Search(ctx context.Context, req *connect_go.Request[user.PlanSearchRequest]) (*connect_go.Response[user.SearchPlanResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// GetDetail calls server.user.PlanController.GetDetail.
func (c *planControllerClient) GetDetail(ctx context.Context, req *connect_go.Request[user.PlanDetailRequest]) (*connect_go.Response[user.DisplayPlan], error) {
	return c.getDetail.CallUnary(ctx, req)
}

// PlanControllerHandler is an implementation of the server.user.PlanController service.
type PlanControllerHandler interface {
	Search(context.Context, *connect_go.Request[user.PlanSearchRequest]) (*connect_go.Response[user.SearchPlanResponse], error)
	GetDetail(context.Context, *connect_go.Request[user.PlanDetailRequest]) (*connect_go.Response[user.DisplayPlan], error)
}

// NewPlanControllerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlanControllerHandler(svc PlanControllerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	planControllerSearchHandler := connect_go.NewUnaryHandler(
		PlanControllerSearchProcedure,
		svc.Search,
		opts...,
	)
	planControllerGetDetailHandler := connect_go.NewUnaryHandler(
		PlanControllerGetDetailProcedure,
		svc.GetDetail,
		opts...,
	)
	return "/server.user.PlanController/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlanControllerSearchProcedure:
			planControllerSearchHandler.ServeHTTP(w, r)
		case PlanControllerGetDetailProcedure:
			planControllerGetDetailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlanControllerHandler returns CodeUnimplemented from all methods.
type UnimplementedPlanControllerHandler struct{}

func (UnimplementedPlanControllerHandler) Search(context.Context, *connect_go.Request[user.PlanSearchRequest]) (*connect_go.Response[user.SearchPlanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.PlanController.Search is not implemented"))
}

func (UnimplementedPlanControllerHandler) GetDetail(context.Context, *connect_go.Request[user.PlanDetailRequest]) (*connect_go.Response[user.DisplayPlan], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("server.user.PlanController.GetDetail is not implemented"))
}
