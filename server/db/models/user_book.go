// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserBook is an object representing the database table.
type UserBook struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TLBookingNumber string      `boil:"tl_booking_number" json:"tl_booking_number" toml:"tl_booking_number" yaml:"tl_booking_number"`
	StayFrom        time.Time   `boil:"stay_from" json:"stay_from" toml:"stay_from" yaml:"stay_from"`
	StayTo          time.Time   `boil:"stay_to" json:"stay_to" toml:"stay_to" yaml:"stay_to"`
	Adult           int         `boil:"adult" json:"adult" toml:"adult" yaml:"adult"`
	Child           int         `boil:"child" json:"child" toml:"child" yaml:"child"`
	RoomCount       int         `boil:"room_count" json:"room_count" toml:"room_count" yaml:"room_count"`
	CheckInTime     string      `boil:"check_in_time" json:"check_in_time" toml:"check_in_time" yaml:"check_in_time"`
	TotalCost       int         `boil:"total_cost" json:"total_cost" toml:"total_cost" yaml:"total_cost"`
	GuestDataID     string      `boil:"guest_data_id" json:"guest_data_id" toml:"guest_data_id" yaml:"guest_data_id"`
	BookPlanID      string      `boil:"book_plan_id" json:"book_plan_id" toml:"book_plan_id" yaml:"book_plan_id"`
	BookUserID      string      `boil:"book_user_id" json:"book_user_id" toml:"book_user_id" yaml:"book_user_id"`
	Note            null.String `boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	CreateAt        time.Time   `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt        time.Time   `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`
	TLBookdataID    string      `boil:"tl_bookdata_id" json:"tl_bookdata_id" toml:"tl_bookdata_id" yaml:"tl_bookdata_id"`
	DelateAt        null.Time   `boil:"delate_at" json:"delate_at,omitempty" toml:"delate_at" yaml:"delate_at,omitempty"`

	R *userBookR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userBookL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBookColumns = struct {
	ID              string
	TLBookingNumber string
	StayFrom        string
	StayTo          string
	Adult           string
	Child           string
	RoomCount       string
	CheckInTime     string
	TotalCost       string
	GuestDataID     string
	BookPlanID      string
	BookUserID      string
	Note            string
	CreateAt        string
	UpdateAt        string
	TLBookdataID    string
	DelateAt        string
}{
	ID:              "id",
	TLBookingNumber: "tl_booking_number",
	StayFrom:        "stay_from",
	StayTo:          "stay_to",
	Adult:           "adult",
	Child:           "child",
	RoomCount:       "room_count",
	CheckInTime:     "check_in_time",
	TotalCost:       "total_cost",
	GuestDataID:     "guest_data_id",
	BookPlanID:      "book_plan_id",
	BookUserID:      "book_user_id",
	Note:            "note",
	CreateAt:        "create_at",
	UpdateAt:        "update_at",
	TLBookdataID:    "tl_bookdata_id",
	DelateAt:        "delate_at",
}

var UserBookTableColumns = struct {
	ID              string
	TLBookingNumber string
	StayFrom        string
	StayTo          string
	Adult           string
	Child           string
	RoomCount       string
	CheckInTime     string
	TotalCost       string
	GuestDataID     string
	BookPlanID      string
	BookUserID      string
	Note            string
	CreateAt        string
	UpdateAt        string
	TLBookdataID    string
	DelateAt        string
}{
	ID:              "user_book.id",
	TLBookingNumber: "user_book.tl_booking_number",
	StayFrom:        "user_book.stay_from",
	StayTo:          "user_book.stay_to",
	Adult:           "user_book.adult",
	Child:           "user_book.child",
	RoomCount:       "user_book.room_count",
	CheckInTime:     "user_book.check_in_time",
	TotalCost:       "user_book.total_cost",
	GuestDataID:     "user_book.guest_data_id",
	BookPlanID:      "user_book.book_plan_id",
	BookUserID:      "user_book.book_user_id",
	Note:            "user_book.note",
	CreateAt:        "user_book.create_at",
	UpdateAt:        "user_book.update_at",
	TLBookdataID:    "user_book.tl_bookdata_id",
	DelateAt:        "user_book.delate_at",
}

// Generated where

var UserBookWhere = struct {
	ID              whereHelperstring
	TLBookingNumber whereHelperstring
	StayFrom        whereHelpertime_Time
	StayTo          whereHelpertime_Time
	Adult           whereHelperint
	Child           whereHelperint
	RoomCount       whereHelperint
	CheckInTime     whereHelperstring
	TotalCost       whereHelperint
	GuestDataID     whereHelperstring
	BookPlanID      whereHelperstring
	BookUserID      whereHelperstring
	Note            whereHelpernull_String
	CreateAt        whereHelpertime_Time
	UpdateAt        whereHelpertime_Time
	TLBookdataID    whereHelperstring
	DelateAt        whereHelpernull_Time
}{
	ID:              whereHelperstring{field: "\"user_book\".\"id\""},
	TLBookingNumber: whereHelperstring{field: "\"user_book\".\"tl_booking_number\""},
	StayFrom:        whereHelpertime_Time{field: "\"user_book\".\"stay_from\""},
	StayTo:          whereHelpertime_Time{field: "\"user_book\".\"stay_to\""},
	Adult:           whereHelperint{field: "\"user_book\".\"adult\""},
	Child:           whereHelperint{field: "\"user_book\".\"child\""},
	RoomCount:       whereHelperint{field: "\"user_book\".\"room_count\""},
	CheckInTime:     whereHelperstring{field: "\"user_book\".\"check_in_time\""},
	TotalCost:       whereHelperint{field: "\"user_book\".\"total_cost\""},
	GuestDataID:     whereHelperstring{field: "\"user_book\".\"guest_data_id\""},
	BookPlanID:      whereHelperstring{field: "\"user_book\".\"book_plan_id\""},
	BookUserID:      whereHelperstring{field: "\"user_book\".\"book_user_id\""},
	Note:            whereHelpernull_String{field: "\"user_book\".\"note\""},
	CreateAt:        whereHelpertime_Time{field: "\"user_book\".\"create_at\""},
	UpdateAt:        whereHelpertime_Time{field: "\"user_book\".\"update_at\""},
	TLBookdataID:    whereHelperstring{field: "\"user_book\".\"tl_bookdata_id\""},
	DelateAt:        whereHelpernull_Time{field: "\"user_book\".\"delate_at\""},
}

// UserBookRels is where relationship names are stored.
var UserBookRels = struct {
	BookPlan   string
	BookUser   string
	GuestDatum string
}{
	BookPlan:   "BookPlan",
	BookUser:   "BookUser",
	GuestDatum: "GuestDatum",
}

// userBookR is where relationships are stored.
type userBookR struct {
	BookPlan   *BookPlan       `boil:"BookPlan" json:"BookPlan" toml:"BookPlan" yaml:"BookPlan"`
	BookUser   *UserDatum      `boil:"BookUser" json:"BookUser" toml:"BookUser" yaml:"BookUser"`
	GuestDatum *BookGuestDatum `boil:"GuestDatum" json:"GuestDatum" toml:"GuestDatum" yaml:"GuestDatum"`
}

// NewStruct creates a new relationship struct
func (*userBookR) NewStruct() *userBookR {
	return &userBookR{}
}

func (r *userBookR) GetBookPlan() *BookPlan {
	if r == nil {
		return nil
	}
	return r.BookPlan
}

func (r *userBookR) GetBookUser() *UserDatum {
	if r == nil {
		return nil
	}
	return r.BookUser
}

func (r *userBookR) GetGuestDatum() *BookGuestDatum {
	if r == nil {
		return nil
	}
	return r.GuestDatum
}

// userBookL is where Load methods for each relationship are stored.
type userBookL struct{}

var (
	userBookAllColumns            = []string{"id", "tl_booking_number", "stay_from", "stay_to", "adult", "child", "room_count", "check_in_time", "total_cost", "guest_data_id", "book_plan_id", "book_user_id", "note", "create_at", "update_at", "tl_bookdata_id", "delate_at"}
	userBookColumnsWithoutDefault = []string{"id", "tl_booking_number", "stay_from", "stay_to", "adult", "child", "room_count", "check_in_time", "total_cost", "guest_data_id", "book_plan_id", "book_user_id"}
	userBookColumnsWithDefault    = []string{"note", "create_at", "update_at", "tl_bookdata_id", "delate_at"}
	userBookPrimaryKeyColumns     = []string{"id"}
	userBookGeneratedColumns      = []string{}
)

type (
	// UserBookSlice is an alias for a slice of pointers to UserBook.
	// This should almost always be used instead of []UserBook.
	UserBookSlice []*UserBook
	// UserBookHook is the signature for custom UserBook hook methods
	UserBookHook func(context.Context, boil.ContextExecutor, *UserBook) error

	userBookQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userBookType                 = reflect.TypeOf(&UserBook{})
	userBookMapping              = queries.MakeStructMapping(userBookType)
	userBookPrimaryKeyMapping, _ = queries.BindMapping(userBookType, userBookMapping, userBookPrimaryKeyColumns)
	userBookInsertCacheMut       sync.RWMutex
	userBookInsertCache          = make(map[string]insertCache)
	userBookUpdateCacheMut       sync.RWMutex
	userBookUpdateCache          = make(map[string]updateCache)
	userBookUpsertCacheMut       sync.RWMutex
	userBookUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBookAfterSelectHooks []UserBookHook

var userBookBeforeInsertHooks []UserBookHook
var userBookAfterInsertHooks []UserBookHook

var userBookBeforeUpdateHooks []UserBookHook
var userBookAfterUpdateHooks []UserBookHook

var userBookBeforeDeleteHooks []UserBookHook
var userBookAfterDeleteHooks []UserBookHook

var userBookBeforeUpsertHooks []UserBookHook
var userBookAfterUpsertHooks []UserBookHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserBook) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserBook) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserBook) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserBook) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserBook) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserBook) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserBook) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserBook) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserBook) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBookAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserBookHook registers your hook function for all future operations.
func AddUserBookHook(hookPoint boil.HookPoint, userBookHook UserBookHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userBookAfterSelectHooks = append(userBookAfterSelectHooks, userBookHook)
	case boil.BeforeInsertHook:
		userBookBeforeInsertHooks = append(userBookBeforeInsertHooks, userBookHook)
	case boil.AfterInsertHook:
		userBookAfterInsertHooks = append(userBookAfterInsertHooks, userBookHook)
	case boil.BeforeUpdateHook:
		userBookBeforeUpdateHooks = append(userBookBeforeUpdateHooks, userBookHook)
	case boil.AfterUpdateHook:
		userBookAfterUpdateHooks = append(userBookAfterUpdateHooks, userBookHook)
	case boil.BeforeDeleteHook:
		userBookBeforeDeleteHooks = append(userBookBeforeDeleteHooks, userBookHook)
	case boil.AfterDeleteHook:
		userBookAfterDeleteHooks = append(userBookAfterDeleteHooks, userBookHook)
	case boil.BeforeUpsertHook:
		userBookBeforeUpsertHooks = append(userBookBeforeUpsertHooks, userBookHook)
	case boil.AfterUpsertHook:
		userBookAfterUpsertHooks = append(userBookAfterUpsertHooks, userBookHook)
	}
}

// One returns a single userBook record from the query.
func (q userBookQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserBook, error) {
	o := &UserBook{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_book")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserBook records from the query.
func (q userBookQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserBookSlice, error) {
	var o []*UserBook

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserBook slice")
	}

	if len(userBookAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserBook records in the query.
func (q userBookQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_book rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userBookQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_book exists")
	}

	return count > 0, nil
}

// BookPlan pointed to by the foreign key.
func (o *UserBook) BookPlan(mods ...qm.QueryMod) bookPlanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BookPlanID),
	}

	queryMods = append(queryMods, mods...)

	return BookPlans(queryMods...)
}

// BookUser pointed to by the foreign key.
func (o *UserBook) BookUser(mods ...qm.QueryMod) userDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.BookUserID),
	}

	queryMods = append(queryMods, mods...)

	return UserData(queryMods...)
}

// GuestDatum pointed to by the foreign key.
func (o *UserBook) GuestDatum(mods ...qm.QueryMod) bookGuestDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GuestDataID),
	}

	queryMods = append(queryMods, mods...)

	return BookGuestData(queryMods...)
}

// LoadBookPlan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBookL) LoadBookPlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBook interface{}, mods queries.Applicator) error {
	var slice []*UserBook
	var object *UserBook

	if singular {
		var ok bool
		object, ok = maybeUserBook.(*UserBook)
		if !ok {
			object = new(UserBook)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBook))
			}
		}
	} else {
		s, ok := maybeUserBook.(*[]*UserBook)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBook))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBookR{}
		}
		args = append(args, object.BookPlanID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBookR{}
			}

			for _, a := range args {
				if a == obj.BookPlanID {
					continue Outer
				}
			}

			args = append(args, obj.BookPlanID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`book_plan`),
		qm.WhereIn(`book_plan.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BookPlan")
	}

	var resultSlice []*BookPlan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BookPlan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for book_plan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book_plan")
	}

	if len(bookPlanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BookPlan = foreign
		if foreign.R == nil {
			foreign.R = &bookPlanR{}
		}
		foreign.R.UserBooks = append(foreign.R.UserBooks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookPlanID == foreign.ID {
				local.R.BookPlan = foreign
				if foreign.R == nil {
					foreign.R = &bookPlanR{}
				}
				foreign.R.UserBooks = append(foreign.R.UserBooks, local)
				break
			}
		}
	}

	return nil
}

// LoadBookUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBookL) LoadBookUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBook interface{}, mods queries.Applicator) error {
	var slice []*UserBook
	var object *UserBook

	if singular {
		var ok bool
		object, ok = maybeUserBook.(*UserBook)
		if !ok {
			object = new(UserBook)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBook))
			}
		}
	} else {
		s, ok := maybeUserBook.(*[]*UserBook)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBook))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBookR{}
		}
		args = append(args, object.BookUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBookR{}
			}

			for _, a := range args {
				if a == obj.BookUserID {
					continue Outer
				}
			}

			args = append(args, obj.BookUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_data`),
		qm.WhereIn(`user_data.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDatum")
	}

	var resultSlice []*UserDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_data")
	}

	if len(userDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BookUser = foreign
		if foreign.R == nil {
			foreign.R = &userDatumR{}
		}
		foreign.R.BookUserUserBooks = append(foreign.R.BookUserUserBooks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BookUserID == foreign.UserID {
				local.R.BookUser = foreign
				if foreign.R == nil {
					foreign.R = &userDatumR{}
				}
				foreign.R.BookUserUserBooks = append(foreign.R.BookUserUserBooks, local)
				break
			}
		}
	}

	return nil
}

// LoadGuestDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBookL) LoadGuestDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBook interface{}, mods queries.Applicator) error {
	var slice []*UserBook
	var object *UserBook

	if singular {
		var ok bool
		object, ok = maybeUserBook.(*UserBook)
		if !ok {
			object = new(UserBook)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBook))
			}
		}
	} else {
		s, ok := maybeUserBook.(*[]*UserBook)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBook)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBook))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userBookR{}
		}
		args = append(args, object.GuestDataID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBookR{}
			}

			for _, a := range args {
				if a == obj.GuestDataID {
					continue Outer
				}
			}

			args = append(args, obj.GuestDataID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`book_guest_data`),
		qm.WhereIn(`book_guest_data.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BookGuestDatum")
	}

	var resultSlice []*BookGuestDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BookGuestDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for book_guest_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book_guest_data")
	}

	if len(bookGuestDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GuestDatum = foreign
		if foreign.R == nil {
			foreign.R = &bookGuestDatumR{}
		}
		foreign.R.GuestDatumUserBooks = append(foreign.R.GuestDatumUserBooks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuestDataID == foreign.ID {
				local.R.GuestDatum = foreign
				if foreign.R == nil {
					foreign.R = &bookGuestDatumR{}
				}
				foreign.R.GuestDatumUserBooks = append(foreign.R.GuestDatumUserBooks, local)
				break
			}
		}
	}

	return nil
}

// SetBookPlan of the userBook to the related item.
// Sets o.R.BookPlan to related.
// Adds o to related.R.UserBooks.
func (o *UserBook) SetBookPlan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BookPlan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_book\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"book_plan_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBookPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookPlanID = related.ID
	if o.R == nil {
		o.R = &userBookR{
			BookPlan: related,
		}
	} else {
		o.R.BookPlan = related
	}

	if related.R == nil {
		related.R = &bookPlanR{
			UserBooks: UserBookSlice{o},
		}
	} else {
		related.R.UserBooks = append(related.R.UserBooks, o)
	}

	return nil
}

// SetBookUser of the userBook to the related item.
// Sets o.R.BookUser to related.
// Adds o to related.R.BookUserUserBooks.
func (o *UserBook) SetBookUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_book\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"book_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBookPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BookUserID = related.UserID
	if o.R == nil {
		o.R = &userBookR{
			BookUser: related,
		}
	} else {
		o.R.BookUser = related
	}

	if related.R == nil {
		related.R = &userDatumR{
			BookUserUserBooks: UserBookSlice{o},
		}
	} else {
		related.R.BookUserUserBooks = append(related.R.BookUserUserBooks, o)
	}

	return nil
}

// SetGuestDatum of the userBook to the related item.
// Sets o.R.GuestDatum to related.
// Adds o to related.R.GuestDatumUserBooks.
func (o *UserBook) SetGuestDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BookGuestDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_book\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"guest_data_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBookPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuestDataID = related.ID
	if o.R == nil {
		o.R = &userBookR{
			GuestDatum: related,
		}
	} else {
		o.R.GuestDatum = related
	}

	if related.R == nil {
		related.R = &bookGuestDatumR{
			GuestDatumUserBooks: UserBookSlice{o},
		}
	} else {
		related.R.GuestDatumUserBooks = append(related.R.GuestDatumUserBooks, o)
	}

	return nil
}

// UserBooks retrieves all the records using an executor.
func UserBooks(mods ...qm.QueryMod) userBookQuery {
	mods = append(mods, qm.From("\"user_book\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_book\".*"})
	}

	return userBookQuery{q}
}

// FindUserBook retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBook(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserBook, error) {
	userBookObj := &UserBook{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_book\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userBookObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_book")
	}

	if err = userBookObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userBookObj, err
	}

	return userBookObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBook) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_book provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBookColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userBookInsertCacheMut.RLock()
	cache, cached := userBookInsertCache[key]
	userBookInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userBookAllColumns,
			userBookColumnsWithDefault,
			userBookColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userBookType, userBookMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userBookType, userBookMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_book\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_book\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_book")
	}

	if !cached {
		userBookInsertCacheMut.Lock()
		userBookInsertCache[key] = cache
		userBookInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserBook.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBook) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userBookUpdateCacheMut.RLock()
	cache, cached := userBookUpdateCache[key]
	userBookUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userBookAllColumns,
			userBookPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_book, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_book\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userBookPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userBookType, userBookMapping, append(wl, userBookPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_book row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_book")
	}

	if !cached {
		userBookUpdateCacheMut.Lock()
		userBookUpdateCache[key] = cache
		userBookUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userBookQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_book")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_book")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBookSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_book\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userBookPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userBook slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userBook")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserBook) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_book provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBookColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userBookUpsertCacheMut.RLock()
	cache, cached := userBookUpsertCache[key]
	userBookUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userBookAllColumns,
			userBookColumnsWithDefault,
			userBookColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userBookAllColumns,
			userBookPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_book, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userBookPrimaryKeyColumns))
			copy(conflict, userBookPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_book\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userBookType, userBookMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userBookType, userBookMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_book")
	}

	if !cached {
		userBookUpsertCacheMut.Lock()
		userBookUpsertCache[key] = cache
		userBookUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserBook record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBook) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserBook provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userBookPrimaryKeyMapping)
	sql := "DELETE FROM \"user_book\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_book")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_book")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userBookQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userBookQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_book")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_book")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBookSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBookBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_book\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBookPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userBook slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_book")
	}

	if len(userBookAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBook) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserBook(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBookSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBookSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBookPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_book\".* FROM \"user_book\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBookPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserBookSlice")
	}

	*o = slice

	return nil
}

// UserBookExists checks if the UserBook row exists.
func UserBookExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_book\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_book exists")
	}

	return exists, nil
}

// Exists checks if the UserBook row exists.
func (o *UserBook) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserBookExists(ctx, exec, o.ID)
}
