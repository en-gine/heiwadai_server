// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// StayableStoreInfo is an object representing the database table.
type StayableStoreInfo struct {
	StoreID               string      `boil:"store_id" json:"store_id" toml:"store_id" yaml:"store_id"`
	Parking               string      `boil:"parking" json:"parking" toml:"parking" yaml:"parking"`
	Latitude              float64     `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude             float64     `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	AccessInfo            string      `boil:"access_info" json:"access_info" toml:"access_info" yaml:"access_info"`
	RestAPIURL            string      `boil:"rest_api_url" json:"rest_api_url" toml:"rest_api_url" yaml:"rest_api_url"`
	BookingSystemID       string      `boil:"booking_system_id" json:"booking_system_id" toml:"booking_system_id" yaml:"booking_system_id"`
	CreateAt              time.Time   `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt              time.Time   `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`
	BookingSystemLoginID  null.String `boil:"booking_system_login_id" json:"booking_system_login_id,omitempty" toml:"booking_system_login_id" yaml:"booking_system_login_id,omitempty"`
	BookingSystemPassword null.String `boil:"booking_system_password" json:"booking_system_password,omitempty" toml:"booking_system_password" yaml:"booking_system_password,omitempty"`

	R *stayableStoreInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stayableStoreInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StayableStoreInfoColumns = struct {
	StoreID               string
	Parking               string
	Latitude              string
	Longitude             string
	AccessInfo            string
	RestAPIURL            string
	BookingSystemID       string
	CreateAt              string
	UpdateAt              string
	BookingSystemLoginID  string
	BookingSystemPassword string
}{
	StoreID:               "store_id",
	Parking:               "parking",
	Latitude:              "latitude",
	Longitude:             "longitude",
	AccessInfo:            "access_info",
	RestAPIURL:            "rest_api_url",
	BookingSystemID:       "booking_system_id",
	CreateAt:              "create_at",
	UpdateAt:              "update_at",
	BookingSystemLoginID:  "booking_system_login_id",
	BookingSystemPassword: "booking_system_password",
}

var StayableStoreInfoTableColumns = struct {
	StoreID               string
	Parking               string
	Latitude              string
	Longitude             string
	AccessInfo            string
	RestAPIURL            string
	BookingSystemID       string
	CreateAt              string
	UpdateAt              string
	BookingSystemLoginID  string
	BookingSystemPassword string
}{
	StoreID:               "stayable_store_info.store_id",
	Parking:               "stayable_store_info.parking",
	Latitude:              "stayable_store_info.latitude",
	Longitude:             "stayable_store_info.longitude",
	AccessInfo:            "stayable_store_info.access_info",
	RestAPIURL:            "stayable_store_info.rest_api_url",
	BookingSystemID:       "stayable_store_info.booking_system_id",
	CreateAt:              "stayable_store_info.create_at",
	UpdateAt:              "stayable_store_info.update_at",
	BookingSystemLoginID:  "stayable_store_info.booking_system_login_id",
	BookingSystemPassword: "stayable_store_info.booking_system_password",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var StayableStoreInfoWhere = struct {
	StoreID               whereHelperstring
	Parking               whereHelperstring
	Latitude              whereHelperfloat64
	Longitude             whereHelperfloat64
	AccessInfo            whereHelperstring
	RestAPIURL            whereHelperstring
	BookingSystemID       whereHelperstring
	CreateAt              whereHelpertime_Time
	UpdateAt              whereHelpertime_Time
	BookingSystemLoginID  whereHelpernull_String
	BookingSystemPassword whereHelpernull_String
}{
	StoreID:               whereHelperstring{field: "\"stayable_store_info\".\"store_id\""},
	Parking:               whereHelperstring{field: "\"stayable_store_info\".\"parking\""},
	Latitude:              whereHelperfloat64{field: "\"stayable_store_info\".\"latitude\""},
	Longitude:             whereHelperfloat64{field: "\"stayable_store_info\".\"longitude\""},
	AccessInfo:            whereHelperstring{field: "\"stayable_store_info\".\"access_info\""},
	RestAPIURL:            whereHelperstring{field: "\"stayable_store_info\".\"rest_api_url\""},
	BookingSystemID:       whereHelperstring{field: "\"stayable_store_info\".\"booking_system_id\""},
	CreateAt:              whereHelpertime_Time{field: "\"stayable_store_info\".\"create_at\""},
	UpdateAt:              whereHelpertime_Time{field: "\"stayable_store_info\".\"update_at\""},
	BookingSystemLoginID:  whereHelpernull_String{field: "\"stayable_store_info\".\"booking_system_login_id\""},
	BookingSystemPassword: whereHelpernull_String{field: "\"stayable_store_info\".\"booking_system_password\""},
}

// StayableStoreInfoRels is where relationship names are stored.
var StayableStoreInfoRels = struct {
	Store string
}{
	Store: "Store",
}

// stayableStoreInfoR is where relationships are stored.
type stayableStoreInfoR struct {
	Store *Store `boil:"Store" json:"Store" toml:"Store" yaml:"Store"`
}

// NewStruct creates a new relationship struct
func (*stayableStoreInfoR) NewStruct() *stayableStoreInfoR {
	return &stayableStoreInfoR{}
}

func (o *StayableStoreInfo) GetStore() *Store {
	if o == nil {
		return nil
	}

	return o.R.GetStore()
}

func (r *stayableStoreInfoR) GetStore() *Store {
	if r == nil {
		return nil
	}

	return r.Store
}

// stayableStoreInfoL is where Load methods for each relationship are stored.
type stayableStoreInfoL struct{}

var (
	stayableStoreInfoAllColumns            = []string{"store_id", "parking", "latitude", "longitude", "access_info", "rest_api_url", "booking_system_id", "create_at", "update_at", "booking_system_login_id", "booking_system_password"}
	stayableStoreInfoColumnsWithoutDefault = []string{"store_id", "parking", "latitude", "longitude", "access_info", "rest_api_url", "booking_system_id"}
	stayableStoreInfoColumnsWithDefault    = []string{"create_at", "update_at", "booking_system_login_id", "booking_system_password"}
	stayableStoreInfoPrimaryKeyColumns     = []string{"store_id"}
	stayableStoreInfoGeneratedColumns      = []string{}
)

type (
	// StayableStoreInfoSlice is an alias for a slice of pointers to StayableStoreInfo.
	// This should almost always be used instead of []StayableStoreInfo.
	StayableStoreInfoSlice []*StayableStoreInfo
	// StayableStoreInfoHook is the signature for custom StayableStoreInfo hook methods
	StayableStoreInfoHook func(context.Context, boil.ContextExecutor, *StayableStoreInfo) error

	stayableStoreInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stayableStoreInfoType                 = reflect.TypeOf(&StayableStoreInfo{})
	stayableStoreInfoMapping              = queries.MakeStructMapping(stayableStoreInfoType)
	stayableStoreInfoPrimaryKeyMapping, _ = queries.BindMapping(stayableStoreInfoType, stayableStoreInfoMapping, stayableStoreInfoPrimaryKeyColumns)
	stayableStoreInfoInsertCacheMut       sync.RWMutex
	stayableStoreInfoInsertCache          = make(map[string]insertCache)
	stayableStoreInfoUpdateCacheMut       sync.RWMutex
	stayableStoreInfoUpdateCache          = make(map[string]updateCache)
	stayableStoreInfoUpsertCacheMut       sync.RWMutex
	stayableStoreInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stayableStoreInfoAfterSelectMu sync.Mutex
var stayableStoreInfoAfterSelectHooks []StayableStoreInfoHook

var stayableStoreInfoBeforeInsertMu sync.Mutex
var stayableStoreInfoBeforeInsertHooks []StayableStoreInfoHook
var stayableStoreInfoAfterInsertMu sync.Mutex
var stayableStoreInfoAfterInsertHooks []StayableStoreInfoHook

var stayableStoreInfoBeforeUpdateMu sync.Mutex
var stayableStoreInfoBeforeUpdateHooks []StayableStoreInfoHook
var stayableStoreInfoAfterUpdateMu sync.Mutex
var stayableStoreInfoAfterUpdateHooks []StayableStoreInfoHook

var stayableStoreInfoBeforeDeleteMu sync.Mutex
var stayableStoreInfoBeforeDeleteHooks []StayableStoreInfoHook
var stayableStoreInfoAfterDeleteMu sync.Mutex
var stayableStoreInfoAfterDeleteHooks []StayableStoreInfoHook

var stayableStoreInfoBeforeUpsertMu sync.Mutex
var stayableStoreInfoBeforeUpsertHooks []StayableStoreInfoHook
var stayableStoreInfoAfterUpsertMu sync.Mutex
var stayableStoreInfoAfterUpsertHooks []StayableStoreInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StayableStoreInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StayableStoreInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StayableStoreInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StayableStoreInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StayableStoreInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StayableStoreInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StayableStoreInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StayableStoreInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StayableStoreInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range stayableStoreInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStayableStoreInfoHook registers your hook function for all future operations.
func AddStayableStoreInfoHook(hookPoint boil.HookPoint, stayableStoreInfoHook StayableStoreInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stayableStoreInfoAfterSelectMu.Lock()
		stayableStoreInfoAfterSelectHooks = append(stayableStoreInfoAfterSelectHooks, stayableStoreInfoHook)
		stayableStoreInfoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		stayableStoreInfoBeforeInsertMu.Lock()
		stayableStoreInfoBeforeInsertHooks = append(stayableStoreInfoBeforeInsertHooks, stayableStoreInfoHook)
		stayableStoreInfoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		stayableStoreInfoAfterInsertMu.Lock()
		stayableStoreInfoAfterInsertHooks = append(stayableStoreInfoAfterInsertHooks, stayableStoreInfoHook)
		stayableStoreInfoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		stayableStoreInfoBeforeUpdateMu.Lock()
		stayableStoreInfoBeforeUpdateHooks = append(stayableStoreInfoBeforeUpdateHooks, stayableStoreInfoHook)
		stayableStoreInfoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		stayableStoreInfoAfterUpdateMu.Lock()
		stayableStoreInfoAfterUpdateHooks = append(stayableStoreInfoAfterUpdateHooks, stayableStoreInfoHook)
		stayableStoreInfoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		stayableStoreInfoBeforeDeleteMu.Lock()
		stayableStoreInfoBeforeDeleteHooks = append(stayableStoreInfoBeforeDeleteHooks, stayableStoreInfoHook)
		stayableStoreInfoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		stayableStoreInfoAfterDeleteMu.Lock()
		stayableStoreInfoAfterDeleteHooks = append(stayableStoreInfoAfterDeleteHooks, stayableStoreInfoHook)
		stayableStoreInfoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		stayableStoreInfoBeforeUpsertMu.Lock()
		stayableStoreInfoBeforeUpsertHooks = append(stayableStoreInfoBeforeUpsertHooks, stayableStoreInfoHook)
		stayableStoreInfoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		stayableStoreInfoAfterUpsertMu.Lock()
		stayableStoreInfoAfterUpsertHooks = append(stayableStoreInfoAfterUpsertHooks, stayableStoreInfoHook)
		stayableStoreInfoAfterUpsertMu.Unlock()
	}
}

// One returns a single stayableStoreInfo record from the query.
func (q stayableStoreInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StayableStoreInfo, error) {
	o := &StayableStoreInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for stayable_store_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StayableStoreInfo records from the query.
func (q stayableStoreInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (StayableStoreInfoSlice, error) {
	var o []*StayableStoreInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StayableStoreInfo slice")
	}

	if len(stayableStoreInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StayableStoreInfo records in the query.
func (q stayableStoreInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count stayable_store_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stayableStoreInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if stayable_store_info exists")
	}

	return count > 0, nil
}

// Store pointed to by the foreign key.
func (o *StayableStoreInfo) Store(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StoreID),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// LoadStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stayableStoreInfoL) LoadStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStayableStoreInfo interface{}, mods queries.Applicator) error {
	var slice []*StayableStoreInfo
	var object *StayableStoreInfo

	if singular {
		var ok bool
		object, ok = maybeStayableStoreInfo.(*StayableStoreInfo)
		if !ok {
			object = new(StayableStoreInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStayableStoreInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStayableStoreInfo))
			}
		}
	} else {
		s, ok := maybeStayableStoreInfo.(*[]*StayableStoreInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStayableStoreInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStayableStoreInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &stayableStoreInfoR{}
		}
		args[object.StoreID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stayableStoreInfoR{}
			}

			args[obj.StoreID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store`),
		qm.WhereIn(`store.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Store = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.StayableStoreInfo = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StoreID == foreign.ID {
				local.R.Store = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.StayableStoreInfo = local
				break
			}
		}
	}

	return nil
}

// SetStore of the stayableStoreInfo to the related item.
// Sets o.R.Store to related.
// Adds o to related.R.StayableStoreInfo.
func (o *StayableStoreInfo) SetStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stayable_store_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"store_id"}),
		strmangle.WhereClause("\"", "\"", 2, stayableStoreInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.StoreID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StoreID = related.ID
	if o.R == nil {
		o.R = &stayableStoreInfoR{
			Store: related,
		}
	} else {
		o.R.Store = related
	}

	if related.R == nil {
		related.R = &storeR{
			StayableStoreInfo: o,
		}
	} else {
		related.R.StayableStoreInfo = o
	}

	return nil
}

// StayableStoreInfos retrieves all the records using an executor.
func StayableStoreInfos(mods ...qm.QueryMod) stayableStoreInfoQuery {
	mods = append(mods, qm.From("\"stayable_store_info\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"stayable_store_info\".*"})
	}

	return stayableStoreInfoQuery{q}
}

// FindStayableStoreInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStayableStoreInfo(ctx context.Context, exec boil.ContextExecutor, storeID string, selectCols ...string) (*StayableStoreInfo, error) {
	stayableStoreInfoObj := &StayableStoreInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stayable_store_info\" where \"store_id\"=$1", sel,
	)

	q := queries.Raw(query, storeID)

	err := q.Bind(ctx, exec, stayableStoreInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from stayable_store_info")
	}

	if err = stayableStoreInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return stayableStoreInfoObj, err
	}

	return stayableStoreInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StayableStoreInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stayable_store_info provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stayableStoreInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stayableStoreInfoInsertCacheMut.RLock()
	cache, cached := stayableStoreInfoInsertCache[key]
	stayableStoreInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stayableStoreInfoAllColumns,
			stayableStoreInfoColumnsWithDefault,
			stayableStoreInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stayableStoreInfoType, stayableStoreInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stayableStoreInfoType, stayableStoreInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stayable_store_info\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stayable_store_info\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into stayable_store_info")
	}

	if !cached {
		stayableStoreInfoInsertCacheMut.Lock()
		stayableStoreInfoInsertCache[key] = cache
		stayableStoreInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StayableStoreInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StayableStoreInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stayableStoreInfoUpdateCacheMut.RLock()
	cache, cached := stayableStoreInfoUpdateCache[key]
	stayableStoreInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stayableStoreInfoAllColumns,
			stayableStoreInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"create_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update stayable_store_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stayable_store_info\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stayableStoreInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stayableStoreInfoType, stayableStoreInfoMapping, append(wl, stayableStoreInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update stayable_store_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for stayable_store_info")
	}

	if !cached {
		stayableStoreInfoUpdateCacheMut.Lock()
		stayableStoreInfoUpdateCache[key] = cache
		stayableStoreInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stayableStoreInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for stayable_store_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for stayable_store_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StayableStoreInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stayableStoreInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stayable_store_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stayableStoreInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stayableStoreInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stayableStoreInfo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StayableStoreInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no stayable_store_info provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stayableStoreInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stayableStoreInfoUpsertCacheMut.RLock()
	cache, cached := stayableStoreInfoUpsertCache[key]
	stayableStoreInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			stayableStoreInfoAllColumns,
			stayableStoreInfoColumnsWithDefault,
			stayableStoreInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stayableStoreInfoAllColumns,
			stayableStoreInfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert stayable_store_info, could not build update column list")
		}

		ret := strmangle.SetComplement(stayableStoreInfoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(stayableStoreInfoPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert stayable_store_info, could not build conflict column list")
			}

			conflict = make([]string, len(stayableStoreInfoPrimaryKeyColumns))
			copy(conflict, stayableStoreInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stayable_store_info\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(stayableStoreInfoType, stayableStoreInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stayableStoreInfoType, stayableStoreInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert stayable_store_info")
	}

	if !cached {
		stayableStoreInfoUpsertCacheMut.Lock()
		stayableStoreInfoUpsertCache[key] = cache
		stayableStoreInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StayableStoreInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StayableStoreInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StayableStoreInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stayableStoreInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"stayable_store_info\" WHERE \"store_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from stayable_store_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for stayable_store_info")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stayableStoreInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stayableStoreInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stayable_store_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stayable_store_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StayableStoreInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stayableStoreInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stayableStoreInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stayable_store_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stayableStoreInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stayableStoreInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stayable_store_info")
	}

	if len(stayableStoreInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StayableStoreInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStayableStoreInfo(ctx, exec, o.StoreID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StayableStoreInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StayableStoreInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stayableStoreInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stayable_store_info\".* FROM \"stayable_store_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stayableStoreInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StayableStoreInfoSlice")
	}

	*o = slice

	return nil
}

// StayableStoreInfoExists checks if the StayableStoreInfo row exists.
func StayableStoreInfoExists(ctx context.Context, exec boil.ContextExecutor, storeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stayable_store_info\" where \"store_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, storeID)
	}
	row := exec.QueryRowContext(ctx, sql, storeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if stayable_store_info exists")
	}

	return exists, nil
}

// Exists checks if the StayableStoreInfo row exists.
func (o *StayableStoreInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StayableStoreInfoExists(ctx, exec, o.StoreID)
}
