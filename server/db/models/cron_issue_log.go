// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CronIssueLog is an object representing the database table.
type CronIssueLog struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CronName   string    `boil:"cron_name" json:"cron_name" toml:"cron_name" yaml:"cron_name"`
	IssueYear  int       `boil:"issue_year" json:"issue_year" toml:"issue_year" yaml:"issue_year"`
	IssueMonth int       `boil:"issue_month" json:"issue_month" toml:"issue_month" yaml:"issue_month"`
	CreateAt   time.Time `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	IssueCount int       `boil:"issue_count" json:"issue_count" toml:"issue_count" yaml:"issue_count"`

	R *cronIssueLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cronIssueLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CronIssueLogColumns = struct {
	ID         string
	CronName   string
	IssueYear  string
	IssueMonth string
	CreateAt   string
	IssueCount string
}{
	ID:         "id",
	CronName:   "cron_name",
	IssueYear:  "issue_year",
	IssueMonth: "issue_month",
	CreateAt:   "create_at",
	IssueCount: "issue_count",
}

var CronIssueLogTableColumns = struct {
	ID         string
	CronName   string
	IssueYear  string
	IssueMonth string
	CreateAt   string
	IssueCount string
}{
	ID:         "cron_issue_log.id",
	CronName:   "cron_issue_log.cron_name",
	IssueYear:  "cron_issue_log.issue_year",
	IssueMonth: "cron_issue_log.issue_month",
	CreateAt:   "cron_issue_log.create_at",
	IssueCount: "cron_issue_log.issue_count",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CronIssueLogWhere = struct {
	ID         whereHelperint64
	CronName   whereHelperstring
	IssueYear  whereHelperint
	IssueMonth whereHelperint
	CreateAt   whereHelpertime_Time
	IssueCount whereHelperint
}{
	ID:         whereHelperint64{field: "\"cron_issue_log\".\"id\""},
	CronName:   whereHelperstring{field: "\"cron_issue_log\".\"cron_name\""},
	IssueYear:  whereHelperint{field: "\"cron_issue_log\".\"issue_year\""},
	IssueMonth: whereHelperint{field: "\"cron_issue_log\".\"issue_month\""},
	CreateAt:   whereHelpertime_Time{field: "\"cron_issue_log\".\"create_at\""},
	IssueCount: whereHelperint{field: "\"cron_issue_log\".\"issue_count\""},
}

// CronIssueLogRels is where relationship names are stored.
var CronIssueLogRels = struct {
}{}

// cronIssueLogR is where relationships are stored.
type cronIssueLogR struct {
}

// NewStruct creates a new relationship struct
func (*cronIssueLogR) NewStruct() *cronIssueLogR {
	return &cronIssueLogR{}
}

// cronIssueLogL is where Load methods for each relationship are stored.
type cronIssueLogL struct{}

var (
	cronIssueLogAllColumns            = []string{"id", "cron_name", "issue_year", "issue_month", "create_at", "issue_count"}
	cronIssueLogColumnsWithoutDefault = []string{"cron_name", "issue_year", "issue_month"}
	cronIssueLogColumnsWithDefault    = []string{"id", "create_at", "issue_count"}
	cronIssueLogPrimaryKeyColumns     = []string{"id"}
	cronIssueLogGeneratedColumns      = []string{}
)

type (
	// CronIssueLogSlice is an alias for a slice of pointers to CronIssueLog.
	// This should almost always be used instead of []CronIssueLog.
	CronIssueLogSlice []*CronIssueLog
	// CronIssueLogHook is the signature for custom CronIssueLog hook methods
	CronIssueLogHook func(context.Context, boil.ContextExecutor, *CronIssueLog) error

	cronIssueLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cronIssueLogType                 = reflect.TypeOf(&CronIssueLog{})
	cronIssueLogMapping              = queries.MakeStructMapping(cronIssueLogType)
	cronIssueLogPrimaryKeyMapping, _ = queries.BindMapping(cronIssueLogType, cronIssueLogMapping, cronIssueLogPrimaryKeyColumns)
	cronIssueLogInsertCacheMut       sync.RWMutex
	cronIssueLogInsertCache          = make(map[string]insertCache)
	cronIssueLogUpdateCacheMut       sync.RWMutex
	cronIssueLogUpdateCache          = make(map[string]updateCache)
	cronIssueLogUpsertCacheMut       sync.RWMutex
	cronIssueLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cronIssueLogAfterSelectHooks []CronIssueLogHook

var cronIssueLogBeforeInsertHooks []CronIssueLogHook
var cronIssueLogAfterInsertHooks []CronIssueLogHook

var cronIssueLogBeforeUpdateHooks []CronIssueLogHook
var cronIssueLogAfterUpdateHooks []CronIssueLogHook

var cronIssueLogBeforeDeleteHooks []CronIssueLogHook
var cronIssueLogAfterDeleteHooks []CronIssueLogHook

var cronIssueLogBeforeUpsertHooks []CronIssueLogHook
var cronIssueLogAfterUpsertHooks []CronIssueLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CronIssueLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CronIssueLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CronIssueLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CronIssueLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CronIssueLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CronIssueLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CronIssueLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CronIssueLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CronIssueLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cronIssueLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCronIssueLogHook registers your hook function for all future operations.
func AddCronIssueLogHook(hookPoint boil.HookPoint, cronIssueLogHook CronIssueLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cronIssueLogAfterSelectHooks = append(cronIssueLogAfterSelectHooks, cronIssueLogHook)
	case boil.BeforeInsertHook:
		cronIssueLogBeforeInsertHooks = append(cronIssueLogBeforeInsertHooks, cronIssueLogHook)
	case boil.AfterInsertHook:
		cronIssueLogAfterInsertHooks = append(cronIssueLogAfterInsertHooks, cronIssueLogHook)
	case boil.BeforeUpdateHook:
		cronIssueLogBeforeUpdateHooks = append(cronIssueLogBeforeUpdateHooks, cronIssueLogHook)
	case boil.AfterUpdateHook:
		cronIssueLogAfterUpdateHooks = append(cronIssueLogAfterUpdateHooks, cronIssueLogHook)
	case boil.BeforeDeleteHook:
		cronIssueLogBeforeDeleteHooks = append(cronIssueLogBeforeDeleteHooks, cronIssueLogHook)
	case boil.AfterDeleteHook:
		cronIssueLogAfterDeleteHooks = append(cronIssueLogAfterDeleteHooks, cronIssueLogHook)
	case boil.BeforeUpsertHook:
		cronIssueLogBeforeUpsertHooks = append(cronIssueLogBeforeUpsertHooks, cronIssueLogHook)
	case boil.AfterUpsertHook:
		cronIssueLogAfterUpsertHooks = append(cronIssueLogAfterUpsertHooks, cronIssueLogHook)
	}
}

// One returns a single cronIssueLog record from the query.
func (q cronIssueLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CronIssueLog, error) {
	o := &CronIssueLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cron_issue_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CronIssueLog records from the query.
func (q cronIssueLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (CronIssueLogSlice, error) {
	var o []*CronIssueLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CronIssueLog slice")
	}

	if len(cronIssueLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CronIssueLog records in the query.
func (q cronIssueLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cron_issue_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cronIssueLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cron_issue_log exists")
	}

	return count > 0, nil
}

// CronIssueLogs retrieves all the records using an executor.
func CronIssueLogs(mods ...qm.QueryMod) cronIssueLogQuery {
	mods = append(mods, qm.From("\"cron_issue_log\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cron_issue_log\".*"})
	}

	return cronIssueLogQuery{q}
}

// FindCronIssueLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCronIssueLog(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CronIssueLog, error) {
	cronIssueLogObj := &CronIssueLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cron_issue_log\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cronIssueLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cron_issue_log")
	}

	if err = cronIssueLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cronIssueLogObj, err
	}

	return cronIssueLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CronIssueLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cron_issue_log provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cronIssueLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cronIssueLogInsertCacheMut.RLock()
	cache, cached := cronIssueLogInsertCache[key]
	cronIssueLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cronIssueLogAllColumns,
			cronIssueLogColumnsWithDefault,
			cronIssueLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cronIssueLogType, cronIssueLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cronIssueLogType, cronIssueLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cron_issue_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cron_issue_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cron_issue_log")
	}

	if !cached {
		cronIssueLogInsertCacheMut.Lock()
		cronIssueLogInsertCache[key] = cache
		cronIssueLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CronIssueLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CronIssueLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cronIssueLogUpdateCacheMut.RLock()
	cache, cached := cronIssueLogUpdateCache[key]
	cronIssueLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cronIssueLogAllColumns,
			cronIssueLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cron_issue_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cron_issue_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cronIssueLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cronIssueLogType, cronIssueLogMapping, append(wl, cronIssueLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cron_issue_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cron_issue_log")
	}

	if !cached {
		cronIssueLogUpdateCacheMut.Lock()
		cronIssueLogUpdateCache[key] = cache
		cronIssueLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cronIssueLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cron_issue_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cron_issue_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CronIssueLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cronIssueLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cron_issue_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cronIssueLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cronIssueLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cronIssueLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CronIssueLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cron_issue_log provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cronIssueLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cronIssueLogUpsertCacheMut.RLock()
	cache, cached := cronIssueLogUpsertCache[key]
	cronIssueLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cronIssueLogAllColumns,
			cronIssueLogColumnsWithDefault,
			cronIssueLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cronIssueLogAllColumns,
			cronIssueLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cron_issue_log, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cronIssueLogPrimaryKeyColumns))
			copy(conflict, cronIssueLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cron_issue_log\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cronIssueLogType, cronIssueLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cronIssueLogType, cronIssueLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cron_issue_log")
	}

	if !cached {
		cronIssueLogUpsertCacheMut.Lock()
		cronIssueLogUpsertCache[key] = cache
		cronIssueLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CronIssueLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CronIssueLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CronIssueLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cronIssueLogPrimaryKeyMapping)
	sql := "DELETE FROM \"cron_issue_log\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cron_issue_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cron_issue_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cronIssueLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cronIssueLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cron_issue_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cron_issue_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CronIssueLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cronIssueLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cronIssueLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cron_issue_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cronIssueLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cronIssueLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cron_issue_log")
	}

	if len(cronIssueLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CronIssueLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCronIssueLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CronIssueLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CronIssueLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cronIssueLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cron_issue_log\".* FROM \"cron_issue_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cronIssueLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CronIssueLogSlice")
	}

	*o = slice

	return nil
}

// CronIssueLogExists checks if the CronIssueLog row exists.
func CronIssueLogExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cron_issue_log\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cron_issue_log exists")
	}

	return exists, nil
}

// Exists checks if the CronIssueLog row exists.
func (o *CronIssueLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CronIssueLogExists(ctx, exec, o.ID)
}
