// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Coupon is an object representing the database table.
type Coupon struct {
	ID                string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name              string            `boil:"name" json:"name" toml:"name" yaml:"name"`
	CouponType        int               `boil:"coupon_type" json:"coupon_type" toml:"coupon_type" yaml:"coupon_type"`
	DiscountAmount    int               `boil:"discount_amount" json:"discount_amount" toml:"discount_amount" yaml:"discount_amount"`
	ExpireAt          time.Time         `boil:"expire_at" json:"expire_at" toml:"expire_at" yaml:"expire_at"`
	IsCombinationable bool              `boil:"is_combinationable" json:"is_combinationable" toml:"is_combinationable" yaml:"is_combinationable"`
	CouponStatus      int               `boil:"coupon_status" json:"coupon_status" toml:"coupon_status" yaml:"coupon_status"`
	Notices           types.StringArray `boil:"notices" json:"notices,omitempty" toml:"notices" yaml:"notices,omitempty"`
	CreateAt          time.Time         `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt          time.Time         `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`
	IssueCount        int               `boil:"issue_count" json:"issue_count" toml:"issue_count" yaml:"issue_count"`
	IssueAt           null.Time         `boil:"issue_at" json:"issue_at,omitempty" toml:"issue_at" yaml:"issue_at,omitempty"`

	R *couponR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L couponL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CouponColumns = struct {
	ID                string
	Name              string
	CouponType        string
	DiscountAmount    string
	ExpireAt          string
	IsCombinationable string
	CouponStatus      string
	Notices           string
	CreateAt          string
	UpdateAt          string
	IssueCount        string
	IssueAt           string
}{
	ID:                "id",
	Name:              "name",
	CouponType:        "coupon_type",
	DiscountAmount:    "discount_amount",
	ExpireAt:          "expire_at",
	IsCombinationable: "is_combinationable",
	CouponStatus:      "coupon_status",
	Notices:           "notices",
	CreateAt:          "create_at",
	UpdateAt:          "update_at",
	IssueCount:        "issue_count",
	IssueAt:           "issue_at",
}

var CouponTableColumns = struct {
	ID                string
	Name              string
	CouponType        string
	DiscountAmount    string
	ExpireAt          string
	IsCombinationable string
	CouponStatus      string
	Notices           string
	CreateAt          string
	UpdateAt          string
	IssueCount        string
	IssueAt           string
}{
	ID:                "coupon.id",
	Name:              "coupon.name",
	CouponType:        "coupon.coupon_type",
	DiscountAmount:    "coupon.discount_amount",
	ExpireAt:          "coupon.expire_at",
	IsCombinationable: "coupon.is_combinationable",
	CouponStatus:      "coupon.coupon_status",
	Notices:           "coupon.notices",
	CreateAt:          "coupon.create_at",
	UpdateAt:          "coupon.update_at",
	IssueCount:        "coupon.issue_count",
	IssueAt:           "coupon.issue_at",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CouponWhere = struct {
	ID                whereHelperstring
	Name              whereHelperstring
	CouponType        whereHelperint
	DiscountAmount    whereHelperint
	ExpireAt          whereHelpertime_Time
	IsCombinationable whereHelperbool
	CouponStatus      whereHelperint
	Notices           whereHelpertypes_StringArray
	CreateAt          whereHelpertime_Time
	UpdateAt          whereHelpertime_Time
	IssueCount        whereHelperint
	IssueAt           whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"coupon\".\"id\""},
	Name:              whereHelperstring{field: "\"coupon\".\"name\""},
	CouponType:        whereHelperint{field: "\"coupon\".\"coupon_type\""},
	DiscountAmount:    whereHelperint{field: "\"coupon\".\"discount_amount\""},
	ExpireAt:          whereHelpertime_Time{field: "\"coupon\".\"expire_at\""},
	IsCombinationable: whereHelperbool{field: "\"coupon\".\"is_combinationable\""},
	CouponStatus:      whereHelperint{field: "\"coupon\".\"coupon_status\""},
	Notices:           whereHelpertypes_StringArray{field: "\"coupon\".\"notices\""},
	CreateAt:          whereHelpertime_Time{field: "\"coupon\".\"create_at\""},
	UpdateAt:          whereHelpertime_Time{field: "\"coupon\".\"update_at\""},
	IssueCount:        whereHelperint{field: "\"coupon\".\"issue_count\""},
	IssueAt:           whereHelpernull_Time{field: "\"coupon\".\"issue_at\""},
}

// CouponRels is where relationship names are stored.
var CouponRels = struct {
	CouponAttachedUsers string
	Stores              string
}{
	CouponAttachedUsers: "CouponAttachedUsers",
	Stores:              "Stores",
}

// couponR is where relationships are stored.
type couponR struct {
	CouponAttachedUsers CouponAttachedUserSlice `boil:"CouponAttachedUsers" json:"CouponAttachedUsers" toml:"CouponAttachedUsers" yaml:"CouponAttachedUsers"`
	Stores              StoreSlice              `boil:"Stores" json:"Stores" toml:"Stores" yaml:"Stores"`
}

// NewStruct creates a new relationship struct
func (*couponR) NewStruct() *couponR {
	return &couponR{}
}

func (o *Coupon) GetCouponAttachedUsers() CouponAttachedUserSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCouponAttachedUsers()
}

func (r *couponR) GetCouponAttachedUsers() CouponAttachedUserSlice {
	if r == nil {
		return nil
	}

	return r.CouponAttachedUsers
}

func (o *Coupon) GetStores() StoreSlice {
	if o == nil {
		return nil
	}

	return o.R.GetStores()
}

func (r *couponR) GetStores() StoreSlice {
	if r == nil {
		return nil
	}

	return r.Stores
}

// couponL is where Load methods for each relationship are stored.
type couponL struct{}

var (
	couponAllColumns            = []string{"id", "name", "coupon_type", "discount_amount", "expire_at", "is_combinationable", "coupon_status", "notices", "create_at", "update_at", "issue_count", "issue_at"}
	couponColumnsWithoutDefault = []string{"id", "name", "coupon_type", "discount_amount", "expire_at", "is_combinationable", "coupon_status"}
	couponColumnsWithDefault    = []string{"notices", "create_at", "update_at", "issue_count", "issue_at"}
	couponPrimaryKeyColumns     = []string{"id"}
	couponGeneratedColumns      = []string{}
)

type (
	// CouponSlice is an alias for a slice of pointers to Coupon.
	// This should almost always be used instead of []Coupon.
	CouponSlice []*Coupon
	// CouponHook is the signature for custom Coupon hook methods
	CouponHook func(context.Context, boil.ContextExecutor, *Coupon) error

	couponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	couponType                 = reflect.TypeOf(&Coupon{})
	couponMapping              = queries.MakeStructMapping(couponType)
	couponPrimaryKeyMapping, _ = queries.BindMapping(couponType, couponMapping, couponPrimaryKeyColumns)
	couponInsertCacheMut       sync.RWMutex
	couponInsertCache          = make(map[string]insertCache)
	couponUpdateCacheMut       sync.RWMutex
	couponUpdateCache          = make(map[string]updateCache)
	couponUpsertCacheMut       sync.RWMutex
	couponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var couponAfterSelectMu sync.Mutex
var couponAfterSelectHooks []CouponHook

var couponBeforeInsertMu sync.Mutex
var couponBeforeInsertHooks []CouponHook
var couponAfterInsertMu sync.Mutex
var couponAfterInsertHooks []CouponHook

var couponBeforeUpdateMu sync.Mutex
var couponBeforeUpdateHooks []CouponHook
var couponAfterUpdateMu sync.Mutex
var couponAfterUpdateHooks []CouponHook

var couponBeforeDeleteMu sync.Mutex
var couponBeforeDeleteHooks []CouponHook
var couponAfterDeleteMu sync.Mutex
var couponAfterDeleteHooks []CouponHook

var couponBeforeUpsertMu sync.Mutex
var couponBeforeUpsertHooks []CouponHook
var couponAfterUpsertMu sync.Mutex
var couponAfterUpsertHooks []CouponHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Coupon) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Coupon) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Coupon) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Coupon) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Coupon) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Coupon) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Coupon) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Coupon) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Coupon) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range couponAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCouponHook registers your hook function for all future operations.
func AddCouponHook(hookPoint boil.HookPoint, couponHook CouponHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		couponAfterSelectMu.Lock()
		couponAfterSelectHooks = append(couponAfterSelectHooks, couponHook)
		couponAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		couponBeforeInsertMu.Lock()
		couponBeforeInsertHooks = append(couponBeforeInsertHooks, couponHook)
		couponBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		couponAfterInsertMu.Lock()
		couponAfterInsertHooks = append(couponAfterInsertHooks, couponHook)
		couponAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		couponBeforeUpdateMu.Lock()
		couponBeforeUpdateHooks = append(couponBeforeUpdateHooks, couponHook)
		couponBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		couponAfterUpdateMu.Lock()
		couponAfterUpdateHooks = append(couponAfterUpdateHooks, couponHook)
		couponAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		couponBeforeDeleteMu.Lock()
		couponBeforeDeleteHooks = append(couponBeforeDeleteHooks, couponHook)
		couponBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		couponAfterDeleteMu.Lock()
		couponAfterDeleteHooks = append(couponAfterDeleteHooks, couponHook)
		couponAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		couponBeforeUpsertMu.Lock()
		couponBeforeUpsertHooks = append(couponBeforeUpsertHooks, couponHook)
		couponBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		couponAfterUpsertMu.Lock()
		couponAfterUpsertHooks = append(couponAfterUpsertHooks, couponHook)
		couponAfterUpsertMu.Unlock()
	}
}

// One returns a single coupon record from the query.
func (q couponQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Coupon, error) {
	o := &Coupon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for coupon")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Coupon records from the query.
func (q couponQuery) All(ctx context.Context, exec boil.ContextExecutor) (CouponSlice, error) {
	var o []*Coupon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Coupon slice")
	}

	if len(couponAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Coupon records in the query.
func (q couponQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count coupon rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q couponQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if coupon exists")
	}

	return count > 0, nil
}

// CouponAttachedUsers retrieves all the coupon_attached_user's CouponAttachedUsers with an executor.
func (o *Coupon) CouponAttachedUsers(mods ...qm.QueryMod) couponAttachedUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"coupon_attached_user\".\"coupon_id\"=?", o.ID),
	)

	return CouponAttachedUsers(queryMods...)
}

// Stores retrieves all the store's Stores with an executor.
func (o *Coupon) Stores(mods ...qm.QueryMod) storeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"coupon_stores\" on \"store\".\"id\" = \"coupon_stores\".\"store_id\""),
		qm.Where("\"coupon_stores\".\"coupon_id\"=?", o.ID),
	)

	return Stores(queryMods...)
}

// LoadCouponAttachedUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (couponL) LoadCouponAttachedUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCoupon interface{}, mods queries.Applicator) error {
	var slice []*Coupon
	var object *Coupon

	if singular {
		var ok bool
		object, ok = maybeCoupon.(*Coupon)
		if !ok {
			object = new(Coupon)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCoupon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCoupon))
			}
		}
	} else {
		s, ok := maybeCoupon.(*[]*Coupon)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCoupon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCoupon))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &couponR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &couponR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`coupon_attached_user`),
		qm.WhereIn(`coupon_attached_user.coupon_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load coupon_attached_user")
	}

	var resultSlice []*CouponAttachedUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice coupon_attached_user")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on coupon_attached_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coupon_attached_user")
	}

	if len(couponAttachedUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CouponAttachedUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &couponAttachedUserR{}
			}
			foreign.R.Coupon = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CouponID {
				local.R.CouponAttachedUsers = append(local.R.CouponAttachedUsers, foreign)
				if foreign.R == nil {
					foreign.R = &couponAttachedUserR{}
				}
				foreign.R.Coupon = local
				break
			}
		}
	}

	return nil
}

// LoadStores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (couponL) LoadStores(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCoupon interface{}, mods queries.Applicator) error {
	var slice []*Coupon
	var object *Coupon

	if singular {
		var ok bool
		object, ok = maybeCoupon.(*Coupon)
		if !ok {
			object = new(Coupon)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCoupon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCoupon))
			}
		}
	} else {
		s, ok := maybeCoupon.(*[]*Coupon)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCoupon)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCoupon))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &couponR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &couponR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.Select("\"store\".\"id\", \"store\".\"name\", \"store\".\"branch_name\", \"store\".\"zip_code\", \"store\".\"address\", \"store\".\"tel\", \"store\".\"site_url\", \"store\".\"stamp_image_url\", \"store\".\"stayable\", \"store\".\"is_active\", \"store\".\"qr_code\", \"store\".\"un_limited_qr_code\", \"store\".\"create_at\", \"store\".\"update_at\", \"a\".\"coupon_id\""),
		qm.From("\"store\""),
		qm.InnerJoin("\"coupon_stores\" as \"a\" on \"store\".\"id\" = \"a\".\"store_id\""),
		qm.WhereIn("\"a\".\"coupon_id\" in ?", argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load store")
	}

	var resultSlice []*Store

	var localJoinCols []string
	for results.Next() {
		one := new(Store)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &one.BranchName, &one.ZipCode, &one.Address, &one.Tel, &one.SiteURL, &one.StampImageURL, &one.Stayable, &one.IsActive, &one.QRCode, &one.UnLimitedQRCode, &one.CreateAt, &one.UpdateAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for store")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice store")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on store")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Stores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &storeR{}
			}
			foreign.R.Coupons = append(foreign.R.Coupons, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Stores = append(local.R.Stores, foreign)
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.Coupons = append(foreign.R.Coupons, local)
				break
			}
		}
	}

	return nil
}

// AddCouponAttachedUsers adds the given related objects to the existing relationships
// of the coupon, optionally inserting them as new records.
// Appends related to o.R.CouponAttachedUsers.
// Sets related.R.Coupon appropriately.
func (o *Coupon) AddCouponAttachedUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CouponAttachedUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CouponID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"coupon_attached_user\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"coupon_id"}),
				strmangle.WhereClause("\"", "\"", 2, couponAttachedUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.CouponID, rel.UserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CouponID = o.ID
		}
	}

	if o.R == nil {
		o.R = &couponR{
			CouponAttachedUsers: related,
		}
	} else {
		o.R.CouponAttachedUsers = append(o.R.CouponAttachedUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &couponAttachedUserR{
				Coupon: o,
			}
		} else {
			rel.R.Coupon = o
		}
	}
	return nil
}

// AddStores adds the given related objects to the existing relationships
// of the coupon, optionally inserting them as new records.
// Appends related to o.R.Stores.
// Sets related.R.Coupons appropriately.
func (o *Coupon) AddStores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Store) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"coupon_stores\" (\"coupon_id\", \"store_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &couponR{
			Stores: related,
		}
	} else {
		o.R.Stores = append(o.R.Stores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &storeR{
				Coupons: CouponSlice{o},
			}
		} else {
			rel.R.Coupons = append(rel.R.Coupons, o)
		}
	}
	return nil
}

// SetStores removes all previously related items of the
// coupon replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Coupons's Stores accordingly.
// Replaces o.R.Stores with related.
// Sets related.R.Coupons's Stores accordingly.
func (o *Coupon) SetStores(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Store) error {
	query := "delete from \"coupon_stores\" where \"coupon_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeStoresFromCouponsSlice(o, related)
	if o.R != nil {
		o.R.Stores = nil
	}

	return o.AddStores(ctx, exec, insert, related...)
}

// RemoveStores relationships from objects passed in.
// Removes related items from R.Stores (uses pointer comparison, removal does not keep order)
// Sets related.R.Coupons.
func (o *Coupon) RemoveStores(ctx context.Context, exec boil.ContextExecutor, related ...*Store) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"coupon_stores\" where \"coupon_id\" = $1 and \"store_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeStoresFromCouponsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Stores {
			if rel != ri {
				continue
			}

			ln := len(o.R.Stores)
			if ln > 1 && i < ln-1 {
				o.R.Stores[i] = o.R.Stores[ln-1]
			}
			o.R.Stores = o.R.Stores[:ln-1]
			break
		}
	}

	return nil
}

func removeStoresFromCouponsSlice(o *Coupon, related []*Store) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Coupons {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Coupons)
			if ln > 1 && i < ln-1 {
				rel.R.Coupons[i] = rel.R.Coupons[ln-1]
			}
			rel.R.Coupons = rel.R.Coupons[:ln-1]
			break
		}
	}
}

// Coupons retrieves all the records using an executor.
func Coupons(mods ...qm.QueryMod) couponQuery {
	mods = append(mods, qm.From("\"coupon\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"coupon\".*"})
	}

	return couponQuery{q}
}

// FindCoupon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCoupon(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Coupon, error) {
	couponObj := &Coupon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"coupon\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, couponObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from coupon")
	}

	if err = couponObj.doAfterSelectHooks(ctx, exec); err != nil {
		return couponObj, err
	}

	return couponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Coupon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no coupon provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(couponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	couponInsertCacheMut.RLock()
	cache, cached := couponInsertCache[key]
	couponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			couponAllColumns,
			couponColumnsWithDefault,
			couponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(couponType, couponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(couponType, couponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"coupon\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"coupon\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into coupon")
	}

	if !cached {
		couponInsertCacheMut.Lock()
		couponInsertCache[key] = cache
		couponInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Coupon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Coupon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	couponUpdateCacheMut.RLock()
	cache, cached := couponUpdateCache[key]
	couponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			couponAllColumns,
			couponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"create_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update coupon, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"coupon\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, couponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(couponType, couponMapping, append(wl, couponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update coupon row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for coupon")
	}

	if !cached {
		couponUpdateCacheMut.Lock()
		couponUpdateCache[key] = cache
		couponUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q couponQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for coupon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for coupon")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CouponSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"coupon\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, couponPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in coupon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all coupon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Coupon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no coupon provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(couponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	couponUpsertCacheMut.RLock()
	cache, cached := couponUpsertCache[key]
	couponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			couponAllColumns,
			couponColumnsWithDefault,
			couponColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			couponAllColumns,
			couponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert coupon, could not build update column list")
		}

		ret := strmangle.SetComplement(couponAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(couponPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert coupon, could not build conflict column list")
			}

			conflict = make([]string, len(couponPrimaryKeyColumns))
			copy(conflict, couponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"coupon\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(couponType, couponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(couponType, couponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert coupon")
	}

	if !cached {
		couponUpsertCacheMut.Lock()
		couponUpsertCache[key] = cache
		couponUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Coupon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Coupon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Coupon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), couponPrimaryKeyMapping)
	sql := "DELETE FROM \"coupon\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from coupon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for coupon")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q couponQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no couponQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from coupon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coupon")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CouponSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(couponBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"coupon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from coupon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for coupon")
	}

	if len(couponAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Coupon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCoupon(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CouponSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CouponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"coupon\".* FROM \"coupon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CouponSlice")
	}

	*o = slice

	return nil
}

// CouponExists checks if the Coupon row exists.
func CouponExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"coupon\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if coupon exists")
	}

	return exists, nil
}

// Exists checks if the Coupon row exists.
func (o *Coupon) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CouponExists(ctx, exec, o.ID)
}
