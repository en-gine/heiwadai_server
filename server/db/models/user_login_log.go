// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UserLoginLog is an object representing the database table.
type UserLoginLog struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RemoteIP  string    `boil:"remote_ip" json:"remote_ip" toml:"remote_ip" yaml:"remote_ip"`
	UserAgent string    `boil:"user_agent" json:"user_agent" toml:"user_agent" yaml:"user_agent"`
	LoginAt   time.Time `boil:"login_at" json:"login_at" toml:"login_at" yaml:"login_at"`
	CreateAt  time.Time `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`

	R *userLoginLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLoginLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLoginLogColumns = struct {
	ID        string
	UserID    string
	RemoteIP  string
	UserAgent string
	LoginAt   string
	CreateAt  string
}{
	ID:        "id",
	UserID:    "user_id",
	RemoteIP:  "remote_ip",
	UserAgent: "user_agent",
	LoginAt:   "login_at",
	CreateAt:  "create_at",
}

var UserLoginLogTableColumns = struct {
	ID        string
	UserID    string
	RemoteIP  string
	UserAgent string
	LoginAt   string
	CreateAt  string
}{
	ID:        "user_login_log.id",
	UserID:    "user_login_log.user_id",
	RemoteIP:  "user_login_log.remote_ip",
	UserAgent: "user_login_log.user_agent",
	LoginAt:   "user_login_log.login_at",
	CreateAt:  "user_login_log.create_at",
}

// Generated where

var UserLoginLogWhere = struct {
	ID        whereHelperint64
	UserID    whereHelperstring
	RemoteIP  whereHelperstring
	UserAgent whereHelperstring
	LoginAt   whereHelpertime_Time
	CreateAt  whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"user_login_log\".\"id\""},
	UserID:    whereHelperstring{field: "\"user_login_log\".\"user_id\""},
	RemoteIP:  whereHelperstring{field: "\"user_login_log\".\"remote_ip\""},
	UserAgent: whereHelperstring{field: "\"user_login_log\".\"user_agent\""},
	LoginAt:   whereHelpertime_Time{field: "\"user_login_log\".\"login_at\""},
	CreateAt:  whereHelpertime_Time{field: "\"user_login_log\".\"create_at\""},
}

// UserLoginLogRels is where relationship names are stored.
var UserLoginLogRels = struct {
	User string
}{
	User: "User",
}

// userLoginLogR is where relationships are stored.
type userLoginLogR struct {
	User *UserManager `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userLoginLogR) NewStruct() *userLoginLogR {
	return &userLoginLogR{}
}

func (o *UserLoginLog) GetUser() *UserManager {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *userLoginLogR) GetUser() *UserManager {
	if r == nil {
		return nil
	}

	return r.User
}

// userLoginLogL is where Load methods for each relationship are stored.
type userLoginLogL struct{}

var (
	userLoginLogAllColumns            = []string{"id", "user_id", "remote_ip", "user_agent", "login_at", "create_at"}
	userLoginLogColumnsWithoutDefault = []string{"user_id", "remote_ip", "user_agent"}
	userLoginLogColumnsWithDefault    = []string{"id", "login_at", "create_at"}
	userLoginLogPrimaryKeyColumns     = []string{"id"}
	userLoginLogGeneratedColumns      = []string{}
)

type (
	// UserLoginLogSlice is an alias for a slice of pointers to UserLoginLog.
	// This should almost always be used instead of []UserLoginLog.
	UserLoginLogSlice []*UserLoginLog
	// UserLoginLogHook is the signature for custom UserLoginLog hook methods
	UserLoginLogHook func(context.Context, boil.ContextExecutor, *UserLoginLog) error

	userLoginLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLoginLogType                 = reflect.TypeOf(&UserLoginLog{})
	userLoginLogMapping              = queries.MakeStructMapping(userLoginLogType)
	userLoginLogPrimaryKeyMapping, _ = queries.BindMapping(userLoginLogType, userLoginLogMapping, userLoginLogPrimaryKeyColumns)
	userLoginLogInsertCacheMut       sync.RWMutex
	userLoginLogInsertCache          = make(map[string]insertCache)
	userLoginLogUpdateCacheMut       sync.RWMutex
	userLoginLogUpdateCache          = make(map[string]updateCache)
	userLoginLogUpsertCacheMut       sync.RWMutex
	userLoginLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userLoginLogAfterSelectMu sync.Mutex
var userLoginLogAfterSelectHooks []UserLoginLogHook

var userLoginLogBeforeInsertMu sync.Mutex
var userLoginLogBeforeInsertHooks []UserLoginLogHook
var userLoginLogAfterInsertMu sync.Mutex
var userLoginLogAfterInsertHooks []UserLoginLogHook

var userLoginLogBeforeUpdateMu sync.Mutex
var userLoginLogBeforeUpdateHooks []UserLoginLogHook
var userLoginLogAfterUpdateMu sync.Mutex
var userLoginLogAfterUpdateHooks []UserLoginLogHook

var userLoginLogBeforeDeleteMu sync.Mutex
var userLoginLogBeforeDeleteHooks []UserLoginLogHook
var userLoginLogAfterDeleteMu sync.Mutex
var userLoginLogAfterDeleteHooks []UserLoginLogHook

var userLoginLogBeforeUpsertMu sync.Mutex
var userLoginLogBeforeUpsertHooks []UserLoginLogHook
var userLoginLogAfterUpsertMu sync.Mutex
var userLoginLogAfterUpsertHooks []UserLoginLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserLoginLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserLoginLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserLoginLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserLoginLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserLoginLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserLoginLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserLoginLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserLoginLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserLoginLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLoginLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserLoginLogHook registers your hook function for all future operations.
func AddUserLoginLogHook(hookPoint boil.HookPoint, userLoginLogHook UserLoginLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userLoginLogAfterSelectMu.Lock()
		userLoginLogAfterSelectHooks = append(userLoginLogAfterSelectHooks, userLoginLogHook)
		userLoginLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userLoginLogBeforeInsertMu.Lock()
		userLoginLogBeforeInsertHooks = append(userLoginLogBeforeInsertHooks, userLoginLogHook)
		userLoginLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userLoginLogAfterInsertMu.Lock()
		userLoginLogAfterInsertHooks = append(userLoginLogAfterInsertHooks, userLoginLogHook)
		userLoginLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userLoginLogBeforeUpdateMu.Lock()
		userLoginLogBeforeUpdateHooks = append(userLoginLogBeforeUpdateHooks, userLoginLogHook)
		userLoginLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userLoginLogAfterUpdateMu.Lock()
		userLoginLogAfterUpdateHooks = append(userLoginLogAfterUpdateHooks, userLoginLogHook)
		userLoginLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userLoginLogBeforeDeleteMu.Lock()
		userLoginLogBeforeDeleteHooks = append(userLoginLogBeforeDeleteHooks, userLoginLogHook)
		userLoginLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userLoginLogAfterDeleteMu.Lock()
		userLoginLogAfterDeleteHooks = append(userLoginLogAfterDeleteHooks, userLoginLogHook)
		userLoginLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userLoginLogBeforeUpsertMu.Lock()
		userLoginLogBeforeUpsertHooks = append(userLoginLogBeforeUpsertHooks, userLoginLogHook)
		userLoginLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userLoginLogAfterUpsertMu.Lock()
		userLoginLogAfterUpsertHooks = append(userLoginLogAfterUpsertHooks, userLoginLogHook)
		userLoginLogAfterUpsertMu.Unlock()
	}
}

// One returns a single userLoginLog record from the query.
func (q userLoginLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserLoginLog, error) {
	o := &UserLoginLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_login_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserLoginLog records from the query.
func (q userLoginLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserLoginLogSlice, error) {
	var o []*UserLoginLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserLoginLog slice")
	}

	if len(userLoginLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserLoginLog records in the query.
func (q userLoginLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_login_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userLoginLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_login_log exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserLoginLog) User(mods ...qm.QueryMod) userManagerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return UserManagers(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLoginLogL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLoginLog interface{}, mods queries.Applicator) error {
	var slice []*UserLoginLog
	var object *UserLoginLog

	if singular {
		var ok bool
		object, ok = maybeUserLoginLog.(*UserLoginLog)
		if !ok {
			object = new(UserLoginLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserLoginLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserLoginLog))
			}
		}
	} else {
		s, ok := maybeUserLoginLog.(*[]*UserLoginLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserLoginLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserLoginLog))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userLoginLogR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLoginLogR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_manager`),
		qm.WhereIn(`user_manager.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserManager")
	}

	var resultSlice []*UserManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserManager")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_manager")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_manager")
	}

	if len(userManagerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userManagerR{}
		}
		foreign.R.UserUserLoginLogs = append(foreign.R.UserUserLoginLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userManagerR{}
				}
				foreign.R.UserUserLoginLogs = append(foreign.R.UserUserLoginLogs, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the userLoginLog to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserLoginLogs.
func (o *UserLoginLog) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserManager) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_login_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLoginLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userLoginLogR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userManagerR{
			UserUserLoginLogs: UserLoginLogSlice{o},
		}
	} else {
		related.R.UserUserLoginLogs = append(related.R.UserUserLoginLogs, o)
	}

	return nil
}

// UserLoginLogs retrieves all the records using an executor.
func UserLoginLogs(mods ...qm.QueryMod) userLoginLogQuery {
	mods = append(mods, qm.From("\"user_login_log\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_login_log\".*"})
	}

	return userLoginLogQuery{q}
}

// FindUserLoginLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLoginLog(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserLoginLog, error) {
	userLoginLogObj := &UserLoginLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_login_log\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userLoginLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_login_log")
	}

	if err = userLoginLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userLoginLogObj, err
	}

	return userLoginLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserLoginLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_login_log provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLoginLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userLoginLogInsertCacheMut.RLock()
	cache, cached := userLoginLogInsertCache[key]
	userLoginLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userLoginLogAllColumns,
			userLoginLogColumnsWithDefault,
			userLoginLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userLoginLogType, userLoginLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLoginLogType, userLoginLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_login_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_login_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_login_log")
	}

	if !cached {
		userLoginLogInsertCacheMut.Lock()
		userLoginLogInsertCache[key] = cache
		userLoginLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserLoginLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserLoginLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userLoginLogUpdateCacheMut.RLock()
	cache, cached := userLoginLogUpdateCache[key]
	userLoginLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userLoginLogAllColumns,
			userLoginLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"create_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_login_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_login_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userLoginLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLoginLogType, userLoginLogMapping, append(wl, userLoginLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_login_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_login_log")
	}

	if !cached {
		userLoginLogUpdateCacheMut.Lock()
		userLoginLogUpdateCache[key] = cache
		userLoginLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userLoginLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_login_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_login_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLoginLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLoginLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_login_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userLoginLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userLoginLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userLoginLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserLoginLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_login_log provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLoginLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLoginLogUpsertCacheMut.RLock()
	cache, cached := userLoginLogUpsertCache[key]
	userLoginLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userLoginLogAllColumns,
			userLoginLogColumnsWithDefault,
			userLoginLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userLoginLogAllColumns,
			userLoginLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_login_log, could not build update column list")
		}

		ret := strmangle.SetComplement(userLoginLogAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userLoginLogPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_login_log, could not build conflict column list")
			}

			conflict = make([]string, len(userLoginLogPrimaryKeyColumns))
			copy(conflict, userLoginLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_login_log\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userLoginLogType, userLoginLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLoginLogType, userLoginLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_login_log")
	}

	if !cached {
		userLoginLogUpsertCacheMut.Lock()
		userLoginLogUpsertCache[key] = cache
		userLoginLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserLoginLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLoginLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserLoginLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLoginLogPrimaryKeyMapping)
	sql := "DELETE FROM \"user_login_log\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_login_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_login_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userLoginLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userLoginLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_login_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_login_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLoginLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userLoginLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLoginLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_login_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLoginLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userLoginLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_login_log")
	}

	if len(userLoginLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLoginLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserLoginLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLoginLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserLoginLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLoginLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_login_log\".* FROM \"user_login_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLoginLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserLoginLogSlice")
	}

	*o = slice

	return nil
}

// UserLoginLogExists checks if the UserLoginLog row exists.
func UserLoginLogExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_login_log\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_login_log exists")
	}

	return exists, nil
}

// Exists checks if the UserLoginLog row exists.
func (o *UserLoginLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserLoginLogExists(ctx, exec, o.ID)
}
