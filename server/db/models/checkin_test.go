// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCheckins(t *testing.T) {
	t.Parallel()

	query := Checkins()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCheckinsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckinsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Checkins().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckinsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CheckinSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckinsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CheckinExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Checkin exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CheckinExists to return true, but got false.")
	}
}

func testCheckinsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	checkinFound, err := FindCheckin(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if checkinFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCheckinsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Checkins().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCheckinsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Checkins().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCheckinsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	checkinOne := &Checkin{}
	checkinTwo := &Checkin{}
	if err = randomize.Struct(seed, checkinOne, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}
	if err = randomize.Struct(seed, checkinTwo, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = checkinOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = checkinTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Checkins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCheckinsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	checkinOne := &Checkin{}
	checkinTwo := &Checkin{}
	if err = randomize.Struct(seed, checkinOne, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}
	if err = randomize.Struct(seed, checkinTwo, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = checkinOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = checkinTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func checkinBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func checkinAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func checkinAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func checkinBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func checkinAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func checkinBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func checkinAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func checkinBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func checkinAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Checkin) error {
	*o = Checkin{}
	return nil
}

func testCheckinsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Checkin{}
	o := &Checkin{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, checkinDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Checkin object: %s", err)
	}

	AddCheckinHook(boil.BeforeInsertHook, checkinBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	checkinBeforeInsertHooks = []CheckinHook{}

	AddCheckinHook(boil.AfterInsertHook, checkinAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	checkinAfterInsertHooks = []CheckinHook{}

	AddCheckinHook(boil.AfterSelectHook, checkinAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	checkinAfterSelectHooks = []CheckinHook{}

	AddCheckinHook(boil.BeforeUpdateHook, checkinBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	checkinBeforeUpdateHooks = []CheckinHook{}

	AddCheckinHook(boil.AfterUpdateHook, checkinAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	checkinAfterUpdateHooks = []CheckinHook{}

	AddCheckinHook(boil.BeforeDeleteHook, checkinBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	checkinBeforeDeleteHooks = []CheckinHook{}

	AddCheckinHook(boil.AfterDeleteHook, checkinAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	checkinAfterDeleteHooks = []CheckinHook{}

	AddCheckinHook(boil.BeforeUpsertHook, checkinBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	checkinBeforeUpsertHooks = []CheckinHook{}

	AddCheckinHook(boil.AfterUpsertHook, checkinAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	checkinAfterUpsertHooks = []CheckinHook{}
}

func testCheckinsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCheckinsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(checkinPrimaryKeyColumns, checkinColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCheckinToOneStoreUsingStore(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Checkin
	var foreign Store

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StoreID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Store().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStoreHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Store) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckinSlice{&local}
	if err = local.L.LoadStore(ctx, tx, false, (*[]*Checkin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Store = nil
	if err = local.L.LoadStore(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckinToOneUserDatumUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Checkin
	var foreign UserDatum

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDatumDBTypes, false, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserDatumHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckinSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Checkin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckinToOneSetOpStoreUsingStore(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkin
	var b, c Store

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkinDBTypes, false, strmangle.SetComplement(checkinPrimaryKeyColumns, checkinColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Store{&b, &c} {
		err = a.SetStore(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Store != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Checkins[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StoreID != x.ID {
			t.Error("foreign key was wrong value", a.StoreID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StoreID))
		reflect.Indirect(reflect.ValueOf(&a.StoreID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StoreID != x.ID {
			t.Error("foreign key was wrong value", a.StoreID, x.ID)
		}
	}
}
func testCheckinToOneSetOpUserDatumUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkin
	var b, c UserDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkinDBTypes, false, strmangle.SetComplement(checkinPrimaryKeyColumns, checkinColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserDatum{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserCheckins[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testCheckinsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCheckinsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CheckinSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCheckinsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Checkins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	checkinDBTypes = map[string]string{`ID`: `uuid`, `StoreID`: `uuid`, `UserID`: `uuid`, `CheckInAt`: `timestamp with time zone`, `Archive`: `boolean`, `CreateAt`: `timestamp with time zone`, `UpdateAt`: `timestamp with time zone`}
	_              = bytes.MinRead
)

func testCheckinsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(checkinPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(checkinAllColumns) == len(checkinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCheckinsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(checkinAllColumns) == len(checkinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Checkin{}
	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, checkinDBTypes, true, checkinPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(checkinAllColumns, checkinPrimaryKeyColumns) {
		fields = checkinAllColumns
	} else {
		fields = strmangle.SetComplement(
			checkinAllColumns,
			checkinPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CheckinSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCheckinsUpsert(t *testing.T) {
	t.Parallel()

	if len(checkinAllColumns) == len(checkinPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Checkin{}
	if err = randomize.Struct(seed, &o, checkinDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Checkin: %s", err)
	}

	count, err := Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, checkinDBTypes, false, checkinPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Checkin struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Checkin: %s", err)
	}

	count, err = Checkins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
