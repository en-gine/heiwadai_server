// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserData(t *testing.T) {
	t.Parallel()

	query := UserData()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserDataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserDataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserData().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserDataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserDatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserDataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserDatumExists(ctx, tx, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if UserDatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserDatumExists to return true, but got false.")
	}
}

func testUserDataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userDatumFound, err := FindUserDatum(ctx, tx, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if userDatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserDataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserData().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserDataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserData().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserDataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userDatumOne := &UserDatum{}
	userDatumTwo := &UserDatum{}
	if err = randomize.Struct(seed, userDatumOne, userDatumDBTypes, false, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, userDatumTwo, userDatumDBTypes, false, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserDataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userDatumOne := &UserDatum{}
	userDatumTwo := &UserDatum{}
	if err = randomize.Struct(seed, userDatumOne, userDatumDBTypes, false, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}
	if err = randomize.Struct(seed, userDatumTwo, userDatumDBTypes, false, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userDatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userDatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userDatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func userDatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func userDatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func userDatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func userDatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func userDatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func userDatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func userDatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func userDatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
	*o = UserDatum{}
	return nil
}

func testUserDataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserDatum{}
	o := &UserDatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userDatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserDatum object: %s", err)
	}

	AddUserDatumHook(boil.BeforeInsertHook, userDatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userDatumBeforeInsertHooks = []UserDatumHook{}

	AddUserDatumHook(boil.AfterInsertHook, userDatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userDatumAfterInsertHooks = []UserDatumHook{}

	AddUserDatumHook(boil.AfterSelectHook, userDatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userDatumAfterSelectHooks = []UserDatumHook{}

	AddUserDatumHook(boil.BeforeUpdateHook, userDatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userDatumBeforeUpdateHooks = []UserDatumHook{}

	AddUserDatumHook(boil.AfterUpdateHook, userDatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userDatumAfterUpdateHooks = []UserDatumHook{}

	AddUserDatumHook(boil.BeforeDeleteHook, userDatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userDatumBeforeDeleteHooks = []UserDatumHook{}

	AddUserDatumHook(boil.AfterDeleteHook, userDatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userDatumAfterDeleteHooks = []UserDatumHook{}

	AddUserDatumHook(boil.BeforeUpsertHook, userDatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userDatumBeforeUpsertHooks = []UserDatumHook{}

	AddUserDatumHook(boil.AfterUpsertHook, userDatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userDatumAfterUpsertHooks = []UserDatumHook{}
}

func testUserDataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserDataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userDatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserDatumOneToOneUserOptionUsingUserUserOption(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UserOption
	var local UserDatum

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.UserID = local.UserID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserUserOption().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserOptionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserDatumSlice{&local}
	if err = local.L.LoadUserUserOption(ctx, tx, false, (*[]*UserDatum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserUserOption == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserUserOption = nil
	if err = local.L.LoadUserUserOption(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserUserOption == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserDatumOneToOneSetOpUserOptionUsingUserUserOption(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c UserOption

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userOptionDBTypes, false, strmangle.SetComplement(userOptionPrimaryKeyColumns, userOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userOptionDBTypes, false, strmangle.SetComplement(userOptionPrimaryKeyColumns, userOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserOption{&b, &c} {
		err = a.SetUserUserOption(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserUserOption != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.User != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserOptionExists(ctx, tx, x.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testUserDatumToManyUserCheckins(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c Checkin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserID = a.UserID
	c.UserID = a.UserID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserCheckins().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserDatumSlice{&a}
	if err = a.L.LoadUserCheckins(ctx, tx, false, (*[]*UserDatum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserCheckins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserCheckins = nil
	if err = a.L.LoadUserCheckins(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserCheckins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserDatumToManyUserCouponAttachedUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c CouponAttachedUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, couponAttachedUserDBTypes, false, couponAttachedUserColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, couponAttachedUserDBTypes, false, couponAttachedUserColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserID = a.UserID
	c.UserID = a.UserID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserCouponAttachedUsers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserDatumSlice{&a}
	if err = a.L.LoadUserCouponAttachedUsers(ctx, tx, false, (*[]*UserDatum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserCouponAttachedUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserCouponAttachedUsers = nil
	if err = a.L.LoadUserCouponAttachedUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserCouponAttachedUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserDatumToManyUserMailMagazineLogs(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c MailMagazineLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, mailMagazineLogDBTypes, false, mailMagazineLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mailMagazineLogDBTypes, false, mailMagazineLogColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserID = a.UserID
	c.UserID = a.UserID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserMailMagazineLogs().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserDatumSlice{&a}
	if err = a.L.LoadUserMailMagazineLogs(ctx, tx, false, (*[]*UserDatum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserMailMagazineLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserMailMagazineLogs = nil
	if err = a.L.LoadUserMailMagazineLogs(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserMailMagazineLogs); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserDatumToManyBookUserUserBooks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c UserBook

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userBookDBTypes, false, userBookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userBookDBTypes, false, userBookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BookUserID = a.UserID
	c.BookUserID = a.UserID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BookUserUserBooks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BookUserID == b.BookUserID {
			bFound = true
		}
		if v.BookUserID == c.BookUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserDatumSlice{&a}
	if err = a.L.LoadBookUserUserBooks(ctx, tx, false, (*[]*UserDatum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BookUserUserBooks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BookUserUserBooks = nil
	if err = a.L.LoadBookUserUserBooks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BookUserUserBooks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserDatumToManyUserUserReports(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c UserReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userReportDBTypes, false, userReportColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userReportDBTypes, false, userReportColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserID = a.UserID
	c.UserID = a.UserID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserUserReports().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserDatumSlice{&a}
	if err = a.L.LoadUserUserReports(ctx, tx, false, (*[]*UserDatum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserUserReports); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserUserReports = nil
	if err = a.L.LoadUserUserReports(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserUserReports); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserDatumToManyAddOpUserCheckins(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c, d, e Checkin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkin{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkinDBTypes, false, strmangle.SetComplement(checkinPrimaryKeyColumns, checkinColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Checkin{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserCheckins(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserID != first.UserID {
			t.Error("foreign key was wrong value", a.UserID, first.UserID)
		}
		if a.UserID != second.UserID {
			t.Error("foreign key was wrong value", a.UserID, second.UserID)
		}

		if first.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserCheckins[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserCheckins[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserCheckins().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserDatumToManyAddOpUserCouponAttachedUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c, d, e CouponAttachedUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CouponAttachedUser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, couponAttachedUserDBTypes, false, strmangle.SetComplement(couponAttachedUserPrimaryKeyColumns, couponAttachedUserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CouponAttachedUser{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserCouponAttachedUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserID != first.UserID {
			t.Error("foreign key was wrong value", a.UserID, first.UserID)
		}
		if a.UserID != second.UserID {
			t.Error("foreign key was wrong value", a.UserID, second.UserID)
		}

		if first.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserCouponAttachedUsers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserCouponAttachedUsers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserCouponAttachedUsers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserDatumToManyAddOpUserMailMagazineLogs(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c, d, e MailMagazineLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MailMagazineLog{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, mailMagazineLogDBTypes, false, strmangle.SetComplement(mailMagazineLogPrimaryKeyColumns, mailMagazineLogColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MailMagazineLog{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserMailMagazineLogs(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserID != first.UserID {
			t.Error("foreign key was wrong value", a.UserID, first.UserID)
		}
		if a.UserID != second.UserID {
			t.Error("foreign key was wrong value", a.UserID, second.UserID)
		}

		if first.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserMailMagazineLogs[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserMailMagazineLogs[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserMailMagazineLogs().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserDatumToManyAddOpBookUserUserBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c, d, e UserBook

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserBook{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userBookDBTypes, false, strmangle.SetComplement(userBookPrimaryKeyColumns, userBookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserBook{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBookUserUserBooks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserID != first.BookUserID {
			t.Error("foreign key was wrong value", a.UserID, first.BookUserID)
		}
		if a.UserID != second.BookUserID {
			t.Error("foreign key was wrong value", a.UserID, second.BookUserID)
		}

		if first.R.BookUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BookUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BookUserUserBooks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BookUserUserBooks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BookUserUserBooks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserDatumToManyAddOpUserUserReports(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c, d, e UserReport

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserReport{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userReportDBTypes, false, strmangle.SetComplement(userReportPrimaryKeyColumns, userReportColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserReport{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserUserReports(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.UserID != first.UserID {
			t.Error("foreign key was wrong value", a.UserID, first.UserID)
		}
		if a.UserID != second.UserID {
			t.Error("foreign key was wrong value", a.UserID, second.UserID)
		}

		if first.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserUserReports[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserUserReports[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserUserReports().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserDatumToOneUserManagerUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserDatum
	var foreign UserManager

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userDatumDBTypes, false, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userManagerDBTypes, false, userManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserManager struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserManagerHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserManager) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserDatumSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserDatum)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserDatumToOneSetOpUserManagerUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserDatum
	var b, c UserManager

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userManagerDBTypes, false, strmangle.SetComplement(userManagerPrimaryKeyColumns, userManagerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userManagerDBTypes, false, strmangle.SetComplement(userManagerPrimaryKeyColumns, userManagerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserManager{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserUserDatum != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserDatumExists(ctx, tx, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserDataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserDataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserDatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserDataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserData().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userDatumDBTypes = map[string]string{`UserID`: `uuid`, `FirstName`: `character varying`, `LastName`: `character varying`, `FirstNameKana`: `character varying`, `LastNameKana`: `character varying`, `CompanyName`: `character varying`, `BirthDate`: `timestamp with time zone`, `ZipCode`: `character varying`, `Prefecture`: `integer`, `City`: `character varying`, `Address`: `character varying`, `Tel`: `character varying`, `AcceptMail`: `boolean`, `CreateAt`: `timestamp with time zone`, `UpdateAt`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testUserDataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userDatumAllColumns) == len(userDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserDataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userDatumAllColumns) == len(userDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserDatum{}
	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userDatumDBTypes, true, userDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userDatumAllColumns, userDatumPrimaryKeyColumns) {
		fields = userDatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			userDatumAllColumns,
			userDatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserDatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserDataUpsert(t *testing.T) {
	t.Parallel()

	if len(userDatumAllColumns) == len(userDatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserDatum{}
	if err = randomize.Struct(seed, &o, userDatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserDatum: %s", err)
	}

	count, err := UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userDatumDBTypes, false, userDatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserDatum: %s", err)
	}

	count, err = UserData().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
