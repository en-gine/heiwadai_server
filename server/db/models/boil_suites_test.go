// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Admins", testAdmins)
	t.Run("BookGuestData", testBookGuestData)
	t.Run("BookPlans", testBookPlans)
	t.Run("Checkins", testCheckins)
	t.Run("Coupons", testCoupons)
	t.Run("CouponAttachedUsers", testCouponAttachedUsers)
	t.Run("CronIssueLogs", testCronIssueLogs)
	t.Run("MailMagazines", testMailMagazines)
	t.Run("MailMagazineLogs", testMailMagazineLogs)
	t.Run("Messages", testMessages)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("StayableStoreInfos", testStayableStoreInfos)
	t.Run("Stores", testStores)
	t.Run("UserBooks", testUserBooks)
	t.Run("UserData", testUserData)
	t.Run("UserLoginLogs", testUserLoginLogs)
	t.Run("UserManagers", testUserManagers)
	t.Run("UserOptions", testUserOptions)
	t.Run("UserReports", testUserReports)
}

func TestDelete(t *testing.T) {
	t.Run("Admins", testAdminsDelete)
	t.Run("BookGuestData", testBookGuestDataDelete)
	t.Run("BookPlans", testBookPlansDelete)
	t.Run("Checkins", testCheckinsDelete)
	t.Run("Coupons", testCouponsDelete)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersDelete)
	t.Run("CronIssueLogs", testCronIssueLogsDelete)
	t.Run("MailMagazines", testMailMagazinesDelete)
	t.Run("MailMagazineLogs", testMailMagazineLogsDelete)
	t.Run("Messages", testMessagesDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("StayableStoreInfos", testStayableStoreInfosDelete)
	t.Run("Stores", testStoresDelete)
	t.Run("UserBooks", testUserBooksDelete)
	t.Run("UserData", testUserDataDelete)
	t.Run("UserLoginLogs", testUserLoginLogsDelete)
	t.Run("UserManagers", testUserManagersDelete)
	t.Run("UserOptions", testUserOptionsDelete)
	t.Run("UserReports", testUserReportsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Admins", testAdminsQueryDeleteAll)
	t.Run("BookGuestData", testBookGuestDataQueryDeleteAll)
	t.Run("BookPlans", testBookPlansQueryDeleteAll)
	t.Run("Checkins", testCheckinsQueryDeleteAll)
	t.Run("Coupons", testCouponsQueryDeleteAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersQueryDeleteAll)
	t.Run("CronIssueLogs", testCronIssueLogsQueryDeleteAll)
	t.Run("MailMagazines", testMailMagazinesQueryDeleteAll)
	t.Run("MailMagazineLogs", testMailMagazineLogsQueryDeleteAll)
	t.Run("Messages", testMessagesQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosQueryDeleteAll)
	t.Run("Stores", testStoresQueryDeleteAll)
	t.Run("UserBooks", testUserBooksQueryDeleteAll)
	t.Run("UserData", testUserDataQueryDeleteAll)
	t.Run("UserLoginLogs", testUserLoginLogsQueryDeleteAll)
	t.Run("UserManagers", testUserManagersQueryDeleteAll)
	t.Run("UserOptions", testUserOptionsQueryDeleteAll)
	t.Run("UserReports", testUserReportsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Admins", testAdminsSliceDeleteAll)
	t.Run("BookGuestData", testBookGuestDataSliceDeleteAll)
	t.Run("BookPlans", testBookPlansSliceDeleteAll)
	t.Run("Checkins", testCheckinsSliceDeleteAll)
	t.Run("Coupons", testCouponsSliceDeleteAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersSliceDeleteAll)
	t.Run("CronIssueLogs", testCronIssueLogsSliceDeleteAll)
	t.Run("MailMagazines", testMailMagazinesSliceDeleteAll)
	t.Run("MailMagazineLogs", testMailMagazineLogsSliceDeleteAll)
	t.Run("Messages", testMessagesSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosSliceDeleteAll)
	t.Run("Stores", testStoresSliceDeleteAll)
	t.Run("UserBooks", testUserBooksSliceDeleteAll)
	t.Run("UserData", testUserDataSliceDeleteAll)
	t.Run("UserLoginLogs", testUserLoginLogsSliceDeleteAll)
	t.Run("UserManagers", testUserManagersSliceDeleteAll)
	t.Run("UserOptions", testUserOptionsSliceDeleteAll)
	t.Run("UserReports", testUserReportsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Admins", testAdminsExists)
	t.Run("BookGuestData", testBookGuestDataExists)
	t.Run("BookPlans", testBookPlansExists)
	t.Run("Checkins", testCheckinsExists)
	t.Run("Coupons", testCouponsExists)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersExists)
	t.Run("CronIssueLogs", testCronIssueLogsExists)
	t.Run("MailMagazines", testMailMagazinesExists)
	t.Run("MailMagazineLogs", testMailMagazineLogsExists)
	t.Run("Messages", testMessagesExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("StayableStoreInfos", testStayableStoreInfosExists)
	t.Run("Stores", testStoresExists)
	t.Run("UserBooks", testUserBooksExists)
	t.Run("UserData", testUserDataExists)
	t.Run("UserLoginLogs", testUserLoginLogsExists)
	t.Run("UserManagers", testUserManagersExists)
	t.Run("UserOptions", testUserOptionsExists)
	t.Run("UserReports", testUserReportsExists)
}

func TestFind(t *testing.T) {
	t.Run("Admins", testAdminsFind)
	t.Run("BookGuestData", testBookGuestDataFind)
	t.Run("BookPlans", testBookPlansFind)
	t.Run("Checkins", testCheckinsFind)
	t.Run("Coupons", testCouponsFind)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersFind)
	t.Run("CronIssueLogs", testCronIssueLogsFind)
	t.Run("MailMagazines", testMailMagazinesFind)
	t.Run("MailMagazineLogs", testMailMagazineLogsFind)
	t.Run("Messages", testMessagesFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("StayableStoreInfos", testStayableStoreInfosFind)
	t.Run("Stores", testStoresFind)
	t.Run("UserBooks", testUserBooksFind)
	t.Run("UserData", testUserDataFind)
	t.Run("UserLoginLogs", testUserLoginLogsFind)
	t.Run("UserManagers", testUserManagersFind)
	t.Run("UserOptions", testUserOptionsFind)
	t.Run("UserReports", testUserReportsFind)
}

func TestBind(t *testing.T) {
	t.Run("Admins", testAdminsBind)
	t.Run("BookGuestData", testBookGuestDataBind)
	t.Run("BookPlans", testBookPlansBind)
	t.Run("Checkins", testCheckinsBind)
	t.Run("Coupons", testCouponsBind)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersBind)
	t.Run("CronIssueLogs", testCronIssueLogsBind)
	t.Run("MailMagazines", testMailMagazinesBind)
	t.Run("MailMagazineLogs", testMailMagazineLogsBind)
	t.Run("Messages", testMessagesBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("StayableStoreInfos", testStayableStoreInfosBind)
	t.Run("Stores", testStoresBind)
	t.Run("UserBooks", testUserBooksBind)
	t.Run("UserData", testUserDataBind)
	t.Run("UserLoginLogs", testUserLoginLogsBind)
	t.Run("UserManagers", testUserManagersBind)
	t.Run("UserOptions", testUserOptionsBind)
	t.Run("UserReports", testUserReportsBind)
}

func TestOne(t *testing.T) {
	t.Run("Admins", testAdminsOne)
	t.Run("BookGuestData", testBookGuestDataOne)
	t.Run("BookPlans", testBookPlansOne)
	t.Run("Checkins", testCheckinsOne)
	t.Run("Coupons", testCouponsOne)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersOne)
	t.Run("CronIssueLogs", testCronIssueLogsOne)
	t.Run("MailMagazines", testMailMagazinesOne)
	t.Run("MailMagazineLogs", testMailMagazineLogsOne)
	t.Run("Messages", testMessagesOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("StayableStoreInfos", testStayableStoreInfosOne)
	t.Run("Stores", testStoresOne)
	t.Run("UserBooks", testUserBooksOne)
	t.Run("UserData", testUserDataOne)
	t.Run("UserLoginLogs", testUserLoginLogsOne)
	t.Run("UserManagers", testUserManagersOne)
	t.Run("UserOptions", testUserOptionsOne)
	t.Run("UserReports", testUserReportsOne)
}

func TestAll(t *testing.T) {
	t.Run("Admins", testAdminsAll)
	t.Run("BookGuestData", testBookGuestDataAll)
	t.Run("BookPlans", testBookPlansAll)
	t.Run("Checkins", testCheckinsAll)
	t.Run("Coupons", testCouponsAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersAll)
	t.Run("CronIssueLogs", testCronIssueLogsAll)
	t.Run("MailMagazines", testMailMagazinesAll)
	t.Run("MailMagazineLogs", testMailMagazineLogsAll)
	t.Run("Messages", testMessagesAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosAll)
	t.Run("Stores", testStoresAll)
	t.Run("UserBooks", testUserBooksAll)
	t.Run("UserData", testUserDataAll)
	t.Run("UserLoginLogs", testUserLoginLogsAll)
	t.Run("UserManagers", testUserManagersAll)
	t.Run("UserOptions", testUserOptionsAll)
	t.Run("UserReports", testUserReportsAll)
}

func TestCount(t *testing.T) {
	t.Run("Admins", testAdminsCount)
	t.Run("BookGuestData", testBookGuestDataCount)
	t.Run("BookPlans", testBookPlansCount)
	t.Run("Checkins", testCheckinsCount)
	t.Run("Coupons", testCouponsCount)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersCount)
	t.Run("CronIssueLogs", testCronIssueLogsCount)
	t.Run("MailMagazines", testMailMagazinesCount)
	t.Run("MailMagazineLogs", testMailMagazineLogsCount)
	t.Run("Messages", testMessagesCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("StayableStoreInfos", testStayableStoreInfosCount)
	t.Run("Stores", testStoresCount)
	t.Run("UserBooks", testUserBooksCount)
	t.Run("UserData", testUserDataCount)
	t.Run("UserLoginLogs", testUserLoginLogsCount)
	t.Run("UserManagers", testUserManagersCount)
	t.Run("UserOptions", testUserOptionsCount)
	t.Run("UserReports", testUserReportsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Admins", testAdminsHooks)
	t.Run("BookGuestData", testBookGuestDataHooks)
	t.Run("BookPlans", testBookPlansHooks)
	t.Run("Checkins", testCheckinsHooks)
	t.Run("Coupons", testCouponsHooks)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersHooks)
	t.Run("CronIssueLogs", testCronIssueLogsHooks)
	t.Run("MailMagazines", testMailMagazinesHooks)
	t.Run("MailMagazineLogs", testMailMagazineLogsHooks)
	t.Run("Messages", testMessagesHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("StayableStoreInfos", testStayableStoreInfosHooks)
	t.Run("Stores", testStoresHooks)
	t.Run("UserBooks", testUserBooksHooks)
	t.Run("UserData", testUserDataHooks)
	t.Run("UserLoginLogs", testUserLoginLogsHooks)
	t.Run("UserManagers", testUserManagersHooks)
	t.Run("UserOptions", testUserOptionsHooks)
	t.Run("UserReports", testUserReportsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Admins", testAdminsInsert)
	t.Run("Admins", testAdminsInsertWhitelist)
	t.Run("BookGuestData", testBookGuestDataInsert)
	t.Run("BookGuestData", testBookGuestDataInsertWhitelist)
	t.Run("BookPlans", testBookPlansInsert)
	t.Run("BookPlans", testBookPlansInsertWhitelist)
	t.Run("Checkins", testCheckinsInsert)
	t.Run("Checkins", testCheckinsInsertWhitelist)
	t.Run("Coupons", testCouponsInsert)
	t.Run("Coupons", testCouponsInsertWhitelist)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersInsert)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersInsertWhitelist)
	t.Run("CronIssueLogs", testCronIssueLogsInsert)
	t.Run("CronIssueLogs", testCronIssueLogsInsertWhitelist)
	t.Run("MailMagazines", testMailMagazinesInsert)
	t.Run("MailMagazines", testMailMagazinesInsertWhitelist)
	t.Run("MailMagazineLogs", testMailMagazineLogsInsert)
	t.Run("MailMagazineLogs", testMailMagazineLogsInsertWhitelist)
	t.Run("Messages", testMessagesInsert)
	t.Run("Messages", testMessagesInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("StayableStoreInfos", testStayableStoreInfosInsert)
	t.Run("StayableStoreInfos", testStayableStoreInfosInsertWhitelist)
	t.Run("Stores", testStoresInsert)
	t.Run("Stores", testStoresInsertWhitelist)
	t.Run("UserBooks", testUserBooksInsert)
	t.Run("UserBooks", testUserBooksInsertWhitelist)
	t.Run("UserData", testUserDataInsert)
	t.Run("UserData", testUserDataInsertWhitelist)
	t.Run("UserLoginLogs", testUserLoginLogsInsert)
	t.Run("UserLoginLogs", testUserLoginLogsInsertWhitelist)
	t.Run("UserManagers", testUserManagersInsert)
	t.Run("UserManagers", testUserManagersInsertWhitelist)
	t.Run("UserOptions", testUserOptionsInsert)
	t.Run("UserOptions", testUserOptionsInsertWhitelist)
	t.Run("UserReports", testUserReportsInsert)
	t.Run("UserReports", testUserReportsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AdminToUserManagerUsingAdmin", testAdminToOneUserManagerUsingAdmin)
	t.Run("AdminToStoreUsingBelongToStore", testAdminToOneStoreUsingBelongToStore)
	t.Run("BookPlanToStoreUsingStore", testBookPlanToOneStoreUsingStore)
	t.Run("CheckinToStoreUsingStore", testCheckinToOneStoreUsingStore)
	t.Run("CheckinToUserDatumUsingUser", testCheckinToOneUserDatumUsingUser)
	t.Run("CouponAttachedUserToCouponUsingCoupon", testCouponAttachedUserToOneCouponUsingCoupon)
	t.Run("CouponAttachedUserToUserDatumUsingUser", testCouponAttachedUserToOneUserDatumUsingUser)
	t.Run("MailMagazineToAdminUsingAuthor", testMailMagazineToOneAdminUsingAuthor)
	t.Run("MailMagazineLogToMailMagazineUsingMailMagazine", testMailMagazineLogToOneMailMagazineUsingMailMagazine)
	t.Run("MailMagazineLogToUserDatumUsingUser", testMailMagazineLogToOneUserDatumUsingUser)
	t.Run("MessageToAdminUsingAuthor", testMessageToOneAdminUsingAuthor)
	t.Run("StayableStoreInfoToStoreUsingStore", testStayableStoreInfoToOneStoreUsingStore)
	t.Run("UserBookToBookPlanUsingBookPlan", testUserBookToOneBookPlanUsingBookPlan)
	t.Run("UserBookToUserDatumUsingBookUser", testUserBookToOneUserDatumUsingBookUser)
	t.Run("UserBookToBookGuestDatumUsingGuestDatum", testUserBookToOneBookGuestDatumUsingGuestDatum)
	t.Run("UserDatumToUserManagerUsingUser", testUserDatumToOneUserManagerUsingUser)
	t.Run("UserLoginLogToUserDatumUsingUser", testUserLoginLogToOneUserDatumUsingUser)
	t.Run("UserOptionToUserDatumUsingUser", testUserOptionToOneUserDatumUsingUser)
	t.Run("UserReportToUserDatumUsingUser", testUserReportToOneUserDatumUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("StoreToStayableStoreInfoUsingStayableStoreInfo", testStoreOneToOneStayableStoreInfoUsingStayableStoreInfo)
	t.Run("UserDatumToUserOptionUsingUserUserOption", testUserDatumOneToOneUserOptionUsingUserUserOption)
	t.Run("UserManagerToAdminUsingAdminAdmin", testUserManagerOneToOneAdminUsingAdminAdmin)
	t.Run("UserManagerToUserDatumUsingUserUserDatum", testUserManagerOneToOneUserDatumUsingUserUserDatum)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AdminToAuthorMailMagazines", testAdminToManyAuthorMailMagazines)
	t.Run("AdminToAuthorMessages", testAdminToManyAuthorMessages)
	t.Run("BookGuestDatumToGuestDatumUserBooks", testBookGuestDatumToManyGuestDatumUserBooks)
	t.Run("BookPlanToUserBooks", testBookPlanToManyUserBooks)
	t.Run("CouponToCouponAttachedUsers", testCouponToManyCouponAttachedUsers)
	t.Run("CouponToStores", testCouponToManyStores)
	t.Run("MailMagazineToMailMagazineLogs", testMailMagazineToManyMailMagazineLogs)
	t.Run("StoreToBelongToAdmins", testStoreToManyBelongToAdmins)
	t.Run("StoreToBookPlans", testStoreToManyBookPlans)
	t.Run("StoreToCheckins", testStoreToManyCheckins)
	t.Run("StoreToCoupons", testStoreToManyCoupons)
	t.Run("UserDatumToUserCheckins", testUserDatumToManyUserCheckins)
	t.Run("UserDatumToUserCouponAttachedUsers", testUserDatumToManyUserCouponAttachedUsers)
	t.Run("UserDatumToUserMailMagazineLogs", testUserDatumToManyUserMailMagazineLogs)
	t.Run("UserDatumToBookUserUserBooks", testUserDatumToManyBookUserUserBooks)
	t.Run("UserDatumToUserUserLoginLogs", testUserDatumToManyUserUserLoginLogs)
	t.Run("UserDatumToUserUserReports", testUserDatumToManyUserUserReports)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AdminToUserManagerUsingAdminAdmin", testAdminToOneSetOpUserManagerUsingAdmin)
	t.Run("AdminToStoreUsingBelongToAdmins", testAdminToOneSetOpStoreUsingBelongToStore)
	t.Run("BookPlanToStoreUsingBookPlans", testBookPlanToOneSetOpStoreUsingStore)
	t.Run("CheckinToStoreUsingCheckins", testCheckinToOneSetOpStoreUsingStore)
	t.Run("CheckinToUserDatumUsingUserCheckins", testCheckinToOneSetOpUserDatumUsingUser)
	t.Run("CouponAttachedUserToCouponUsingCouponAttachedUsers", testCouponAttachedUserToOneSetOpCouponUsingCoupon)
	t.Run("CouponAttachedUserToUserDatumUsingUserCouponAttachedUsers", testCouponAttachedUserToOneSetOpUserDatumUsingUser)
	t.Run("MailMagazineToAdminUsingAuthorMailMagazines", testMailMagazineToOneSetOpAdminUsingAuthor)
	t.Run("MailMagazineLogToMailMagazineUsingMailMagazineLogs", testMailMagazineLogToOneSetOpMailMagazineUsingMailMagazine)
	t.Run("MailMagazineLogToUserDatumUsingUserMailMagazineLogs", testMailMagazineLogToOneSetOpUserDatumUsingUser)
	t.Run("MessageToAdminUsingAuthorMessages", testMessageToOneSetOpAdminUsingAuthor)
	t.Run("StayableStoreInfoToStoreUsingStayableStoreInfo", testStayableStoreInfoToOneSetOpStoreUsingStore)
	t.Run("UserBookToBookPlanUsingUserBooks", testUserBookToOneSetOpBookPlanUsingBookPlan)
	t.Run("UserBookToUserDatumUsingBookUserUserBooks", testUserBookToOneSetOpUserDatumUsingBookUser)
	t.Run("UserBookToBookGuestDatumUsingGuestDatumUserBooks", testUserBookToOneSetOpBookGuestDatumUsingGuestDatum)
	t.Run("UserDatumToUserManagerUsingUserUserDatum", testUserDatumToOneSetOpUserManagerUsingUser)
	t.Run("UserLoginLogToUserDatumUsingUserUserLoginLogs", testUserLoginLogToOneSetOpUserDatumUsingUser)
	t.Run("UserOptionToUserDatumUsingUserUserOption", testUserOptionToOneSetOpUserDatumUsingUser)
	t.Run("UserReportToUserDatumUsingUserUserReports", testUserReportToOneSetOpUserDatumUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("StoreToStayableStoreInfoUsingStayableStoreInfo", testStoreOneToOneSetOpStayableStoreInfoUsingStayableStoreInfo)
	t.Run("UserDatumToUserOptionUsingUserUserOption", testUserDatumOneToOneSetOpUserOptionUsingUserUserOption)
	t.Run("UserManagerToAdminUsingAdminAdmin", testUserManagerOneToOneSetOpAdminUsingAdminAdmin)
	t.Run("UserManagerToUserDatumUsingUserUserDatum", testUserManagerOneToOneSetOpUserDatumUsingUserUserDatum)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AdminToAuthorMailMagazines", testAdminToManyAddOpAuthorMailMagazines)
	t.Run("AdminToAuthorMessages", testAdminToManyAddOpAuthorMessages)
	t.Run("BookGuestDatumToGuestDatumUserBooks", testBookGuestDatumToManyAddOpGuestDatumUserBooks)
	t.Run("BookPlanToUserBooks", testBookPlanToManyAddOpUserBooks)
	t.Run("CouponToCouponAttachedUsers", testCouponToManyAddOpCouponAttachedUsers)
	t.Run("CouponToStores", testCouponToManyAddOpStores)
	t.Run("MailMagazineToMailMagazineLogs", testMailMagazineToManyAddOpMailMagazineLogs)
	t.Run("StoreToBelongToAdmins", testStoreToManyAddOpBelongToAdmins)
	t.Run("StoreToBookPlans", testStoreToManyAddOpBookPlans)
	t.Run("StoreToCheckins", testStoreToManyAddOpCheckins)
	t.Run("StoreToCoupons", testStoreToManyAddOpCoupons)
	t.Run("UserDatumToUserCheckins", testUserDatumToManyAddOpUserCheckins)
	t.Run("UserDatumToUserCouponAttachedUsers", testUserDatumToManyAddOpUserCouponAttachedUsers)
	t.Run("UserDatumToUserMailMagazineLogs", testUserDatumToManyAddOpUserMailMagazineLogs)
	t.Run("UserDatumToBookUserUserBooks", testUserDatumToManyAddOpBookUserUserBooks)
	t.Run("UserDatumToUserUserLoginLogs", testUserDatumToManyAddOpUserUserLoginLogs)
	t.Run("UserDatumToUserUserReports", testUserDatumToManyAddOpUserUserReports)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CouponToStores", testCouponToManySetOpStores)
	t.Run("StoreToCoupons", testStoreToManySetOpCoupons)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CouponToStores", testCouponToManyRemoveOpStores)
	t.Run("StoreToCoupons", testStoreToManyRemoveOpCoupons)
}

func TestReload(t *testing.T) {
	t.Run("Admins", testAdminsReload)
	t.Run("BookGuestData", testBookGuestDataReload)
	t.Run("BookPlans", testBookPlansReload)
	t.Run("Checkins", testCheckinsReload)
	t.Run("Coupons", testCouponsReload)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersReload)
	t.Run("CronIssueLogs", testCronIssueLogsReload)
	t.Run("MailMagazines", testMailMagazinesReload)
	t.Run("MailMagazineLogs", testMailMagazineLogsReload)
	t.Run("Messages", testMessagesReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("StayableStoreInfos", testStayableStoreInfosReload)
	t.Run("Stores", testStoresReload)
	t.Run("UserBooks", testUserBooksReload)
	t.Run("UserData", testUserDataReload)
	t.Run("UserLoginLogs", testUserLoginLogsReload)
	t.Run("UserManagers", testUserManagersReload)
	t.Run("UserOptions", testUserOptionsReload)
	t.Run("UserReports", testUserReportsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Admins", testAdminsReloadAll)
	t.Run("BookGuestData", testBookGuestDataReloadAll)
	t.Run("BookPlans", testBookPlansReloadAll)
	t.Run("Checkins", testCheckinsReloadAll)
	t.Run("Coupons", testCouponsReloadAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersReloadAll)
	t.Run("CronIssueLogs", testCronIssueLogsReloadAll)
	t.Run("MailMagazines", testMailMagazinesReloadAll)
	t.Run("MailMagazineLogs", testMailMagazineLogsReloadAll)
	t.Run("Messages", testMessagesReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosReloadAll)
	t.Run("Stores", testStoresReloadAll)
	t.Run("UserBooks", testUserBooksReloadAll)
	t.Run("UserData", testUserDataReloadAll)
	t.Run("UserLoginLogs", testUserLoginLogsReloadAll)
	t.Run("UserManagers", testUserManagersReloadAll)
	t.Run("UserOptions", testUserOptionsReloadAll)
	t.Run("UserReports", testUserReportsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Admins", testAdminsSelect)
	t.Run("BookGuestData", testBookGuestDataSelect)
	t.Run("BookPlans", testBookPlansSelect)
	t.Run("Checkins", testCheckinsSelect)
	t.Run("Coupons", testCouponsSelect)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersSelect)
	t.Run("CronIssueLogs", testCronIssueLogsSelect)
	t.Run("MailMagazines", testMailMagazinesSelect)
	t.Run("MailMagazineLogs", testMailMagazineLogsSelect)
	t.Run("Messages", testMessagesSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("StayableStoreInfos", testStayableStoreInfosSelect)
	t.Run("Stores", testStoresSelect)
	t.Run("UserBooks", testUserBooksSelect)
	t.Run("UserData", testUserDataSelect)
	t.Run("UserLoginLogs", testUserLoginLogsSelect)
	t.Run("UserManagers", testUserManagersSelect)
	t.Run("UserOptions", testUserOptionsSelect)
	t.Run("UserReports", testUserReportsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Admins", testAdminsUpdate)
	t.Run("BookGuestData", testBookGuestDataUpdate)
	t.Run("BookPlans", testBookPlansUpdate)
	t.Run("Checkins", testCheckinsUpdate)
	t.Run("Coupons", testCouponsUpdate)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersUpdate)
	t.Run("CronIssueLogs", testCronIssueLogsUpdate)
	t.Run("MailMagazines", testMailMagazinesUpdate)
	t.Run("MailMagazineLogs", testMailMagazineLogsUpdate)
	t.Run("Messages", testMessagesUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("StayableStoreInfos", testStayableStoreInfosUpdate)
	t.Run("Stores", testStoresUpdate)
	t.Run("UserBooks", testUserBooksUpdate)
	t.Run("UserData", testUserDataUpdate)
	t.Run("UserLoginLogs", testUserLoginLogsUpdate)
	t.Run("UserManagers", testUserManagersUpdate)
	t.Run("UserOptions", testUserOptionsUpdate)
	t.Run("UserReports", testUserReportsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Admins", testAdminsSliceUpdateAll)
	t.Run("BookGuestData", testBookGuestDataSliceUpdateAll)
	t.Run("BookPlans", testBookPlansSliceUpdateAll)
	t.Run("Checkins", testCheckinsSliceUpdateAll)
	t.Run("Coupons", testCouponsSliceUpdateAll)
	t.Run("CouponAttachedUsers", testCouponAttachedUsersSliceUpdateAll)
	t.Run("CronIssueLogs", testCronIssueLogsSliceUpdateAll)
	t.Run("MailMagazines", testMailMagazinesSliceUpdateAll)
	t.Run("MailMagazineLogs", testMailMagazineLogsSliceUpdateAll)
	t.Run("Messages", testMessagesSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("StayableStoreInfos", testStayableStoreInfosSliceUpdateAll)
	t.Run("Stores", testStoresSliceUpdateAll)
	t.Run("UserBooks", testUserBooksSliceUpdateAll)
	t.Run("UserData", testUserDataSliceUpdateAll)
	t.Run("UserLoginLogs", testUserLoginLogsSliceUpdateAll)
	t.Run("UserManagers", testUserManagersSliceUpdateAll)
	t.Run("UserOptions", testUserOptionsSliceUpdateAll)
	t.Run("UserReports", testUserReportsSliceUpdateAll)
}
