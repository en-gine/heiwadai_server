// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStores(t *testing.T) {
	t.Parallel()

	query := Stores()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStoresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStoresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Stores().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStoresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StoreSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStoresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StoreExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Store exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StoreExists to return true, but got false.")
	}
}

func testStoresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	storeFound, err := FindStore(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if storeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStoresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Stores().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStoresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Stores().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStoresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	storeOne := &Store{}
	storeTwo := &Store{}
	if err = randomize.Struct(seed, storeOne, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}
	if err = randomize.Struct(seed, storeTwo, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = storeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = storeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Stores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStoresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	storeOne := &Store{}
	storeTwo := &Store{}
	if err = randomize.Struct(seed, storeOne, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}
	if err = randomize.Struct(seed, storeTwo, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = storeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = storeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func storeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func storeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func storeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func storeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func storeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func storeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func storeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func storeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func storeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Store) error {
	*o = Store{}
	return nil
}

func testStoresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Store{}
	o := &Store{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, storeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Store object: %s", err)
	}

	AddStoreHook(boil.BeforeInsertHook, storeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	storeBeforeInsertHooks = []StoreHook{}

	AddStoreHook(boil.AfterInsertHook, storeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	storeAfterInsertHooks = []StoreHook{}

	AddStoreHook(boil.AfterSelectHook, storeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	storeAfterSelectHooks = []StoreHook{}

	AddStoreHook(boil.BeforeUpdateHook, storeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	storeBeforeUpdateHooks = []StoreHook{}

	AddStoreHook(boil.AfterUpdateHook, storeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	storeAfterUpdateHooks = []StoreHook{}

	AddStoreHook(boil.BeforeDeleteHook, storeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	storeBeforeDeleteHooks = []StoreHook{}

	AddStoreHook(boil.AfterDeleteHook, storeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	storeAfterDeleteHooks = []StoreHook{}

	AddStoreHook(boil.BeforeUpsertHook, storeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	storeBeforeUpsertHooks = []StoreHook{}

	AddStoreHook(boil.AfterUpsertHook, storeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	storeAfterUpsertHooks = []StoreHook{}
}

func testStoresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStoresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(storePrimaryKeyColumns, storeColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStoreOneToOneStayableStoreInfoUsingStayableStoreInfo(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign StayableStoreInfo
	var local Store

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, stayableStoreInfoDBTypes, true, stayableStoreInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StayableStoreInfo struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.StoreID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StayableStoreInfo().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.StoreID != foreign.StoreID {
		t.Errorf("want: %v, got %v", foreign.StoreID, check.StoreID)
	}

	ranAfterSelectHook := false
	AddStayableStoreInfoHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *StayableStoreInfo) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StoreSlice{&local}
	if err = local.L.LoadStayableStoreInfo(ctx, tx, false, (*[]*Store)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StayableStoreInfo == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StayableStoreInfo = nil
	if err = local.L.LoadStayableStoreInfo(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StayableStoreInfo == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStoreOneToOneSetOpStayableStoreInfoUsingStayableStoreInfo(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c StayableStoreInfo

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stayableStoreInfoDBTypes, false, strmangle.SetComplement(stayableStoreInfoPrimaryKeyColumns, stayableStoreInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stayableStoreInfoDBTypes, false, strmangle.SetComplement(stayableStoreInfoPrimaryKeyColumns, stayableStoreInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StayableStoreInfo{&b, &c} {
		err = a.SetStayableStoreInfo(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StayableStoreInfo != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Store != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.StoreID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := StayableStoreInfoExists(ctx, tx, x.StoreID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.StoreID {
			t.Error("foreign key was wrong value", a.ID, x.StoreID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testStoreToManyBelongToAdmins(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c Admin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BelongTo = a.ID
	c.BelongTo = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BelongToAdmins().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BelongTo == b.BelongTo {
			bFound = true
		}
		if v.BelongTo == c.BelongTo {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StoreSlice{&a}
	if err = a.L.LoadBelongToAdmins(ctx, tx, false, (*[]*Store)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BelongToAdmins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BelongToAdmins = nil
	if err = a.L.LoadBelongToAdmins(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BelongToAdmins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStoreToManyBookPlans(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c BookPlan

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, bookPlanDBTypes, false, bookPlanColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookPlanDBTypes, false, bookPlanColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StoreID = a.ID
	c.StoreID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BookPlans().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.StoreID == b.StoreID {
			bFound = true
		}
		if v.StoreID == c.StoreID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StoreSlice{&a}
	if err = a.L.LoadBookPlans(ctx, tx, false, (*[]*Store)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BookPlans); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BookPlans = nil
	if err = a.L.LoadBookPlans(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BookPlans); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStoreToManyCheckins(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c Checkin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkinDBTypes, false, checkinColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.StoreID = a.ID
	c.StoreID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Checkins().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.StoreID == b.StoreID {
			bFound = true
		}
		if v.StoreID == c.StoreID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StoreSlice{&a}
	if err = a.L.LoadCheckins(ctx, tx, false, (*[]*Store)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Checkins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Checkins = nil
	if err = a.L.LoadCheckins(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Checkins); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStoreToManyCoupons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c Coupon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, couponDBTypes, false, couponColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, couponDBTypes, false, couponColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"coupon_stores\" (\"store_id\", \"coupon_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"coupon_stores\" (\"store_id\", \"coupon_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Coupons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StoreSlice{&a}
	if err = a.L.LoadCoupons(ctx, tx, false, (*[]*Store)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Coupons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Coupons = nil
	if err = a.L.LoadCoupons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Coupons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStoreToManyAddOpBelongToAdmins(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c, d, e Admin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Admin{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, adminDBTypes, false, strmangle.SetComplement(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Admin{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBelongToAdmins(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BelongTo {
			t.Error("foreign key was wrong value", a.ID, first.BelongTo)
		}
		if a.ID != second.BelongTo {
			t.Error("foreign key was wrong value", a.ID, second.BelongTo)
		}

		if first.R.BelongToStore != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BelongToStore != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BelongToAdmins[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BelongToAdmins[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BelongToAdmins().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStoreToManyAddOpBookPlans(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c, d, e BookPlan

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BookPlan{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, bookPlanDBTypes, false, strmangle.SetComplement(bookPlanPrimaryKeyColumns, bookPlanColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BookPlan{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBookPlans(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.StoreID {
			t.Error("foreign key was wrong value", a.ID, first.StoreID)
		}
		if a.ID != second.StoreID {
			t.Error("foreign key was wrong value", a.ID, second.StoreID)
		}

		if first.R.Store != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Store != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BookPlans[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BookPlans[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BookPlans().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStoreToManyAddOpCheckins(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c, d, e Checkin

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkin{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkinDBTypes, false, strmangle.SetComplement(checkinPrimaryKeyColumns, checkinColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Checkin{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckins(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.StoreID {
			t.Error("foreign key was wrong value", a.ID, first.StoreID)
		}
		if a.ID != second.StoreID {
			t.Error("foreign key was wrong value", a.ID, second.StoreID)
		}

		if first.R.Store != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Store != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Checkins[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Checkins[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Checkins().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStoreToManyAddOpCoupons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c, d, e Coupon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Coupon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, couponDBTypes, false, strmangle.SetComplement(couponPrimaryKeyColumns, couponColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Coupon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCoupons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Stores[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Stores[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Coupons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Coupons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Coupons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStoreToManySetOpCoupons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c, d, e Coupon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Coupon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, couponDBTypes, false, strmangle.SetComplement(couponPrimaryKeyColumns, couponColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCoupons(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Coupons().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCoupons(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Coupons().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Stores) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Stores) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Stores[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Stores[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Coupons[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Coupons[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testStoreToManyRemoveOpCoupons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Store
	var b, c, d, e Coupon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Coupon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, couponDBTypes, false, strmangle.SetComplement(couponPrimaryKeyColumns, couponColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCoupons(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Coupons().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCoupons(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Coupons().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Stores) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Stores) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Stores[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Stores[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Coupons) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Coupons[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Coupons[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testStoresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStoresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StoreSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStoresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Stores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	storeDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `BranchName`: `character varying`, `ZipCode`: `character varying`, `Address`: `character varying`, `Tel`: `character varying`, `SiteURL`: `character varying`, `StampImageURL`: `character varying`, `Stayable`: `boolean`, `IsActive`: `boolean`, `QRCode`: `uuid`, `UnLimitedQRCode`: `uuid`, `CreateAt`: `timestamp with time zone`, `UpdateAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testStoresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(storePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(storeAllColumns) == len(storePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, storeDBTypes, true, storePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStoresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(storeAllColumns) == len(storePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Store{}
	if err = randomize.Struct(seed, o, storeDBTypes, true, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, storeDBTypes, true, storePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(storeAllColumns, storePrimaryKeyColumns) {
		fields = storeAllColumns
	} else {
		fields = strmangle.SetComplement(
			storeAllColumns,
			storePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StoreSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStoresUpsert(t *testing.T) {
	t.Parallel()

	if len(storeAllColumns) == len(storePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Store{}
	if err = randomize.Struct(seed, &o, storeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Store: %s", err)
	}

	count, err := Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, storeDBTypes, false, storePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Store: %s", err)
	}

	count, err = Stores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
