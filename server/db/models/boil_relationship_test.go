// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AdminToUserManagerUsingAdmin", testAdminToOneUserManagerUsingAdmin)
	t.Run("AdminToStoreUsingBelongToStore", testAdminToOneStoreUsingBelongToStore)
	t.Run("BookPlanToStoreUsingStore", testBookPlanToOneStoreUsingStore)
	t.Run("BookPlanStayDateInfoToBookPlanUsingPlan", testBookPlanStayDateInfoToOneBookPlanUsingPlan)
	t.Run("CheckinToStoreUsingStore", testCheckinToOneStoreUsingStore)
	t.Run("CheckinToUserDatumUsingUser", testCheckinToOneUserDatumUsingUser)
	t.Run("CouponAttachedUserToCouponUsingCoupon", testCouponAttachedUserToOneCouponUsingCoupon)
	t.Run("CouponAttachedUserToUserDatumUsingUser", testCouponAttachedUserToOneUserDatumUsingUser)
	t.Run("MailMagazineToAdminUsingAuthor", testMailMagazineToOneAdminUsingAuthor)
	t.Run("MailMagazineLogToMailMagazineUsingMailMagazine", testMailMagazineLogToOneMailMagazineUsingMailMagazine)
	t.Run("MailMagazineLogToUserDatumUsingUser", testMailMagazineLogToOneUserDatumUsingUser)
	t.Run("MessageToAdminUsingAuthor", testMessageToOneAdminUsingAuthor)
	t.Run("StayableStoreInfoToStoreUsingStore", testStayableStoreInfoToOneStoreUsingStore)
	t.Run("UserBookToBookPlanUsingBookPlan", testUserBookToOneBookPlanUsingBookPlan)
	t.Run("UserBookToUserDatumUsingBookUser", testUserBookToOneUserDatumUsingBookUser)
	t.Run("UserBookToBookGuestDatumUsingGuestDatum", testUserBookToOneBookGuestDatumUsingGuestDatum)
	t.Run("UserDatumToUserManagerUsingUser", testUserDatumToOneUserManagerUsingUser)
	t.Run("UserLoginLogToUserManagerUsingUser", testUserLoginLogToOneUserManagerUsingUser)
	t.Run("UserOptionToUserDatumUsingUser", testUserOptionToOneUserDatumUsingUser)
	t.Run("UserReportToUserDatumUsingUser", testUserReportToOneUserDatumUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("StoreToStayableStoreInfoUsingStayableStoreInfo", testStoreOneToOneStayableStoreInfoUsingStayableStoreInfo)
	t.Run("UserDatumToUserOptionUsingUserUserOption", testUserDatumOneToOneUserOptionUsingUserUserOption)
	t.Run("UserManagerToAdminUsingAdminAdmin", testUserManagerOneToOneAdminUsingAdminAdmin)
	t.Run("UserManagerToUserDatumUsingUserUserDatum", testUserManagerOneToOneUserDatumUsingUserUserDatum)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AdminToAuthorMailMagazines", testAdminToManyAuthorMailMagazines)
	t.Run("AdminToAuthorMessages", testAdminToManyAuthorMessages)
	t.Run("BookGuestDatumToGuestDatumUserBooks", testBookGuestDatumToManyGuestDatumUserBooks)
	t.Run("BookPlanToPlanBookPlanStayDateInfos", testBookPlanToManyPlanBookPlanStayDateInfos)
	t.Run("BookPlanToUserBooks", testBookPlanToManyUserBooks)
	t.Run("CouponToCouponAttachedUsers", testCouponToManyCouponAttachedUsers)
	t.Run("CouponToStores", testCouponToManyStores)
	t.Run("MailMagazineToMailMagazineLogs", testMailMagazineToManyMailMagazineLogs)
	t.Run("StoreToBelongToAdmins", testStoreToManyBelongToAdmins)
	t.Run("StoreToBookPlans", testStoreToManyBookPlans)
	t.Run("StoreToCheckins", testStoreToManyCheckins)
	t.Run("StoreToCoupons", testStoreToManyCoupons)
	t.Run("UserDatumToUserCheckins", testUserDatumToManyUserCheckins)
	t.Run("UserDatumToUserCouponAttachedUsers", testUserDatumToManyUserCouponAttachedUsers)
	t.Run("UserDatumToUserMailMagazineLogs", testUserDatumToManyUserMailMagazineLogs)
	t.Run("UserDatumToBookUserUserBooks", testUserDatumToManyBookUserUserBooks)
	t.Run("UserDatumToUserUserReports", testUserDatumToManyUserUserReports)
	t.Run("UserManagerToUserUserLoginLogs", testUserManagerToManyUserUserLoginLogs)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AdminToUserManagerUsingAdminAdmin", testAdminToOneSetOpUserManagerUsingAdmin)
	t.Run("AdminToStoreUsingBelongToAdmins", testAdminToOneSetOpStoreUsingBelongToStore)
	t.Run("BookPlanToStoreUsingBookPlans", testBookPlanToOneSetOpStoreUsingStore)
	t.Run("BookPlanStayDateInfoToBookPlanUsingPlanBookPlanStayDateInfos", testBookPlanStayDateInfoToOneSetOpBookPlanUsingPlan)
	t.Run("CheckinToStoreUsingCheckins", testCheckinToOneSetOpStoreUsingStore)
	t.Run("CheckinToUserDatumUsingUserCheckins", testCheckinToOneSetOpUserDatumUsingUser)
	t.Run("CouponAttachedUserToCouponUsingCouponAttachedUsers", testCouponAttachedUserToOneSetOpCouponUsingCoupon)
	t.Run("CouponAttachedUserToUserDatumUsingUserCouponAttachedUsers", testCouponAttachedUserToOneSetOpUserDatumUsingUser)
	t.Run("MailMagazineToAdminUsingAuthorMailMagazines", testMailMagazineToOneSetOpAdminUsingAuthor)
	t.Run("MailMagazineLogToMailMagazineUsingMailMagazineLogs", testMailMagazineLogToOneSetOpMailMagazineUsingMailMagazine)
	t.Run("MailMagazineLogToUserDatumUsingUserMailMagazineLogs", testMailMagazineLogToOneSetOpUserDatumUsingUser)
	t.Run("MessageToAdminUsingAuthorMessages", testMessageToOneSetOpAdminUsingAuthor)
	t.Run("StayableStoreInfoToStoreUsingStayableStoreInfo", testStayableStoreInfoToOneSetOpStoreUsingStore)
	t.Run("UserBookToBookPlanUsingUserBooks", testUserBookToOneSetOpBookPlanUsingBookPlan)
	t.Run("UserBookToUserDatumUsingBookUserUserBooks", testUserBookToOneSetOpUserDatumUsingBookUser)
	t.Run("UserBookToBookGuestDatumUsingGuestDatumUserBooks", testUserBookToOneSetOpBookGuestDatumUsingGuestDatum)
	t.Run("UserDatumToUserManagerUsingUserUserDatum", testUserDatumToOneSetOpUserManagerUsingUser)
	t.Run("UserLoginLogToUserManagerUsingUserUserLoginLogs", testUserLoginLogToOneSetOpUserManagerUsingUser)
	t.Run("UserOptionToUserDatumUsingUserUserOption", testUserOptionToOneSetOpUserDatumUsingUser)
	t.Run("UserReportToUserDatumUsingUserUserReports", testUserReportToOneSetOpUserDatumUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("StoreToStayableStoreInfoUsingStayableStoreInfo", testStoreOneToOneSetOpStayableStoreInfoUsingStayableStoreInfo)
	t.Run("UserDatumToUserOptionUsingUserUserOption", testUserDatumOneToOneSetOpUserOptionUsingUserUserOption)
	t.Run("UserManagerToAdminUsingAdminAdmin", testUserManagerOneToOneSetOpAdminUsingAdminAdmin)
	t.Run("UserManagerToUserDatumUsingUserUserDatum", testUserManagerOneToOneSetOpUserDatumUsingUserUserDatum)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AdminToAuthorMailMagazines", testAdminToManyAddOpAuthorMailMagazines)
	t.Run("AdminToAuthorMessages", testAdminToManyAddOpAuthorMessages)
	t.Run("BookGuestDatumToGuestDatumUserBooks", testBookGuestDatumToManyAddOpGuestDatumUserBooks)
	t.Run("BookPlanToPlanBookPlanStayDateInfos", testBookPlanToManyAddOpPlanBookPlanStayDateInfos)
	t.Run("BookPlanToUserBooks", testBookPlanToManyAddOpUserBooks)
	t.Run("CouponToCouponAttachedUsers", testCouponToManyAddOpCouponAttachedUsers)
	t.Run("CouponToStores", testCouponToManyAddOpStores)
	t.Run("MailMagazineToMailMagazineLogs", testMailMagazineToManyAddOpMailMagazineLogs)
	t.Run("StoreToBelongToAdmins", testStoreToManyAddOpBelongToAdmins)
	t.Run("StoreToBookPlans", testStoreToManyAddOpBookPlans)
	t.Run("StoreToCheckins", testStoreToManyAddOpCheckins)
	t.Run("StoreToCoupons", testStoreToManyAddOpCoupons)
	t.Run("UserDatumToUserCheckins", testUserDatumToManyAddOpUserCheckins)
	t.Run("UserDatumToUserCouponAttachedUsers", testUserDatumToManyAddOpUserCouponAttachedUsers)
	t.Run("UserDatumToUserMailMagazineLogs", testUserDatumToManyAddOpUserMailMagazineLogs)
	t.Run("UserDatumToBookUserUserBooks", testUserDatumToManyAddOpBookUserUserBooks)
	t.Run("UserDatumToUserUserReports", testUserDatumToManyAddOpUserUserReports)
	t.Run("UserManagerToUserUserLoginLogs", testUserManagerToManyAddOpUserUserLoginLogs)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CouponToStores", testCouponToManySetOpStores)
	t.Run("StoreToCoupons", testStoreToManySetOpCoupons)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CouponToStores", testCouponToManyRemoveOpStores)
	t.Run("StoreToCoupons", testStoreToManyRemoveOpCoupons)
}
