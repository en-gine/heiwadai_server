// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserReports(t *testing.T) {
	t.Parallel()

	query := UserReports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserReportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserReportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserReports().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserReportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserReportSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserReportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserReportExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserReport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserReportExists to return true, but got false.")
	}
}

func testUserReportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userReportFound, err := FindUserReport(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userReportFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserReportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserReports().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserReportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserReports().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserReportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userReportOne := &UserReport{}
	userReportTwo := &UserReport{}
	if err = randomize.Struct(seed, userReportOne, userReportDBTypes, false, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}
	if err = randomize.Struct(seed, userReportTwo, userReportDBTypes, false, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserReportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userReportOne := &UserReport{}
	userReportTwo := &UserReport{}
	if err = randomize.Struct(seed, userReportOne, userReportDBTypes, false, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}
	if err = randomize.Struct(seed, userReportTwo, userReportDBTypes, false, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userReportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userReportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userReportBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func userReportAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func userReportAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func userReportBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func userReportAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func userReportBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func userReportAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func userReportBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func userReportAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserReport) error {
	*o = UserReport{}
	return nil
}

func testUserReportsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserReport{}
	o := &UserReport{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userReportDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserReport object: %s", err)
	}

	AddUserReportHook(boil.BeforeInsertHook, userReportBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userReportBeforeInsertHooks = []UserReportHook{}

	AddUserReportHook(boil.AfterInsertHook, userReportAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userReportAfterInsertHooks = []UserReportHook{}

	AddUserReportHook(boil.AfterSelectHook, userReportAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userReportAfterSelectHooks = []UserReportHook{}

	AddUserReportHook(boil.BeforeUpdateHook, userReportBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userReportBeforeUpdateHooks = []UserReportHook{}

	AddUserReportHook(boil.AfterUpdateHook, userReportAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userReportAfterUpdateHooks = []UserReportHook{}

	AddUserReportHook(boil.BeforeDeleteHook, userReportBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userReportBeforeDeleteHooks = []UserReportHook{}

	AddUserReportHook(boil.AfterDeleteHook, userReportAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userReportAfterDeleteHooks = []UserReportHook{}

	AddUserReportHook(boil.BeforeUpsertHook, userReportBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userReportBeforeUpsertHooks = []UserReportHook{}

	AddUserReportHook(boil.AfterUpsertHook, userReportAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userReportAfterUpsertHooks = []UserReportHook{}
}

func testUserReportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserReportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(userReportPrimaryKeyColumns, userReportColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserReportToOneUserDatumUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserReport
	var foreign UserDatum

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userReportDBTypes, false, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDatumDBTypes, false, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserDatumHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserReportSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserReport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserReportToOneSetOpUserDatumUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserReport
	var b, c UserDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userReportDBTypes, false, strmangle.SetComplement(userReportPrimaryKeyColumns, userReportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserDatum{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserUserReports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID, x.UserID)
		}
	}
}

func testUserReportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserReportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserReportSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserReportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserReports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userReportDBTypes = map[string]string{`ID`: `uuid`, `Title`: `character varying`, `Content`: `character varying`, `UserID`: `uuid`, `UserName`: `character varying`, `CreateAt`: `timestamp with time zone`, `UpdateAt`: `timestamp with time zone`}
	_                 = bytes.MinRead
)

func testUserReportsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userReportPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userReportAllColumns) == len(userReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserReportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userReportAllColumns) == len(userReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserReport{}
	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userReportDBTypes, true, userReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userReportAllColumns, userReportPrimaryKeyColumns) {
		fields = userReportAllColumns
	} else {
		fields = strmangle.SetComplement(
			userReportAllColumns,
			userReportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserReportSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserReportsUpsert(t *testing.T) {
	t.Parallel()

	if len(userReportAllColumns) == len(userReportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserReport{}
	if err = randomize.Struct(seed, &o, userReportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserReport: %s", err)
	}

	count, err := UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userReportDBTypes, false, userReportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserReport struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserReport: %s", err)
	}

	count, err = UserReports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
