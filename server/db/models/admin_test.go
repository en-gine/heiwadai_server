// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAdmins(t *testing.T) {
	t.Parallel()

	query := Admins()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAdminsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Admins().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdminSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdminsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AdminExists(ctx, tx, o.AdminID)
	if err != nil {
		t.Errorf("Unable to check if Admin exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AdminExists to return true, but got false.")
	}
}

func testAdminsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	adminFound, err := FindAdmin(ctx, tx, o.AdminID)
	if err != nil {
		t.Error(err)
	}

	if adminFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAdminsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Admins().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAdminsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Admins().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAdminsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	adminOne := &Admin{}
	adminTwo := &Admin{}
	if err = randomize.Struct(seed, adminOne, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}
	if err = randomize.Struct(seed, adminTwo, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = adminOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = adminTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Admins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAdminsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	adminOne := &Admin{}
	adminTwo := &Admin{}
	if err = randomize.Struct(seed, adminOne, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}
	if err = randomize.Struct(seed, adminTwo, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = adminOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = adminTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func adminBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func adminAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Admin) error {
	*o = Admin{}
	return nil
}

func testAdminsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Admin{}
	o := &Admin{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, adminDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Admin object: %s", err)
	}

	AddAdminHook(boil.BeforeInsertHook, adminBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	adminBeforeInsertHooks = []AdminHook{}

	AddAdminHook(boil.AfterInsertHook, adminAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	adminAfterInsertHooks = []AdminHook{}

	AddAdminHook(boil.AfterSelectHook, adminAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	adminAfterSelectHooks = []AdminHook{}

	AddAdminHook(boil.BeforeUpdateHook, adminBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	adminBeforeUpdateHooks = []AdminHook{}

	AddAdminHook(boil.AfterUpdateHook, adminAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	adminAfterUpdateHooks = []AdminHook{}

	AddAdminHook(boil.BeforeDeleteHook, adminBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	adminBeforeDeleteHooks = []AdminHook{}

	AddAdminHook(boil.AfterDeleteHook, adminAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	adminAfterDeleteHooks = []AdminHook{}

	AddAdminHook(boil.BeforeUpsertHook, adminBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	adminBeforeUpsertHooks = []AdminHook{}

	AddAdminHook(boil.AfterUpsertHook, adminAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	adminAfterUpsertHooks = []AdminHook{}
}

func testAdminsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdminToManyAuthorMailMagazines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Admin
	var b, c MailMagazine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, mailMagazineDBTypes, false, mailMagazineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mailMagazineDBTypes, false, mailMagazineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AuthorID = a.AdminID
	c.AuthorID = a.AdminID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AuthorMailMagazines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AuthorID == b.AuthorID {
			bFound = true
		}
		if v.AuthorID == c.AuthorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AdminSlice{&a}
	if err = a.L.LoadAuthorMailMagazines(ctx, tx, false, (*[]*Admin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorMailMagazines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AuthorMailMagazines = nil
	if err = a.L.LoadAuthorMailMagazines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorMailMagazines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAdminToManyAuthorMessages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Admin
	var b, c Message

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, messageDBTypes, false, messageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, messageDBTypes, false, messageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AuthorID = a.AdminID
	c.AuthorID = a.AdminID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AuthorMessages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AuthorID == b.AuthorID {
			bFound = true
		}
		if v.AuthorID == c.AuthorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AdminSlice{&a}
	if err = a.L.LoadAuthorMessages(ctx, tx, false, (*[]*Admin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorMessages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AuthorMessages = nil
	if err = a.L.LoadAuthorMessages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AuthorMessages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAdminToManyAddOpAuthorMailMagazines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Admin
	var b, c, d, e MailMagazine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, adminDBTypes, false, strmangle.SetComplement(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MailMagazine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, mailMagazineDBTypes, false, strmangle.SetComplement(mailMagazinePrimaryKeyColumns, mailMagazineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MailMagazine{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAuthorMailMagazines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.AdminID != first.AuthorID {
			t.Error("foreign key was wrong value", a.AdminID, first.AuthorID)
		}
		if a.AdminID != second.AuthorID {
			t.Error("foreign key was wrong value", a.AdminID, second.AuthorID)
		}

		if first.R.Author != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Author != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AuthorMailMagazines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AuthorMailMagazines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AuthorMailMagazines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAdminToManyAddOpAuthorMessages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Admin
	var b, c, d, e Message

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, adminDBTypes, false, strmangle.SetComplement(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Message{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, messageDBTypes, false, strmangle.SetComplement(messagePrimaryKeyColumns, messageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Message{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAuthorMessages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.AdminID != first.AuthorID {
			t.Error("foreign key was wrong value", a.AdminID, first.AuthorID)
		}
		if a.AdminID != second.AuthorID {
			t.Error("foreign key was wrong value", a.AdminID, second.AuthorID)
		}

		if first.R.Author != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Author != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AuthorMessages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AuthorMessages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AuthorMessages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAdminToOneUserManagerUsingAdmin(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Admin
	var foreign UserManager

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userManagerDBTypes, false, userManagerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserManager struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AdminID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Admin().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserManagerHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserManager) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AdminSlice{&local}
	if err = local.L.LoadAdmin(ctx, tx, false, (*[]*Admin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Admin == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Admin = nil
	if err = local.L.LoadAdmin(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Admin == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAdminToOneStoreUsingBelongToStore(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Admin
	var foreign Store

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, adminDBTypes, false, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BelongTo = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BelongToStore().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStoreHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Store) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AdminSlice{&local}
	if err = local.L.LoadBelongToStore(ctx, tx, false, (*[]*Admin)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BelongToStore == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BelongToStore = nil
	if err = local.L.LoadBelongToStore(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BelongToStore == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAdminToOneSetOpUserManagerUsingAdmin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Admin
	var b, c UserManager

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, adminDBTypes, false, strmangle.SetComplement(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userManagerDBTypes, false, strmangle.SetComplement(userManagerPrimaryKeyColumns, userManagerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userManagerDBTypes, false, strmangle.SetComplement(userManagerPrimaryKeyColumns, userManagerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserManager{&b, &c} {
		err = a.SetAdmin(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Admin != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AdminAdmin != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AdminID != x.ID {
			t.Error("foreign key was wrong value", a.AdminID)
		}

		if exists, err := AdminExists(ctx, tx, a.AdminID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testAdminToOneSetOpStoreUsingBelongToStore(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Admin
	var b, c Store

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, adminDBTypes, false, strmangle.SetComplement(adminPrimaryKeyColumns, adminColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Store{&b, &c} {
		err = a.SetBelongToStore(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BelongToStore != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BelongToAdmins[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BelongTo != x.ID {
			t.Error("foreign key was wrong value", a.BelongTo)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BelongTo))
		reflect.Indirect(reflect.ValueOf(&a.BelongTo)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BelongTo != x.ID {
			t.Error("foreign key was wrong value", a.BelongTo, x.ID)
		}
	}
}

func testAdminsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdminsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdminSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdminsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Admins().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	adminDBTypes = map[string]string{`AdminID`: `uuid`, `Name`: `character varying`, `BelongTo`: `uuid`, `IsActive`: `boolean`, `CreateAt`: `timestamp with time zone`, `UpdateAt`: `timestamp with time zone`}
	_            = bytes.MinRead
)

func testAdminsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(adminPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(adminAllColumns) == len(adminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, adminDBTypes, true, adminPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAdminsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(adminAllColumns) == len(adminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Admin{}
	if err = randomize.Struct(seed, o, adminDBTypes, true, adminColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, adminDBTypes, true, adminPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(adminAllColumns, adminPrimaryKeyColumns) {
		fields = adminAllColumns
	} else {
		fields = strmangle.SetComplement(
			adminAllColumns,
			adminPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AdminSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAdminsUpsert(t *testing.T) {
	t.Parallel()

	if len(adminAllColumns) == len(adminPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Admin{}
	if err = randomize.Struct(seed, &o, adminDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Admin: %s", err)
	}

	count, err := Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, adminDBTypes, false, adminPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Admin struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Admin: %s", err)
	}

	count, err = Admins().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
