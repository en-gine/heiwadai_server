// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookPlanStayDateInfos(t *testing.T) {
	t.Parallel()

	query := BookPlanStayDateInfos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookPlanStayDateInfosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookPlanStayDateInfosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookPlanStayDateInfos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookPlanStayDateInfosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookPlanStayDateInfoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookPlanStayDateInfosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookPlanStayDateInfoExists(ctx, tx, o.PlanID, o.StayDate)
	if err != nil {
		t.Errorf("Unable to check if BookPlanStayDateInfo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookPlanStayDateInfoExists to return true, but got false.")
	}
}

func testBookPlanStayDateInfosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookPlanStayDateInfoFound, err := FindBookPlanStayDateInfo(ctx, tx, o.PlanID, o.StayDate)
	if err != nil {
		t.Error(err)
	}

	if bookPlanStayDateInfoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookPlanStayDateInfosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookPlanStayDateInfos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookPlanStayDateInfosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookPlanStayDateInfos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookPlanStayDateInfosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookPlanStayDateInfoOne := &BookPlanStayDateInfo{}
	bookPlanStayDateInfoTwo := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, bookPlanStayDateInfoOne, bookPlanStayDateInfoDBTypes, false, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, bookPlanStayDateInfoTwo, bookPlanStayDateInfoDBTypes, false, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookPlanStayDateInfoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookPlanStayDateInfoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookPlanStayDateInfos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookPlanStayDateInfosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookPlanStayDateInfoOne := &BookPlanStayDateInfo{}
	bookPlanStayDateInfoTwo := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, bookPlanStayDateInfoOne, bookPlanStayDateInfoDBTypes, false, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, bookPlanStayDateInfoTwo, bookPlanStayDateInfoDBTypes, false, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookPlanStayDateInfoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookPlanStayDateInfoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookPlanStayDateInfoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func bookPlanStayDateInfoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func bookPlanStayDateInfoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func bookPlanStayDateInfoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func bookPlanStayDateInfoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func bookPlanStayDateInfoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func bookPlanStayDateInfoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func bookPlanStayDateInfoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func bookPlanStayDateInfoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookPlanStayDateInfo) error {
	*o = BookPlanStayDateInfo{}
	return nil
}

func testBookPlanStayDateInfosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookPlanStayDateInfo{}
	o := &BookPlanStayDateInfo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo object: %s", err)
	}

	AddBookPlanStayDateInfoHook(boil.BeforeInsertHook, bookPlanStayDateInfoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoBeforeInsertHooks = []BookPlanStayDateInfoHook{}

	AddBookPlanStayDateInfoHook(boil.AfterInsertHook, bookPlanStayDateInfoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoAfterInsertHooks = []BookPlanStayDateInfoHook{}

	AddBookPlanStayDateInfoHook(boil.AfterSelectHook, bookPlanStayDateInfoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoAfterSelectHooks = []BookPlanStayDateInfoHook{}

	AddBookPlanStayDateInfoHook(boil.BeforeUpdateHook, bookPlanStayDateInfoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoBeforeUpdateHooks = []BookPlanStayDateInfoHook{}

	AddBookPlanStayDateInfoHook(boil.AfterUpdateHook, bookPlanStayDateInfoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoAfterUpdateHooks = []BookPlanStayDateInfoHook{}

	AddBookPlanStayDateInfoHook(boil.BeforeDeleteHook, bookPlanStayDateInfoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoBeforeDeleteHooks = []BookPlanStayDateInfoHook{}

	AddBookPlanStayDateInfoHook(boil.AfterDeleteHook, bookPlanStayDateInfoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoAfterDeleteHooks = []BookPlanStayDateInfoHook{}

	AddBookPlanStayDateInfoHook(boil.BeforeUpsertHook, bookPlanStayDateInfoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoBeforeUpsertHooks = []BookPlanStayDateInfoHook{}

	AddBookPlanStayDateInfoHook(boil.AfterUpsertHook, bookPlanStayDateInfoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookPlanStayDateInfoAfterUpsertHooks = []BookPlanStayDateInfoHook{}
}

func testBookPlanStayDateInfosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookPlanStayDateInfosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(bookPlanStayDateInfoPrimaryKeyColumns, bookPlanStayDateInfoColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookPlanStayDateInfoToOneBookPlanUsingPlan(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookPlanStayDateInfo
	var foreign BookPlan

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookPlanStayDateInfoDBTypes, false, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bookPlanDBTypes, false, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlanID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Plan().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBookPlanHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BookPlanStayDateInfoSlice{&local}
	if err = local.L.LoadPlan(ctx, tx, false, (*[]*BookPlanStayDateInfo)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Plan == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Plan = nil
	if err = local.L.LoadPlan(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Plan == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBookPlanStayDateInfoToOneSetOpBookPlanUsingPlan(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookPlanStayDateInfo
	var b, c BookPlan

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookPlanStayDateInfoDBTypes, false, strmangle.SetComplement(bookPlanStayDateInfoPrimaryKeyColumns, bookPlanStayDateInfoColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bookPlanDBTypes, false, strmangle.SetComplement(bookPlanPrimaryKeyColumns, bookPlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bookPlanDBTypes, false, strmangle.SetComplement(bookPlanPrimaryKeyColumns, bookPlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BookPlan{&b, &c} {
		err = a.SetPlan(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Plan != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlanBookPlanStayDateInfos[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlanID != x.ID {
			t.Error("foreign key was wrong value", a.PlanID)
		}

		if exists, err := BookPlanStayDateInfoExists(ctx, tx, a.PlanID, a.StayDate); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testBookPlanStayDateInfosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookPlanStayDateInfosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookPlanStayDateInfoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookPlanStayDateInfosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookPlanStayDateInfos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookPlanStayDateInfoDBTypes = map[string]string{`PlanID`: `uuid`, `StayDate`: `timestamp with time zone`, `StayDateTotalPrice`: `integer`}
	_                           = bytes.MinRead
)

func testBookPlanStayDateInfosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookPlanStayDateInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookPlanStayDateInfoAllColumns) == len(bookPlanStayDateInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookPlanStayDateInfosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookPlanStayDateInfoAllColumns) == len(bookPlanStayDateInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookPlanStayDateInfoDBTypes, true, bookPlanStayDateInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookPlanStayDateInfoAllColumns, bookPlanStayDateInfoPrimaryKeyColumns) {
		fields = bookPlanStayDateInfoAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookPlanStayDateInfoAllColumns,
			bookPlanStayDateInfoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookPlanStayDateInfoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookPlanStayDateInfosUpsert(t *testing.T) {
	t.Parallel()

	if len(bookPlanStayDateInfoAllColumns) == len(bookPlanStayDateInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookPlanStayDateInfo{}
	if err = randomize.Struct(seed, &o, bookPlanStayDateInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookPlanStayDateInfo: %s", err)
	}

	count, err := BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookPlanStayDateInfoDBTypes, false, bookPlanStayDateInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookPlanStayDateInfo struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookPlanStayDateInfo: %s", err)
	}

	count, err = BookPlanStayDateInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
