// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UserOption is an object representing the database table.
type UserOption struct {
	UserID          string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	InnerNote       string    `boil:"inner_note" json:"inner_note" toml:"inner_note" yaml:"inner_note"`
	IsBlackCustomer bool      `boil:"is_black_customer" json:"is_black_customer" toml:"is_black_customer" yaml:"is_black_customer"`
	CreateAt        time.Time `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt        time.Time `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`

	R *userOptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userOptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserOptionColumns = struct {
	UserID          string
	InnerNote       string
	IsBlackCustomer string
	CreateAt        string
	UpdateAt        string
}{
	UserID:          "user_id",
	InnerNote:       "inner_note",
	IsBlackCustomer: "is_black_customer",
	CreateAt:        "create_at",
	UpdateAt:        "update_at",
}

var UserOptionTableColumns = struct {
	UserID          string
	InnerNote       string
	IsBlackCustomer string
	CreateAt        string
	UpdateAt        string
}{
	UserID:          "user_option.user_id",
	InnerNote:       "user_option.inner_note",
	IsBlackCustomer: "user_option.is_black_customer",
	CreateAt:        "user_option.create_at",
	UpdateAt:        "user_option.update_at",
}

// Generated where

var UserOptionWhere = struct {
	UserID          whereHelperstring
	InnerNote       whereHelperstring
	IsBlackCustomer whereHelperbool
	CreateAt        whereHelpertime_Time
	UpdateAt        whereHelpertime_Time
}{
	UserID:          whereHelperstring{field: "\"user_option\".\"user_id\""},
	InnerNote:       whereHelperstring{field: "\"user_option\".\"inner_note\""},
	IsBlackCustomer: whereHelperbool{field: "\"user_option\".\"is_black_customer\""},
	CreateAt:        whereHelpertime_Time{field: "\"user_option\".\"create_at\""},
	UpdateAt:        whereHelpertime_Time{field: "\"user_option\".\"update_at\""},
}

// UserOptionRels is where relationship names are stored.
var UserOptionRels = struct {
	User string
}{
	User: "User",
}

// userOptionR is where relationships are stored.
type userOptionR struct {
	User *UserDatum `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userOptionR) NewStruct() *userOptionR {
	return &userOptionR{}
}

func (o *UserOption) GetUser() *UserDatum {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *userOptionR) GetUser() *UserDatum {
	if r == nil {
		return nil
	}

	return r.User
}

// userOptionL is where Load methods for each relationship are stored.
type userOptionL struct{}

var (
	userOptionAllColumns            = []string{"user_id", "inner_note", "is_black_customer", "create_at", "update_at"}
	userOptionColumnsWithoutDefault = []string{"user_id", "inner_note", "is_black_customer"}
	userOptionColumnsWithDefault    = []string{"create_at", "update_at"}
	userOptionPrimaryKeyColumns     = []string{"user_id"}
	userOptionGeneratedColumns      = []string{}
)

type (
	// UserOptionSlice is an alias for a slice of pointers to UserOption.
	// This should almost always be used instead of []UserOption.
	UserOptionSlice []*UserOption
	// UserOptionHook is the signature for custom UserOption hook methods
	UserOptionHook func(context.Context, boil.ContextExecutor, *UserOption) error

	userOptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userOptionType                 = reflect.TypeOf(&UserOption{})
	userOptionMapping              = queries.MakeStructMapping(userOptionType)
	userOptionPrimaryKeyMapping, _ = queries.BindMapping(userOptionType, userOptionMapping, userOptionPrimaryKeyColumns)
	userOptionInsertCacheMut       sync.RWMutex
	userOptionInsertCache          = make(map[string]insertCache)
	userOptionUpdateCacheMut       sync.RWMutex
	userOptionUpdateCache          = make(map[string]updateCache)
	userOptionUpsertCacheMut       sync.RWMutex
	userOptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userOptionAfterSelectMu sync.Mutex
var userOptionAfterSelectHooks []UserOptionHook

var userOptionBeforeInsertMu sync.Mutex
var userOptionBeforeInsertHooks []UserOptionHook
var userOptionAfterInsertMu sync.Mutex
var userOptionAfterInsertHooks []UserOptionHook

var userOptionBeforeUpdateMu sync.Mutex
var userOptionBeforeUpdateHooks []UserOptionHook
var userOptionAfterUpdateMu sync.Mutex
var userOptionAfterUpdateHooks []UserOptionHook

var userOptionBeforeDeleteMu sync.Mutex
var userOptionBeforeDeleteHooks []UserOptionHook
var userOptionAfterDeleteMu sync.Mutex
var userOptionAfterDeleteHooks []UserOptionHook

var userOptionBeforeUpsertMu sync.Mutex
var userOptionBeforeUpsertHooks []UserOptionHook
var userOptionAfterUpsertMu sync.Mutex
var userOptionAfterUpsertHooks []UserOptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserOption) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserOption) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserOption) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserOption) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserOption) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserOption) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserOption) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserOption) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserOption) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserOptionHook registers your hook function for all future operations.
func AddUserOptionHook(hookPoint boil.HookPoint, userOptionHook UserOptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userOptionAfterSelectMu.Lock()
		userOptionAfterSelectHooks = append(userOptionAfterSelectHooks, userOptionHook)
		userOptionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userOptionBeforeInsertMu.Lock()
		userOptionBeforeInsertHooks = append(userOptionBeforeInsertHooks, userOptionHook)
		userOptionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userOptionAfterInsertMu.Lock()
		userOptionAfterInsertHooks = append(userOptionAfterInsertHooks, userOptionHook)
		userOptionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userOptionBeforeUpdateMu.Lock()
		userOptionBeforeUpdateHooks = append(userOptionBeforeUpdateHooks, userOptionHook)
		userOptionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userOptionAfterUpdateMu.Lock()
		userOptionAfterUpdateHooks = append(userOptionAfterUpdateHooks, userOptionHook)
		userOptionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userOptionBeforeDeleteMu.Lock()
		userOptionBeforeDeleteHooks = append(userOptionBeforeDeleteHooks, userOptionHook)
		userOptionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userOptionAfterDeleteMu.Lock()
		userOptionAfterDeleteHooks = append(userOptionAfterDeleteHooks, userOptionHook)
		userOptionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userOptionBeforeUpsertMu.Lock()
		userOptionBeforeUpsertHooks = append(userOptionBeforeUpsertHooks, userOptionHook)
		userOptionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userOptionAfterUpsertMu.Lock()
		userOptionAfterUpsertHooks = append(userOptionAfterUpsertHooks, userOptionHook)
		userOptionAfterUpsertMu.Unlock()
	}
}

// One returns a single userOption record from the query.
func (q userOptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserOption, error) {
	o := &UserOption{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_option")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserOption records from the query.
func (q userOptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserOptionSlice, error) {
	var o []*UserOption

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserOption slice")
	}

	if len(userOptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserOption records in the query.
func (q userOptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_option rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userOptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_option exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserOption) User(mods ...qm.QueryMod) userDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return UserData(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOptionL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserOption interface{}, mods queries.Applicator) error {
	var slice []*UserOption
	var object *UserOption

	if singular {
		var ok bool
		object, ok = maybeUserOption.(*UserOption)
		if !ok {
			object = new(UserOption)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserOption))
			}
		}
	} else {
		s, ok := maybeUserOption.(*[]*UserOption)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserOption)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserOption))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userOptionR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOptionR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_data`),
		qm.WhereIn(`user_data.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDatum")
	}

	var resultSlice []*UserDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_data")
	}

	if len(userDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userDatumR{}
		}
		foreign.R.UserUserOption = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userDatumR{}
				}
				foreign.R.UserUserOption = local
				break
			}
		}
	}

	return nil
}

// SetUser of the userOption to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOption.
func (o *UserOption) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_option\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOptionPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &userOptionR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userDatumR{
			UserUserOption: o,
		}
	} else {
		related.R.UserUserOption = o
	}

	return nil
}

// UserOptions retrieves all the records using an executor.
func UserOptions(mods ...qm.QueryMod) userOptionQuery {
	mods = append(mods, qm.From("\"user_option\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_option\".*"})
	}

	return userOptionQuery{q}
}

// FindUserOption retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserOption(ctx context.Context, exec boil.ContextExecutor, userID string, selectCols ...string) (*UserOption, error) {
	userOptionObj := &UserOption{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_option\" where \"user_id\"=$1", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, userOptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_option")
	}

	if err = userOptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userOptionObj, err
	}

	return userOptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserOption) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_option provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userOptionInsertCacheMut.RLock()
	cache, cached := userOptionInsertCache[key]
	userOptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userOptionAllColumns,
			userOptionColumnsWithDefault,
			userOptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userOptionType, userOptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userOptionType, userOptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_option\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_option\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_option")
	}

	if !cached {
		userOptionInsertCacheMut.Lock()
		userOptionInsertCache[key] = cache
		userOptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserOption.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserOption) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userOptionUpdateCacheMut.RLock()
	cache, cached := userOptionUpdateCache[key]
	userOptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userOptionAllColumns,
			userOptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"create_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_option, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_option\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userOptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userOptionType, userOptionMapping, append(wl, userOptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_option row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_option")
	}

	if !cached {
		userOptionUpdateCacheMut.Lock()
		userOptionUpdateCache[key] = cache
		userOptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userOptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_option")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserOptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_option\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userOptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userOption")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserOption) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_option provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userOptionUpsertCacheMut.RLock()
	cache, cached := userOptionUpsertCache[key]
	userOptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userOptionAllColumns,
			userOptionColumnsWithDefault,
			userOptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userOptionAllColumns,
			userOptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_option, could not build update column list")
		}

		ret := strmangle.SetComplement(userOptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userOptionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_option, could not build conflict column list")
			}

			conflict = make([]string, len(userOptionPrimaryKeyColumns))
			copy(conflict, userOptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_option\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userOptionType, userOptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userOptionType, userOptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_option")
	}

	if !cached {
		userOptionUpsertCacheMut.Lock()
		userOptionUpsertCache[key] = cache
		userOptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserOption record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserOption) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserOption provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userOptionPrimaryKeyMapping)
	sql := "DELETE FROM \"user_option\" WHERE \"user_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_option")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userOptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userOptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_option")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_option")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserOptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userOptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_option\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userOption slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_option")
	}

	if len(userOptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserOption) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserOption(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserOptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_option\".* FROM \"user_option\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserOptionSlice")
	}

	*o = slice

	return nil
}

// UserOptionExists checks if the UserOption row exists.
func UserOptionExists(ctx context.Context, exec boil.ContextExecutor, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_option\" where \"user_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_option exists")
	}

	return exists, nil
}

// Exists checks if the UserOption row exists.
func (o *UserOption) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserOptionExists(ctx, exec, o.UserID)
}
