// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserOptions(t *testing.T) {
	t.Parallel()

	query := UserOptions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserOptionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserOptionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserOptions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserOptionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserOptionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserOptionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserOptionExists(ctx, tx, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if UserOption exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserOptionExists to return true, but got false.")
	}
}

func testUserOptionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userOptionFound, err := FindUserOption(ctx, tx, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if userOptionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserOptionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserOptions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserOptionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserOptions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserOptionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userOptionOne := &UserOption{}
	userOptionTwo := &UserOption{}
	if err = randomize.Struct(seed, userOptionOne, userOptionDBTypes, false, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}
	if err = randomize.Struct(seed, userOptionTwo, userOptionDBTypes, false, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserOptionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userOptionOne := &UserOption{}
	userOptionTwo := &UserOption{}
	if err = randomize.Struct(seed, userOptionOne, userOptionDBTypes, false, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}
	if err = randomize.Struct(seed, userOptionTwo, userOptionDBTypes, false, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userOptionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userOptionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userOptionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func userOptionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func userOptionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func userOptionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func userOptionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func userOptionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func userOptionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func userOptionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func userOptionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserOption) error {
	*o = UserOption{}
	return nil
}

func testUserOptionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserOption{}
	o := &UserOption{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userOptionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserOption object: %s", err)
	}

	AddUserOptionHook(boil.BeforeInsertHook, userOptionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userOptionBeforeInsertHooks = []UserOptionHook{}

	AddUserOptionHook(boil.AfterInsertHook, userOptionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userOptionAfterInsertHooks = []UserOptionHook{}

	AddUserOptionHook(boil.AfterSelectHook, userOptionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userOptionAfterSelectHooks = []UserOptionHook{}

	AddUserOptionHook(boil.BeforeUpdateHook, userOptionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userOptionBeforeUpdateHooks = []UserOptionHook{}

	AddUserOptionHook(boil.AfterUpdateHook, userOptionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userOptionAfterUpdateHooks = []UserOptionHook{}

	AddUserOptionHook(boil.BeforeDeleteHook, userOptionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userOptionBeforeDeleteHooks = []UserOptionHook{}

	AddUserOptionHook(boil.AfterDeleteHook, userOptionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userOptionAfterDeleteHooks = []UserOptionHook{}

	AddUserOptionHook(boil.BeforeUpsertHook, userOptionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userOptionBeforeUpsertHooks = []UserOptionHook{}

	AddUserOptionHook(boil.AfterUpsertHook, userOptionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userOptionAfterUpsertHooks = []UserOptionHook{}
}

func testUserOptionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserOptionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(userOptionPrimaryKeyColumns, userOptionColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserOptionToOneUserDatumUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserOption
	var foreign UserDatum

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userOptionDBTypes, false, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDatumDBTypes, false, userDatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserDatum struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserDatumHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserDatum) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserOptionSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserOption)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserOptionToOneSetOpUserDatumUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserOption
	var b, c UserDatum

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userOptionDBTypes, false, strmangle.SetComplement(userOptionPrimaryKeyColumns, userOptionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDatumDBTypes, false, strmangle.SetComplement(userDatumPrimaryKeyColumns, userDatumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserDatum{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserUserOption != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.UserID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserOptionExists(ctx, tx, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserOptionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserOptionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserOptionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserOptionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserOptions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userOptionDBTypes = map[string]string{`UserID`: `uuid`, `InnerNote`: `character varying`, `IsBlackCustomer`: `boolean`, `CreateAt`: `timestamp with time zone`, `UpdateAt`: `timestamp with time zone`}
	_                 = bytes.MinRead
)

func testUserOptionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userOptionAllColumns) == len(userOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserOptionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userOptionAllColumns) == len(userOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserOption{}
	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userOptionDBTypes, true, userOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userOptionAllColumns, userOptionPrimaryKeyColumns) {
		fields = userOptionAllColumns
	} else {
		fields = strmangle.SetComplement(
			userOptionAllColumns,
			userOptionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserOptionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserOptionsUpsert(t *testing.T) {
	t.Parallel()

	if len(userOptionAllColumns) == len(userOptionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserOption{}
	if err = randomize.Struct(seed, &o, userOptionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserOption: %s", err)
	}

	count, err := UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userOptionDBTypes, false, userOptionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserOption struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserOption: %s", err)
	}

	count, err = UserOptions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
