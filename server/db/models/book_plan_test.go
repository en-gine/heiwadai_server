// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookPlans(t *testing.T) {
	t.Parallel()

	query := BookPlans()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookPlansDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookPlansQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookPlans().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookPlansSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookPlanSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookPlansExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookPlanExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BookPlan exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookPlanExists to return true, but got false.")
	}
}

func testBookPlansFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookPlanFound, err := FindBookPlan(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bookPlanFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookPlansBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookPlans().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookPlansOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookPlans().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookPlansAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bookPlanOne := &BookPlan{}
	bookPlanTwo := &BookPlan{}
	if err = randomize.Struct(seed, bookPlanOne, bookPlanDBTypes, false, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}
	if err = randomize.Struct(seed, bookPlanTwo, bookPlanDBTypes, false, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookPlanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookPlanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookPlans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookPlansCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bookPlanOne := &BookPlan{}
	bookPlanTwo := &BookPlan{}
	if err = randomize.Struct(seed, bookPlanOne, bookPlanDBTypes, false, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}
	if err = randomize.Struct(seed, bookPlanTwo, bookPlanDBTypes, false, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookPlanOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookPlanTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookPlanBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func bookPlanAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func bookPlanAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func bookPlanBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func bookPlanAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func bookPlanBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func bookPlanAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func bookPlanBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func bookPlanAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookPlan) error {
	*o = BookPlan{}
	return nil
}

func testBookPlansHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BookPlan{}
	o := &BookPlan{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookPlanDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookPlan object: %s", err)
	}

	AddBookPlanHook(boil.BeforeInsertHook, bookPlanBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookPlanBeforeInsertHooks = []BookPlanHook{}

	AddBookPlanHook(boil.AfterInsertHook, bookPlanAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookPlanAfterInsertHooks = []BookPlanHook{}

	AddBookPlanHook(boil.AfterSelectHook, bookPlanAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookPlanAfterSelectHooks = []BookPlanHook{}

	AddBookPlanHook(boil.BeforeUpdateHook, bookPlanBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookPlanBeforeUpdateHooks = []BookPlanHook{}

	AddBookPlanHook(boil.AfterUpdateHook, bookPlanAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookPlanAfterUpdateHooks = []BookPlanHook{}

	AddBookPlanHook(boil.BeforeDeleteHook, bookPlanBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookPlanBeforeDeleteHooks = []BookPlanHook{}

	AddBookPlanHook(boil.AfterDeleteHook, bookPlanAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookPlanAfterDeleteHooks = []BookPlanHook{}

	AddBookPlanHook(boil.BeforeUpsertHook, bookPlanBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookPlanBeforeUpsertHooks = []BookPlanHook{}

	AddBookPlanHook(boil.AfterUpsertHook, bookPlanAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookPlanAfterUpsertHooks = []BookPlanHook{}
}

func testBookPlansInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookPlansInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookPlanColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookPlanToManyUserBooks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookPlan
	var b, c UserBook

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userBookDBTypes, false, userBookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userBookDBTypes, false, userBookColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BookPlanID = a.ID
	c.BookPlanID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserBooks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BookPlanID == b.BookPlanID {
			bFound = true
		}
		if v.BookPlanID == c.BookPlanID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BookPlanSlice{&a}
	if err = a.L.LoadUserBooks(ctx, tx, false, (*[]*BookPlan)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserBooks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserBooks = nil
	if err = a.L.LoadUserBooks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserBooks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBookPlanToManyAddOpUserBooks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookPlan
	var b, c, d, e UserBook

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookPlanDBTypes, false, strmangle.SetComplement(bookPlanPrimaryKeyColumns, bookPlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserBook{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userBookDBTypes, false, strmangle.SetComplement(userBookPrimaryKeyColumns, userBookColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserBook{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserBooks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BookPlanID {
			t.Error("foreign key was wrong value", a.ID, first.BookPlanID)
		}
		if a.ID != second.BookPlanID {
			t.Error("foreign key was wrong value", a.ID, second.BookPlanID)
		}

		if first.R.BookPlan != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BookPlan != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserBooks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserBooks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserBooks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testBookPlanToOneStoreUsingStore(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BookPlan
	var foreign Store

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bookPlanDBTypes, false, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, storeDBTypes, false, storeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Store struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.StoreID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Store().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStoreHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Store) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BookPlanSlice{&local}
	if err = local.L.LoadStore(ctx, tx, false, (*[]*BookPlan)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Store = nil
	if err = local.L.LoadStore(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Store == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBookPlanToOneSetOpStoreUsingStore(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BookPlan
	var b, c Store

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bookPlanDBTypes, false, strmangle.SetComplement(bookPlanPrimaryKeyColumns, bookPlanColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, storeDBTypes, false, strmangle.SetComplement(storePrimaryKeyColumns, storeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Store{&b, &c} {
		err = a.SetStore(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Store != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BookPlans[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.StoreID != x.ID {
			t.Error("foreign key was wrong value", a.StoreID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StoreID))
		reflect.Indirect(reflect.ValueOf(&a.StoreID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.StoreID != x.ID {
			t.Error("foreign key was wrong value", a.StoreID, x.ID)
		}
	}
}

func testBookPlansReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookPlansReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookPlanSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookPlansSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookPlans().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookPlanDBTypes = map[string]string{`ID`: `uuid`, `PlanID`: `character varying`, `Title`: `character varying`, `Price`: `integer`, `ImageURL`: `character varying`, `RoomType`: `integer`, `MealTypeMorning`: `boolean`, `MealTypeDinner`: `boolean`, `SmokeType`: `integer`, `Overview`: `text`, `StoreID`: `uuid`, `CreateAt`: `timestamp with time zone`, `UpdateAt`: `timestamp with time zone`, `TLBookdataRoomTypeCode`: `character varying`}
	_               = bytes.MinRead
)

func testBookPlansUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bookPlanPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookPlanAllColumns) == len(bookPlanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookPlansSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bookPlanAllColumns) == len(bookPlanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookPlan{}
	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookPlanDBTypes, true, bookPlanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookPlanAllColumns, bookPlanPrimaryKeyColumns) {
		fields = bookPlanAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookPlanAllColumns,
			bookPlanPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookPlanSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookPlansUpsert(t *testing.T) {
	t.Parallel()

	if len(bookPlanAllColumns) == len(bookPlanPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookPlan{}
	if err = randomize.Struct(seed, &o, bookPlanDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookPlan: %s", err)
	}

	count, err := BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookPlanDBTypes, false, bookPlanPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookPlan struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookPlan: %s", err)
	}

	count, err = BookPlans().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
