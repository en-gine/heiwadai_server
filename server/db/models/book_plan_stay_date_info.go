// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// BookPlanStayDateInfo is an object representing the database table.
type BookPlanStayDateInfo struct {
	PlanID             string    `boil:"plan_id" json:"plan_id" toml:"plan_id" yaml:"plan_id"`
	StayDate           time.Time `boil:"stay_date" json:"stay_date" toml:"stay_date" yaml:"stay_date"`
	StayDateTotalPrice int       `boil:"stay_date_total_price" json:"stay_date_total_price" toml:"stay_date_total_price" yaml:"stay_date_total_price"`

	R *bookPlanStayDateInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookPlanStayDateInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookPlanStayDateInfoColumns = struct {
	PlanID             string
	StayDate           string
	StayDateTotalPrice string
}{
	PlanID:             "plan_id",
	StayDate:           "stay_date",
	StayDateTotalPrice: "stay_date_total_price",
}

var BookPlanStayDateInfoTableColumns = struct {
	PlanID             string
	StayDate           string
	StayDateTotalPrice string
}{
	PlanID:             "book_plan_stay_date_info.plan_id",
	StayDate:           "book_plan_stay_date_info.stay_date",
	StayDateTotalPrice: "book_plan_stay_date_info.stay_date_total_price",
}

// Generated where

var BookPlanStayDateInfoWhere = struct {
	PlanID             whereHelperstring
	StayDate           whereHelpertime_Time
	StayDateTotalPrice whereHelperint
}{
	PlanID:             whereHelperstring{field: "\"book_plan_stay_date_info\".\"plan_id\""},
	StayDate:           whereHelpertime_Time{field: "\"book_plan_stay_date_info\".\"stay_date\""},
	StayDateTotalPrice: whereHelperint{field: "\"book_plan_stay_date_info\".\"stay_date_total_price\""},
}

// BookPlanStayDateInfoRels is where relationship names are stored.
var BookPlanStayDateInfoRels = struct {
	Plan string
}{
	Plan: "Plan",
}

// bookPlanStayDateInfoR is where relationships are stored.
type bookPlanStayDateInfoR struct {
	Plan *BookPlan `boil:"Plan" json:"Plan" toml:"Plan" yaml:"Plan"`
}

// NewStruct creates a new relationship struct
func (*bookPlanStayDateInfoR) NewStruct() *bookPlanStayDateInfoR {
	return &bookPlanStayDateInfoR{}
}

func (o *BookPlanStayDateInfo) GetPlan() *BookPlan {
	if o == nil {
		return nil
	}

	return o.R.GetPlan()
}

func (r *bookPlanStayDateInfoR) GetPlan() *BookPlan {
	if r == nil {
		return nil
	}

	return r.Plan
}

// bookPlanStayDateInfoL is where Load methods for each relationship are stored.
type bookPlanStayDateInfoL struct{}

var (
	bookPlanStayDateInfoAllColumns            = []string{"plan_id", "stay_date", "stay_date_total_price"}
	bookPlanStayDateInfoColumnsWithoutDefault = []string{"plan_id", "stay_date", "stay_date_total_price"}
	bookPlanStayDateInfoColumnsWithDefault    = []string{}
	bookPlanStayDateInfoPrimaryKeyColumns     = []string{"plan_id", "stay_date"}
	bookPlanStayDateInfoGeneratedColumns      = []string{}
)

type (
	// BookPlanStayDateInfoSlice is an alias for a slice of pointers to BookPlanStayDateInfo.
	// This should almost always be used instead of []BookPlanStayDateInfo.
	BookPlanStayDateInfoSlice []*BookPlanStayDateInfo
	// BookPlanStayDateInfoHook is the signature for custom BookPlanStayDateInfo hook methods
	BookPlanStayDateInfoHook func(context.Context, boil.ContextExecutor, *BookPlanStayDateInfo) error

	bookPlanStayDateInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookPlanStayDateInfoType                 = reflect.TypeOf(&BookPlanStayDateInfo{})
	bookPlanStayDateInfoMapping              = queries.MakeStructMapping(bookPlanStayDateInfoType)
	bookPlanStayDateInfoPrimaryKeyMapping, _ = queries.BindMapping(bookPlanStayDateInfoType, bookPlanStayDateInfoMapping, bookPlanStayDateInfoPrimaryKeyColumns)
	bookPlanStayDateInfoInsertCacheMut       sync.RWMutex
	bookPlanStayDateInfoInsertCache          = make(map[string]insertCache)
	bookPlanStayDateInfoUpdateCacheMut       sync.RWMutex
	bookPlanStayDateInfoUpdateCache          = make(map[string]updateCache)
	bookPlanStayDateInfoUpsertCacheMut       sync.RWMutex
	bookPlanStayDateInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookPlanStayDateInfoAfterSelectMu sync.Mutex
var bookPlanStayDateInfoAfterSelectHooks []BookPlanStayDateInfoHook

var bookPlanStayDateInfoBeforeInsertMu sync.Mutex
var bookPlanStayDateInfoBeforeInsertHooks []BookPlanStayDateInfoHook
var bookPlanStayDateInfoAfterInsertMu sync.Mutex
var bookPlanStayDateInfoAfterInsertHooks []BookPlanStayDateInfoHook

var bookPlanStayDateInfoBeforeUpdateMu sync.Mutex
var bookPlanStayDateInfoBeforeUpdateHooks []BookPlanStayDateInfoHook
var bookPlanStayDateInfoAfterUpdateMu sync.Mutex
var bookPlanStayDateInfoAfterUpdateHooks []BookPlanStayDateInfoHook

var bookPlanStayDateInfoBeforeDeleteMu sync.Mutex
var bookPlanStayDateInfoBeforeDeleteHooks []BookPlanStayDateInfoHook
var bookPlanStayDateInfoAfterDeleteMu sync.Mutex
var bookPlanStayDateInfoAfterDeleteHooks []BookPlanStayDateInfoHook

var bookPlanStayDateInfoBeforeUpsertMu sync.Mutex
var bookPlanStayDateInfoBeforeUpsertHooks []BookPlanStayDateInfoHook
var bookPlanStayDateInfoAfterUpsertMu sync.Mutex
var bookPlanStayDateInfoAfterUpsertHooks []BookPlanStayDateInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BookPlanStayDateInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BookPlanStayDateInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BookPlanStayDateInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BookPlanStayDateInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BookPlanStayDateInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BookPlanStayDateInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BookPlanStayDateInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BookPlanStayDateInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BookPlanStayDateInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookPlanStayDateInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookPlanStayDateInfoHook registers your hook function for all future operations.
func AddBookPlanStayDateInfoHook(hookPoint boil.HookPoint, bookPlanStayDateInfoHook BookPlanStayDateInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bookPlanStayDateInfoAfterSelectMu.Lock()
		bookPlanStayDateInfoAfterSelectHooks = append(bookPlanStayDateInfoAfterSelectHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bookPlanStayDateInfoBeforeInsertMu.Lock()
		bookPlanStayDateInfoBeforeInsertHooks = append(bookPlanStayDateInfoBeforeInsertHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bookPlanStayDateInfoAfterInsertMu.Lock()
		bookPlanStayDateInfoAfterInsertHooks = append(bookPlanStayDateInfoAfterInsertHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bookPlanStayDateInfoBeforeUpdateMu.Lock()
		bookPlanStayDateInfoBeforeUpdateHooks = append(bookPlanStayDateInfoBeforeUpdateHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bookPlanStayDateInfoAfterUpdateMu.Lock()
		bookPlanStayDateInfoAfterUpdateHooks = append(bookPlanStayDateInfoAfterUpdateHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bookPlanStayDateInfoBeforeDeleteMu.Lock()
		bookPlanStayDateInfoBeforeDeleteHooks = append(bookPlanStayDateInfoBeforeDeleteHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bookPlanStayDateInfoAfterDeleteMu.Lock()
		bookPlanStayDateInfoAfterDeleteHooks = append(bookPlanStayDateInfoAfterDeleteHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bookPlanStayDateInfoBeforeUpsertMu.Lock()
		bookPlanStayDateInfoBeforeUpsertHooks = append(bookPlanStayDateInfoBeforeUpsertHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bookPlanStayDateInfoAfterUpsertMu.Lock()
		bookPlanStayDateInfoAfterUpsertHooks = append(bookPlanStayDateInfoAfterUpsertHooks, bookPlanStayDateInfoHook)
		bookPlanStayDateInfoAfterUpsertMu.Unlock()
	}
}

// One returns a single bookPlanStayDateInfo record from the query.
func (q bookPlanStayDateInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BookPlanStayDateInfo, error) {
	o := &BookPlanStayDateInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for book_plan_stay_date_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BookPlanStayDateInfo records from the query.
func (q bookPlanStayDateInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookPlanStayDateInfoSlice, error) {
	var o []*BookPlanStayDateInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BookPlanStayDateInfo slice")
	}

	if len(bookPlanStayDateInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BookPlanStayDateInfo records in the query.
func (q bookPlanStayDateInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count book_plan_stay_date_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookPlanStayDateInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if book_plan_stay_date_info exists")
	}

	return count > 0, nil
}

// Plan pointed to by the foreign key.
func (o *BookPlanStayDateInfo) Plan(mods ...qm.QueryMod) bookPlanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlanID),
	}

	queryMods = append(queryMods, mods...)

	return BookPlans(queryMods...)
}

// LoadPlan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bookPlanStayDateInfoL) LoadPlan(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBookPlanStayDateInfo interface{}, mods queries.Applicator) error {
	var slice []*BookPlanStayDateInfo
	var object *BookPlanStayDateInfo

	if singular {
		var ok bool
		object, ok = maybeBookPlanStayDateInfo.(*BookPlanStayDateInfo)
		if !ok {
			object = new(BookPlanStayDateInfo)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBookPlanStayDateInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBookPlanStayDateInfo))
			}
		}
	} else {
		s, ok := maybeBookPlanStayDateInfo.(*[]*BookPlanStayDateInfo)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBookPlanStayDateInfo)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBookPlanStayDateInfo))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &bookPlanStayDateInfoR{}
		}
		args[object.PlanID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bookPlanStayDateInfoR{}
			}

			args[obj.PlanID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`book_plan`),
		qm.WhereIn(`book_plan.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BookPlan")
	}

	var resultSlice []*BookPlan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BookPlan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for book_plan")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for book_plan")
	}

	if len(bookPlanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Plan = foreign
		if foreign.R == nil {
			foreign.R = &bookPlanR{}
		}
		foreign.R.PlanBookPlanStayDateInfos = append(foreign.R.PlanBookPlanStayDateInfos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlanID == foreign.ID {
				local.R.Plan = foreign
				if foreign.R == nil {
					foreign.R = &bookPlanR{}
				}
				foreign.R.PlanBookPlanStayDateInfos = append(foreign.R.PlanBookPlanStayDateInfos, local)
				break
			}
		}
	}

	return nil
}

// SetPlan of the bookPlanStayDateInfo to the related item.
// Sets o.R.Plan to related.
// Adds o to related.R.PlanBookPlanStayDateInfos.
func (o *BookPlanStayDateInfo) SetPlan(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BookPlan) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"book_plan_stay_date_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"plan_id"}),
		strmangle.WhereClause("\"", "\"", 2, bookPlanStayDateInfoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlanID, o.StayDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlanID = related.ID
	if o.R == nil {
		o.R = &bookPlanStayDateInfoR{
			Plan: related,
		}
	} else {
		o.R.Plan = related
	}

	if related.R == nil {
		related.R = &bookPlanR{
			PlanBookPlanStayDateInfos: BookPlanStayDateInfoSlice{o},
		}
	} else {
		related.R.PlanBookPlanStayDateInfos = append(related.R.PlanBookPlanStayDateInfos, o)
	}

	return nil
}

// BookPlanStayDateInfos retrieves all the records using an executor.
func BookPlanStayDateInfos(mods ...qm.QueryMod) bookPlanStayDateInfoQuery {
	mods = append(mods, qm.From("\"book_plan_stay_date_info\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"book_plan_stay_date_info\".*"})
	}

	return bookPlanStayDateInfoQuery{q}
}

// FindBookPlanStayDateInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookPlanStayDateInfo(ctx context.Context, exec boil.ContextExecutor, planID string, stayDate time.Time, selectCols ...string) (*BookPlanStayDateInfo, error) {
	bookPlanStayDateInfoObj := &BookPlanStayDateInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"book_plan_stay_date_info\" where \"plan_id\"=$1 AND \"stay_date\"=$2", sel,
	)

	q := queries.Raw(query, planID, stayDate)

	err := q.Bind(ctx, exec, bookPlanStayDateInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from book_plan_stay_date_info")
	}

	if err = bookPlanStayDateInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookPlanStayDateInfoObj, err
	}

	return bookPlanStayDateInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BookPlanStayDateInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no book_plan_stay_date_info provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookPlanStayDateInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookPlanStayDateInfoInsertCacheMut.RLock()
	cache, cached := bookPlanStayDateInfoInsertCache[key]
	bookPlanStayDateInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookPlanStayDateInfoAllColumns,
			bookPlanStayDateInfoColumnsWithDefault,
			bookPlanStayDateInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookPlanStayDateInfoType, bookPlanStayDateInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookPlanStayDateInfoType, bookPlanStayDateInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"book_plan_stay_date_info\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"book_plan_stay_date_info\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into book_plan_stay_date_info")
	}

	if !cached {
		bookPlanStayDateInfoInsertCacheMut.Lock()
		bookPlanStayDateInfoInsertCache[key] = cache
		bookPlanStayDateInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BookPlanStayDateInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BookPlanStayDateInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookPlanStayDateInfoUpdateCacheMut.RLock()
	cache, cached := bookPlanStayDateInfoUpdateCache[key]
	bookPlanStayDateInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookPlanStayDateInfoAllColumns,
			bookPlanStayDateInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"create_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update book_plan_stay_date_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"book_plan_stay_date_info\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookPlanStayDateInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookPlanStayDateInfoType, bookPlanStayDateInfoMapping, append(wl, bookPlanStayDateInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update book_plan_stay_date_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for book_plan_stay_date_info")
	}

	if !cached {
		bookPlanStayDateInfoUpdateCacheMut.Lock()
		bookPlanStayDateInfoUpdateCache[key] = cache
		bookPlanStayDateInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bookPlanStayDateInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for book_plan_stay_date_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for book_plan_stay_date_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookPlanStayDateInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPlanStayDateInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"book_plan_stay_date_info\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookPlanStayDateInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bookPlanStayDateInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bookPlanStayDateInfo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BookPlanStayDateInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no book_plan_stay_date_info provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookPlanStayDateInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookPlanStayDateInfoUpsertCacheMut.RLock()
	cache, cached := bookPlanStayDateInfoUpsertCache[key]
	bookPlanStayDateInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bookPlanStayDateInfoAllColumns,
			bookPlanStayDateInfoColumnsWithDefault,
			bookPlanStayDateInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bookPlanStayDateInfoAllColumns,
			bookPlanStayDateInfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert book_plan_stay_date_info, could not build update column list")
		}

		ret := strmangle.SetComplement(bookPlanStayDateInfoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(bookPlanStayDateInfoPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert book_plan_stay_date_info, could not build conflict column list")
			}

			conflict = make([]string, len(bookPlanStayDateInfoPrimaryKeyColumns))
			copy(conflict, bookPlanStayDateInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"book_plan_stay_date_info\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(bookPlanStayDateInfoType, bookPlanStayDateInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookPlanStayDateInfoType, bookPlanStayDateInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert book_plan_stay_date_info")
	}

	if !cached {
		bookPlanStayDateInfoUpsertCacheMut.Lock()
		bookPlanStayDateInfoUpsertCache[key] = cache
		bookPlanStayDateInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BookPlanStayDateInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BookPlanStayDateInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookPlanStayDateInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookPlanStayDateInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"book_plan_stay_date_info\" WHERE \"plan_id\"=$1 AND \"stay_date\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from book_plan_stay_date_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for book_plan_stay_date_info")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookPlanStayDateInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookPlanStayDateInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from book_plan_stay_date_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for book_plan_stay_date_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookPlanStayDateInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookPlanStayDateInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPlanStayDateInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"book_plan_stay_date_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookPlanStayDateInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookPlanStayDateInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for book_plan_stay_date_info")
	}

	if len(bookPlanStayDateInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BookPlanStayDateInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookPlanStayDateInfo(ctx, exec, o.PlanID, o.StayDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookPlanStayDateInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookPlanStayDateInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookPlanStayDateInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"book_plan_stay_date_info\".* FROM \"book_plan_stay_date_info\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookPlanStayDateInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookPlanStayDateInfoSlice")
	}

	*o = slice

	return nil
}

// BookPlanStayDateInfoExists checks if the BookPlanStayDateInfo row exists.
func BookPlanStayDateInfoExists(ctx context.Context, exec boil.ContextExecutor, planID string, stayDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"book_plan_stay_date_info\" where \"plan_id\"=$1 AND \"stay_date\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, planID, stayDate)
	}
	row := exec.QueryRowContext(ctx, sql, planID, stayDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if book_plan_stay_date_info exists")
	}

	return exists, nil
}

// Exists checks if the BookPlanStayDateInfo row exists.
func (o *BookPlanStayDateInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BookPlanStayDateInfoExists(ctx, exec, o.PlanID, o.StayDate)
}
