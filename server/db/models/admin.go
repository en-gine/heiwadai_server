// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Admin is an object representing the database table.
type Admin struct {
	AdminID  string    `boil:"admin_id" json:"admin_id" toml:"admin_id" yaml:"admin_id"`
	Name     string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	BelongTo string    `boil:"belong_to" json:"belong_to" toml:"belong_to" yaml:"belong_to"`
	IsActive bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreateAt time.Time `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt time.Time `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`

	R *adminR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L adminL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdminColumns = struct {
	AdminID  string
	Name     string
	BelongTo string
	IsActive string
	CreateAt string
	UpdateAt string
}{
	AdminID:  "admin_id",
	Name:     "name",
	BelongTo: "belong_to",
	IsActive: "is_active",
	CreateAt: "create_at",
	UpdateAt: "update_at",
}

var AdminTableColumns = struct {
	AdminID  string
	Name     string
	BelongTo string
	IsActive string
	CreateAt string
	UpdateAt string
}{
	AdminID:  "admin.admin_id",
	Name:     "admin.name",
	BelongTo: "admin.belong_to",
	IsActive: "admin.is_active",
	CreateAt: "admin.create_at",
	UpdateAt: "admin.update_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AdminWhere = struct {
	AdminID  whereHelperstring
	Name     whereHelperstring
	BelongTo whereHelperstring
	IsActive whereHelperbool
	CreateAt whereHelpertime_Time
	UpdateAt whereHelpertime_Time
}{
	AdminID:  whereHelperstring{field: "\"admin\".\"admin_id\""},
	Name:     whereHelperstring{field: "\"admin\".\"name\""},
	BelongTo: whereHelperstring{field: "\"admin\".\"belong_to\""},
	IsActive: whereHelperbool{field: "\"admin\".\"is_active\""},
	CreateAt: whereHelpertime_Time{field: "\"admin\".\"create_at\""},
	UpdateAt: whereHelpertime_Time{field: "\"admin\".\"update_at\""},
}

// AdminRels is where relationship names are stored.
var AdminRels = struct {
	Admin               string
	BelongToStore       string
	AuthorMailMagazines string
	AuthorMessages      string
}{
	Admin:               "Admin",
	BelongToStore:       "BelongToStore",
	AuthorMailMagazines: "AuthorMailMagazines",
	AuthorMessages:      "AuthorMessages",
}

// adminR is where relationships are stored.
type adminR struct {
	Admin               *UserManager      `boil:"Admin" json:"Admin" toml:"Admin" yaml:"Admin"`
	BelongToStore       *Store            `boil:"BelongToStore" json:"BelongToStore" toml:"BelongToStore" yaml:"BelongToStore"`
	AuthorMailMagazines MailMagazineSlice `boil:"AuthorMailMagazines" json:"AuthorMailMagazines" toml:"AuthorMailMagazines" yaml:"AuthorMailMagazines"`
	AuthorMessages      MessageSlice      `boil:"AuthorMessages" json:"AuthorMessages" toml:"AuthorMessages" yaml:"AuthorMessages"`
}

// NewStruct creates a new relationship struct
func (*adminR) NewStruct() *adminR {
	return &adminR{}
}

func (o *Admin) GetAdmin() *UserManager {
	if o == nil {
		return nil
	}

	return o.R.GetAdmin()
}

func (r *adminR) GetAdmin() *UserManager {
	if r == nil {
		return nil
	}

	return r.Admin
}

func (o *Admin) GetBelongToStore() *Store {
	if o == nil {
		return nil
	}

	return o.R.GetBelongToStore()
}

func (r *adminR) GetBelongToStore() *Store {
	if r == nil {
		return nil
	}

	return r.BelongToStore
}

func (o *Admin) GetAuthorMailMagazines() MailMagazineSlice {
	if o == nil {
		return nil
	}

	return o.R.GetAuthorMailMagazines()
}

func (r *adminR) GetAuthorMailMagazines() MailMagazineSlice {
	if r == nil {
		return nil
	}

	return r.AuthorMailMagazines
}

func (o *Admin) GetAuthorMessages() MessageSlice {
	if o == nil {
		return nil
	}

	return o.R.GetAuthorMessages()
}

func (r *adminR) GetAuthorMessages() MessageSlice {
	if r == nil {
		return nil
	}

	return r.AuthorMessages
}

// adminL is where Load methods for each relationship are stored.
type adminL struct{}

var (
	adminAllColumns            = []string{"admin_id", "name", "belong_to", "is_active", "create_at", "update_at"}
	adminColumnsWithoutDefault = []string{"admin_id", "name", "belong_to"}
	adminColumnsWithDefault    = []string{"is_active", "create_at", "update_at"}
	adminPrimaryKeyColumns     = []string{"admin_id"}
	adminGeneratedColumns      = []string{}
)

type (
	// AdminSlice is an alias for a slice of pointers to Admin.
	// This should almost always be used instead of []Admin.
	AdminSlice []*Admin
	// AdminHook is the signature for custom Admin hook methods
	AdminHook func(context.Context, boil.ContextExecutor, *Admin) error

	adminQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	adminType                 = reflect.TypeOf(&Admin{})
	adminMapping              = queries.MakeStructMapping(adminType)
	adminPrimaryKeyMapping, _ = queries.BindMapping(adminType, adminMapping, adminPrimaryKeyColumns)
	adminInsertCacheMut       sync.RWMutex
	adminInsertCache          = make(map[string]insertCache)
	adminUpdateCacheMut       sync.RWMutex
	adminUpdateCache          = make(map[string]updateCache)
	adminUpsertCacheMut       sync.RWMutex
	adminUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var adminAfterSelectMu sync.Mutex
var adminAfterSelectHooks []AdminHook

var adminBeforeInsertMu sync.Mutex
var adminBeforeInsertHooks []AdminHook
var adminAfterInsertMu sync.Mutex
var adminAfterInsertHooks []AdminHook

var adminBeforeUpdateMu sync.Mutex
var adminBeforeUpdateHooks []AdminHook
var adminAfterUpdateMu sync.Mutex
var adminAfterUpdateHooks []AdminHook

var adminBeforeDeleteMu sync.Mutex
var adminBeforeDeleteHooks []AdminHook
var adminAfterDeleteMu sync.Mutex
var adminAfterDeleteHooks []AdminHook

var adminBeforeUpsertMu sync.Mutex
var adminBeforeUpsertHooks []AdminHook
var adminAfterUpsertMu sync.Mutex
var adminAfterUpsertHooks []AdminHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Admin) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Admin) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Admin) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Admin) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Admin) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Admin) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Admin) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Admin) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Admin) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range adminAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdminHook registers your hook function for all future operations.
func AddAdminHook(hookPoint boil.HookPoint, adminHook AdminHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		adminAfterSelectMu.Lock()
		adminAfterSelectHooks = append(adminAfterSelectHooks, adminHook)
		adminAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		adminBeforeInsertMu.Lock()
		adminBeforeInsertHooks = append(adminBeforeInsertHooks, adminHook)
		adminBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		adminAfterInsertMu.Lock()
		adminAfterInsertHooks = append(adminAfterInsertHooks, adminHook)
		adminAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		adminBeforeUpdateMu.Lock()
		adminBeforeUpdateHooks = append(adminBeforeUpdateHooks, adminHook)
		adminBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		adminAfterUpdateMu.Lock()
		adminAfterUpdateHooks = append(adminAfterUpdateHooks, adminHook)
		adminAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		adminBeforeDeleteMu.Lock()
		adminBeforeDeleteHooks = append(adminBeforeDeleteHooks, adminHook)
		adminBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		adminAfterDeleteMu.Lock()
		adminAfterDeleteHooks = append(adminAfterDeleteHooks, adminHook)
		adminAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		adminBeforeUpsertMu.Lock()
		adminBeforeUpsertHooks = append(adminBeforeUpsertHooks, adminHook)
		adminBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		adminAfterUpsertMu.Lock()
		adminAfterUpsertHooks = append(adminAfterUpsertHooks, adminHook)
		adminAfterUpsertMu.Unlock()
	}
}

// One returns a single admin record from the query.
func (q adminQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Admin, error) {
	o := &Admin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for admin")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Admin records from the query.
func (q adminQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdminSlice, error) {
	var o []*Admin

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Admin slice")
	}

	if len(adminAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Admin records in the query.
func (q adminQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count admin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q adminQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if admin exists")
	}

	return count > 0, nil
}

// Admin pointed to by the foreign key.
func (o *Admin) Admin(mods ...qm.QueryMod) userManagerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AdminID),
	}

	queryMods = append(queryMods, mods...)

	return UserManagers(queryMods...)
}

// BelongToStore pointed to by the foreign key.
func (o *Admin) BelongToStore(mods ...qm.QueryMod) storeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BelongTo),
	}

	queryMods = append(queryMods, mods...)

	return Stores(queryMods...)
}

// AuthorMailMagazines retrieves all the mail_magazine's MailMagazines with an executor via author_id column.
func (o *Admin) AuthorMailMagazines(mods ...qm.QueryMod) mailMagazineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mail_magazine\".\"author_id\"=?", o.AdminID),
	)

	return MailMagazines(queryMods...)
}

// AuthorMessages retrieves all the message's Messages with an executor via author_id column.
func (o *Admin) AuthorMessages(mods ...qm.QueryMod) messageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"message\".\"author_id\"=?", o.AdminID),
	)

	return Messages(queryMods...)
}

// LoadAdmin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (adminL) LoadAdmin(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAdmin interface{}, mods queries.Applicator) error {
	var slice []*Admin
	var object *Admin

	if singular {
		var ok bool
		object, ok = maybeAdmin.(*Admin)
		if !ok {
			object = new(Admin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAdmin))
			}
		}
	} else {
		s, ok := maybeAdmin.(*[]*Admin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAdmin))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &adminR{}
		}
		args[object.AdminID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &adminR{}
			}

			args[obj.AdminID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_manager`),
		qm.WhereIn(`user_manager.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserManager")
	}

	var resultSlice []*UserManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserManager")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_manager")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_manager")
	}

	if len(userManagerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Admin = foreign
		if foreign.R == nil {
			foreign.R = &userManagerR{}
		}
		foreign.R.AdminAdmin = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AdminID == foreign.ID {
				local.R.Admin = foreign
				if foreign.R == nil {
					foreign.R = &userManagerR{}
				}
				foreign.R.AdminAdmin = local
				break
			}
		}
	}

	return nil
}

// LoadBelongToStore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (adminL) LoadBelongToStore(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAdmin interface{}, mods queries.Applicator) error {
	var slice []*Admin
	var object *Admin

	if singular {
		var ok bool
		object, ok = maybeAdmin.(*Admin)
		if !ok {
			object = new(Admin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAdmin))
			}
		}
	} else {
		s, ok := maybeAdmin.(*[]*Admin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAdmin))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &adminR{}
		}
		args[object.BelongTo] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &adminR{}
			}

			args[obj.BelongTo] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`store`),
		qm.WhereIn(`store.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Store")
	}

	var resultSlice []*Store
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Store")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for store")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for store")
	}

	if len(storeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BelongToStore = foreign
		if foreign.R == nil {
			foreign.R = &storeR{}
		}
		foreign.R.BelongToAdmins = append(foreign.R.BelongToAdmins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BelongTo == foreign.ID {
				local.R.BelongToStore = foreign
				if foreign.R == nil {
					foreign.R = &storeR{}
				}
				foreign.R.BelongToAdmins = append(foreign.R.BelongToAdmins, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthorMailMagazines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (adminL) LoadAuthorMailMagazines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAdmin interface{}, mods queries.Applicator) error {
	var slice []*Admin
	var object *Admin

	if singular {
		var ok bool
		object, ok = maybeAdmin.(*Admin)
		if !ok {
			object = new(Admin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAdmin))
			}
		}
	} else {
		s, ok := maybeAdmin.(*[]*Admin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAdmin))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &adminR{}
		}
		args[object.AdminID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &adminR{}
			}
			args[obj.AdminID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`mail_magazine`),
		qm.WhereIn(`mail_magazine.author_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mail_magazine")
	}

	var resultSlice []*MailMagazine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mail_magazine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mail_magazine")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mail_magazine")
	}

	if len(mailMagazineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuthorMailMagazines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mailMagazineR{}
			}
			foreign.R.Author = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AdminID == foreign.AuthorID {
				local.R.AuthorMailMagazines = append(local.R.AuthorMailMagazines, foreign)
				if foreign.R == nil {
					foreign.R = &mailMagazineR{}
				}
				foreign.R.Author = local
				break
			}
		}
	}

	return nil
}

// LoadAuthorMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (adminL) LoadAuthorMessages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAdmin interface{}, mods queries.Applicator) error {
	var slice []*Admin
	var object *Admin

	if singular {
		var ok bool
		object, ok = maybeAdmin.(*Admin)
		if !ok {
			object = new(Admin)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAdmin))
			}
		}
	} else {
		s, ok := maybeAdmin.(*[]*Admin)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAdmin)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAdmin))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &adminR{}
		}
		args[object.AdminID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &adminR{}
			}
			args[obj.AdminID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`message`),
		qm.WhereIn(`message.author_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load message")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on message")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for message")
	}

	if len(messageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuthorMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &messageR{}
			}
			foreign.R.Author = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AdminID == foreign.AuthorID {
				local.R.AuthorMessages = append(local.R.AuthorMessages, foreign)
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.Author = local
				break
			}
		}
	}

	return nil
}

// SetAdmin of the admin to the related item.
// Sets o.R.Admin to related.
// Adds o to related.R.AdminAdmin.
func (o *Admin) SetAdmin(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserManager) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"admin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"admin_id"}),
		strmangle.WhereClause("\"", "\"", 2, adminPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AdminID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AdminID = related.ID
	if o.R == nil {
		o.R = &adminR{
			Admin: related,
		}
	} else {
		o.R.Admin = related
	}

	if related.R == nil {
		related.R = &userManagerR{
			AdminAdmin: o,
		}
	} else {
		related.R.AdminAdmin = o
	}

	return nil
}

// SetBelongToStore of the admin to the related item.
// Sets o.R.BelongToStore to related.
// Adds o to related.R.BelongToAdmins.
func (o *Admin) SetBelongToStore(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Store) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"admin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"belong_to"}),
		strmangle.WhereClause("\"", "\"", 2, adminPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.AdminID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BelongTo = related.ID
	if o.R == nil {
		o.R = &adminR{
			BelongToStore: related,
		}
	} else {
		o.R.BelongToStore = related
	}

	if related.R == nil {
		related.R = &storeR{
			BelongToAdmins: AdminSlice{o},
		}
	} else {
		related.R.BelongToAdmins = append(related.R.BelongToAdmins, o)
	}

	return nil
}

// AddAuthorMailMagazines adds the given related objects to the existing relationships
// of the admin, optionally inserting them as new records.
// Appends related to o.R.AuthorMailMagazines.
// Sets related.R.Author appropriately.
func (o *Admin) AddAuthorMailMagazines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MailMagazine) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AuthorID = o.AdminID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mail_magazine\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
				strmangle.WhereClause("\"", "\"", 2, mailMagazinePrimaryKeyColumns),
			)
			values := []interface{}{o.AdminID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AuthorID = o.AdminID
		}
	}

	if o.R == nil {
		o.R = &adminR{
			AuthorMailMagazines: related,
		}
	} else {
		o.R.AuthorMailMagazines = append(o.R.AuthorMailMagazines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mailMagazineR{
				Author: o,
			}
		} else {
			rel.R.Author = o
		}
	}
	return nil
}

// AddAuthorMessages adds the given related objects to the existing relationships
// of the admin, optionally inserting them as new records.
// Appends related to o.R.AuthorMessages.
// Sets related.R.Author appropriately.
func (o *Admin) AddAuthorMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Message) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AuthorID = o.AdminID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"message\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"author_id"}),
				strmangle.WhereClause("\"", "\"", 2, messagePrimaryKeyColumns),
			)
			values := []interface{}{o.AdminID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AuthorID = o.AdminID
		}
	}

	if o.R == nil {
		o.R = &adminR{
			AuthorMessages: related,
		}
	} else {
		o.R.AuthorMessages = append(o.R.AuthorMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &messageR{
				Author: o,
			}
		} else {
			rel.R.Author = o
		}
	}
	return nil
}

// Admins retrieves all the records using an executor.
func Admins(mods ...qm.QueryMod) adminQuery {
	mods = append(mods, qm.From("\"admin\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"admin\".*"})
	}

	return adminQuery{q}
}

// FindAdmin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdmin(ctx context.Context, exec boil.ContextExecutor, adminID string, selectCols ...string) (*Admin, error) {
	adminObj := &Admin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"admin\" where \"admin_id\"=$1", sel,
	)

	q := queries.Raw(query, adminID)

	err := q.Bind(ctx, exec, adminObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from admin")
	}

	if err = adminObj.doAfterSelectHooks(ctx, exec); err != nil {
		return adminObj, err
	}

	return adminObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Admin) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no admin provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	adminInsertCacheMut.RLock()
	cache, cached := adminInsertCache[key]
	adminInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			adminAllColumns,
			adminColumnsWithDefault,
			adminColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(adminType, adminMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(adminType, adminMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"admin\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"admin\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into admin")
	}

	if !cached {
		adminInsertCacheMut.Lock()
		adminInsertCache[key] = cache
		adminInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Admin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Admin) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	adminUpdateCacheMut.RLock()
	cache, cached := adminUpdateCache[key]
	adminUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			adminAllColumns,
			adminPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"create_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update admin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"admin\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, adminPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(adminType, adminMapping, append(wl, adminPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update admin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for admin")
	}

	if !cached {
		adminUpdateCacheMut.Lock()
		adminUpdateCache[key] = cache
		adminUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q adminQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for admin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for admin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdminSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"admin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, adminPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in admin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all admin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Admin) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no admin provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(adminColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	adminUpsertCacheMut.RLock()
	cache, cached := adminUpsertCache[key]
	adminUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			adminAllColumns,
			adminColumnsWithDefault,
			adminColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			adminAllColumns,
			adminPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert admin, could not build update column list")
		}

		ret := strmangle.SetComplement(adminAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(adminPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert admin, could not build conflict column list")
			}

			conflict = make([]string, len(adminPrimaryKeyColumns))
			copy(conflict, adminPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"admin\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(adminType, adminMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(adminType, adminMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert admin")
	}

	if !cached {
		adminUpsertCacheMut.Lock()
		adminUpsertCache[key] = cache
		adminUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Admin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Admin) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Admin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), adminPrimaryKeyMapping)
	sql := "DELETE FROM \"admin\" WHERE \"admin_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from admin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for admin")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q adminQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no adminQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from admin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdminSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(adminBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"admin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from admin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for admin")
	}

	if len(adminAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Admin) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAdmin(ctx, exec, o.AdminID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdminSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdminSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), adminPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"admin\".* FROM \"admin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, adminPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdminSlice")
	}

	*o = slice

	return nil
}

// AdminExists checks if the Admin row exists.
func AdminExists(ctx context.Context, exec boil.ContextExecutor, adminID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"admin\" where \"admin_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, adminID)
	}
	row := exec.QueryRowContext(ctx, sql, adminID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if admin exists")
	}

	return exists, nil
}

// Exists checks if the Admin row exists.
func (o *Admin) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AdminExists(ctx, exec, o.AdminID)
}
