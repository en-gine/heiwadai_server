// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UserReport is an object representing the database table.
type UserReport struct {
	ID       string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title    string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content  string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	UserID   string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	UserName string    `boil:"user_name" json:"user_name" toml:"user_name" yaml:"user_name"`
	CreateAt time.Time `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt time.Time `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`

	R *userReportR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userReportL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserReportColumns = struct {
	ID       string
	Title    string
	Content  string
	UserID   string
	UserName string
	CreateAt string
	UpdateAt string
}{
	ID:       "id",
	Title:    "title",
	Content:  "content",
	UserID:   "user_id",
	UserName: "user_name",
	CreateAt: "create_at",
	UpdateAt: "update_at",
}

var UserReportTableColumns = struct {
	ID       string
	Title    string
	Content  string
	UserID   string
	UserName string
	CreateAt string
	UpdateAt string
}{
	ID:       "user_report.id",
	Title:    "user_report.title",
	Content:  "user_report.content",
	UserID:   "user_report.user_id",
	UserName: "user_report.user_name",
	CreateAt: "user_report.create_at",
	UpdateAt: "user_report.update_at",
}

// Generated where

var UserReportWhere = struct {
	ID       whereHelperstring
	Title    whereHelperstring
	Content  whereHelperstring
	UserID   whereHelperstring
	UserName whereHelperstring
	CreateAt whereHelpertime_Time
	UpdateAt whereHelpertime_Time
}{
	ID:       whereHelperstring{field: "\"user_report\".\"id\""},
	Title:    whereHelperstring{field: "\"user_report\".\"title\""},
	Content:  whereHelperstring{field: "\"user_report\".\"content\""},
	UserID:   whereHelperstring{field: "\"user_report\".\"user_id\""},
	UserName: whereHelperstring{field: "\"user_report\".\"user_name\""},
	CreateAt: whereHelpertime_Time{field: "\"user_report\".\"create_at\""},
	UpdateAt: whereHelpertime_Time{field: "\"user_report\".\"update_at\""},
}

// UserReportRels is where relationship names are stored.
var UserReportRels = struct {
	User string
}{
	User: "User",
}

// userReportR is where relationships are stored.
type userReportR struct {
	User *UserDatum `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userReportR) NewStruct() *userReportR {
	return &userReportR{}
}

func (o *UserReport) GetUser() *UserDatum {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *userReportR) GetUser() *UserDatum {
	if r == nil {
		return nil
	}

	return r.User
}

// userReportL is where Load methods for each relationship are stored.
type userReportL struct{}

var (
	userReportAllColumns            = []string{"id", "title", "content", "user_id", "user_name", "create_at", "update_at"}
	userReportColumnsWithoutDefault = []string{"id", "title", "content", "user_id", "user_name"}
	userReportColumnsWithDefault    = []string{"create_at", "update_at"}
	userReportPrimaryKeyColumns     = []string{"id"}
	userReportGeneratedColumns      = []string{}
)

type (
	// UserReportSlice is an alias for a slice of pointers to UserReport.
	// This should almost always be used instead of []UserReport.
	UserReportSlice []*UserReport
	// UserReportHook is the signature for custom UserReport hook methods
	UserReportHook func(context.Context, boil.ContextExecutor, *UserReport) error

	userReportQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userReportType                 = reflect.TypeOf(&UserReport{})
	userReportMapping              = queries.MakeStructMapping(userReportType)
	userReportPrimaryKeyMapping, _ = queries.BindMapping(userReportType, userReportMapping, userReportPrimaryKeyColumns)
	userReportInsertCacheMut       sync.RWMutex
	userReportInsertCache          = make(map[string]insertCache)
	userReportUpdateCacheMut       sync.RWMutex
	userReportUpdateCache          = make(map[string]updateCache)
	userReportUpsertCacheMut       sync.RWMutex
	userReportUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userReportAfterSelectMu sync.Mutex
var userReportAfterSelectHooks []UserReportHook

var userReportBeforeInsertMu sync.Mutex
var userReportBeforeInsertHooks []UserReportHook
var userReportAfterInsertMu sync.Mutex
var userReportAfterInsertHooks []UserReportHook

var userReportBeforeUpdateMu sync.Mutex
var userReportBeforeUpdateHooks []UserReportHook
var userReportAfterUpdateMu sync.Mutex
var userReportAfterUpdateHooks []UserReportHook

var userReportBeforeDeleteMu sync.Mutex
var userReportBeforeDeleteHooks []UserReportHook
var userReportAfterDeleteMu sync.Mutex
var userReportAfterDeleteHooks []UserReportHook

var userReportBeforeUpsertMu sync.Mutex
var userReportBeforeUpsertHooks []UserReportHook
var userReportAfterUpsertMu sync.Mutex
var userReportAfterUpsertHooks []UserReportHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserReport) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserReport) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserReport) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserReport) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserReport) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserReport) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserReport) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserReport) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserReport) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userReportAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserReportHook registers your hook function for all future operations.
func AddUserReportHook(hookPoint boil.HookPoint, userReportHook UserReportHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userReportAfterSelectMu.Lock()
		userReportAfterSelectHooks = append(userReportAfterSelectHooks, userReportHook)
		userReportAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userReportBeforeInsertMu.Lock()
		userReportBeforeInsertHooks = append(userReportBeforeInsertHooks, userReportHook)
		userReportBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userReportAfterInsertMu.Lock()
		userReportAfterInsertHooks = append(userReportAfterInsertHooks, userReportHook)
		userReportAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userReportBeforeUpdateMu.Lock()
		userReportBeforeUpdateHooks = append(userReportBeforeUpdateHooks, userReportHook)
		userReportBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userReportAfterUpdateMu.Lock()
		userReportAfterUpdateHooks = append(userReportAfterUpdateHooks, userReportHook)
		userReportAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userReportBeforeDeleteMu.Lock()
		userReportBeforeDeleteHooks = append(userReportBeforeDeleteHooks, userReportHook)
		userReportBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userReportAfterDeleteMu.Lock()
		userReportAfterDeleteHooks = append(userReportAfterDeleteHooks, userReportHook)
		userReportAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userReportBeforeUpsertMu.Lock()
		userReportBeforeUpsertHooks = append(userReportBeforeUpsertHooks, userReportHook)
		userReportBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userReportAfterUpsertMu.Lock()
		userReportAfterUpsertHooks = append(userReportAfterUpsertHooks, userReportHook)
		userReportAfterUpsertMu.Unlock()
	}
}

// One returns a single userReport record from the query.
func (q userReportQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserReport, error) {
	o := &UserReport{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_report")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserReport records from the query.
func (q userReportQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserReportSlice, error) {
	var o []*UserReport

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserReport slice")
	}

	if len(userReportAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserReport records in the query.
func (q userReportQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_report rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userReportQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_report exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserReport) User(mods ...qm.QueryMod) userDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return UserData(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userReportL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserReport interface{}, mods queries.Applicator) error {
	var slice []*UserReport
	var object *UserReport

	if singular {
		var ok bool
		object, ok = maybeUserReport.(*UserReport)
		if !ok {
			object = new(UserReport)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserReport))
			}
		}
	} else {
		s, ok := maybeUserReport.(*[]*UserReport)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserReport)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserReport))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userReportR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userReportR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_data`),
		qm.WhereIn(`user_data.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDatum")
	}

	var resultSlice []*UserDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_data")
	}

	if len(userDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userDatumR{}
		}
		foreign.R.UserUserReports = append(foreign.R.UserUserReports, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userDatumR{}
				}
				foreign.R.UserUserReports = append(foreign.R.UserUserReports, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the userReport to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserReports.
func (o *UserReport) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_report\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userReportPrimaryKeyColumns),
	)
	values := []interface{}{related.UserID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.UserID
	if o.R == nil {
		o.R = &userReportR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userDatumR{
			UserUserReports: UserReportSlice{o},
		}
	} else {
		related.R.UserUserReports = append(related.R.UserUserReports, o)
	}

	return nil
}

// UserReports retrieves all the records using an executor.
func UserReports(mods ...qm.QueryMod) userReportQuery {
	mods = append(mods, qm.From("\"user_report\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_report\".*"})
	}

	return userReportQuery{q}
}

// FindUserReport retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserReport(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserReport, error) {
	userReportObj := &UserReport{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_report\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userReportObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_report")
	}

	if err = userReportObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userReportObj, err
	}

	return userReportObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserReport) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_report provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userReportColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userReportInsertCacheMut.RLock()
	cache, cached := userReportInsertCache[key]
	userReportInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userReportAllColumns,
			userReportColumnsWithDefault,
			userReportColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userReportType, userReportMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userReportType, userReportMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_report\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_report\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_report")
	}

	if !cached {
		userReportInsertCacheMut.Lock()
		userReportInsertCache[key] = cache
		userReportInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserReport.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserReport) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userReportUpdateCacheMut.RLock()
	cache, cached := userReportUpdateCache[key]
	userReportUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userReportAllColumns,
			userReportPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"create_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_report, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_report\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userReportPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userReportType, userReportMapping, append(wl, userReportPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_report row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_report")
	}

	if !cached {
		userReportUpdateCacheMut.Lock()
		userReportUpdateCache[key] = cache
		userReportUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userReportQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_report")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserReportSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_report\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userReportPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userReport")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserReport) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_report provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userReportColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userReportUpsertCacheMut.RLock()
	cache, cached := userReportUpsertCache[key]
	userReportUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userReportAllColumns,
			userReportColumnsWithDefault,
			userReportColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userReportAllColumns,
			userReportPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_report, could not build update column list")
		}

		ret := strmangle.SetComplement(userReportAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userReportPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_report, could not build conflict column list")
			}

			conflict = make([]string, len(userReportPrimaryKeyColumns))
			copy(conflict, userReportPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_report\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userReportType, userReportMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userReportType, userReportMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_report")
	}

	if !cached {
		userReportUpsertCacheMut.Lock()
		userReportUpsertCache[key] = cache
		userReportUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserReport record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserReport) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserReport provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userReportPrimaryKeyMapping)
	sql := "DELETE FROM \"user_report\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_report")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userReportQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userReportQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_report")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_report")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserReportSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userReportBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_report\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userReportPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userReport slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_report")
	}

	if len(userReportAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserReport) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserReport(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserReportSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserReportSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userReportPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_report\".* FROM \"user_report\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userReportPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserReportSlice")
	}

	*o = slice

	return nil
}

// UserReportExists checks if the UserReport row exists.
func UserReportExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_report\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_report exists")
	}

	return exists, nil
}

// Exists checks if the UserReport row exists.
func (o *UserReport) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserReportExists(ctx, exec, o.ID)
}
