// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UserManager is an object representing the database table.
type UserManager struct {
	ID       string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email    string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	IsAdmin  bool      `boil:"is_admin" json:"is_admin" toml:"is_admin" yaml:"is_admin"`
	CreateAt time.Time `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt time.Time `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`

	R *userManagerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userManagerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserManagerColumns = struct {
	ID       string
	Email    string
	IsAdmin  string
	CreateAt string
	UpdateAt string
}{
	ID:       "id",
	Email:    "email",
	IsAdmin:  "is_admin",
	CreateAt: "create_at",
	UpdateAt: "update_at",
}

var UserManagerTableColumns = struct {
	ID       string
	Email    string
	IsAdmin  string
	CreateAt string
	UpdateAt string
}{
	ID:       "user_manager.id",
	Email:    "user_manager.email",
	IsAdmin:  "user_manager.is_admin",
	CreateAt: "user_manager.create_at",
	UpdateAt: "user_manager.update_at",
}

// Generated where

var UserManagerWhere = struct {
	ID       whereHelperstring
	Email    whereHelperstring
	IsAdmin  whereHelperbool
	CreateAt whereHelpertime_Time
	UpdateAt whereHelpertime_Time
}{
	ID:       whereHelperstring{field: "\"user_manager\".\"id\""},
	Email:    whereHelperstring{field: "\"user_manager\".\"email\""},
	IsAdmin:  whereHelperbool{field: "\"user_manager\".\"is_admin\""},
	CreateAt: whereHelpertime_Time{field: "\"user_manager\".\"create_at\""},
	UpdateAt: whereHelpertime_Time{field: "\"user_manager\".\"update_at\""},
}

// UserManagerRels is where relationship names are stored.
var UserManagerRels = struct {
	AdminAdmin        string
	UserUserDatum     string
	UserUserLoginLogs string
}{
	AdminAdmin:        "AdminAdmin",
	UserUserDatum:     "UserUserDatum",
	UserUserLoginLogs: "UserUserLoginLogs",
}

// userManagerR is where relationships are stored.
type userManagerR struct {
	AdminAdmin        *Admin            `boil:"AdminAdmin" json:"AdminAdmin" toml:"AdminAdmin" yaml:"AdminAdmin"`
	UserUserDatum     *UserDatum        `boil:"UserUserDatum" json:"UserUserDatum" toml:"UserUserDatum" yaml:"UserUserDatum"`
	UserUserLoginLogs UserLoginLogSlice `boil:"UserUserLoginLogs" json:"UserUserLoginLogs" toml:"UserUserLoginLogs" yaml:"UserUserLoginLogs"`
}

// NewStruct creates a new relationship struct
func (*userManagerR) NewStruct() *userManagerR {
	return &userManagerR{}
}

func (o *UserManager) GetAdminAdmin() *Admin {
	if o == nil {
		return nil
	}

	return o.R.GetAdminAdmin()
}

func (r *userManagerR) GetAdminAdmin() *Admin {
	if r == nil {
		return nil
	}

	return r.AdminAdmin
}

func (o *UserManager) GetUserUserDatum() *UserDatum {
	if o == nil {
		return nil
	}

	return o.R.GetUserUserDatum()
}

func (r *userManagerR) GetUserUserDatum() *UserDatum {
	if r == nil {
		return nil
	}

	return r.UserUserDatum
}

func (o *UserManager) GetUserUserLoginLogs() UserLoginLogSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUserUserLoginLogs()
}

func (r *userManagerR) GetUserUserLoginLogs() UserLoginLogSlice {
	if r == nil {
		return nil
	}

	return r.UserUserLoginLogs
}

// userManagerL is where Load methods for each relationship are stored.
type userManagerL struct{}

var (
	userManagerAllColumns            = []string{"id", "email", "is_admin", "create_at", "update_at"}
	userManagerColumnsWithoutDefault = []string{"id", "email"}
	userManagerColumnsWithDefault    = []string{"is_admin", "create_at", "update_at"}
	userManagerPrimaryKeyColumns     = []string{"id"}
	userManagerGeneratedColumns      = []string{}
)

type (
	// UserManagerSlice is an alias for a slice of pointers to UserManager.
	// This should almost always be used instead of []UserManager.
	UserManagerSlice []*UserManager
	// UserManagerHook is the signature for custom UserManager hook methods
	UserManagerHook func(context.Context, boil.ContextExecutor, *UserManager) error

	userManagerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userManagerType                 = reflect.TypeOf(&UserManager{})
	userManagerMapping              = queries.MakeStructMapping(userManagerType)
	userManagerPrimaryKeyMapping, _ = queries.BindMapping(userManagerType, userManagerMapping, userManagerPrimaryKeyColumns)
	userManagerInsertCacheMut       sync.RWMutex
	userManagerInsertCache          = make(map[string]insertCache)
	userManagerUpdateCacheMut       sync.RWMutex
	userManagerUpdateCache          = make(map[string]updateCache)
	userManagerUpsertCacheMut       sync.RWMutex
	userManagerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userManagerAfterSelectMu sync.Mutex
var userManagerAfterSelectHooks []UserManagerHook

var userManagerBeforeInsertMu sync.Mutex
var userManagerBeforeInsertHooks []UserManagerHook
var userManagerAfterInsertMu sync.Mutex
var userManagerAfterInsertHooks []UserManagerHook

var userManagerBeforeUpdateMu sync.Mutex
var userManagerBeforeUpdateHooks []UserManagerHook
var userManagerAfterUpdateMu sync.Mutex
var userManagerAfterUpdateHooks []UserManagerHook

var userManagerBeforeDeleteMu sync.Mutex
var userManagerBeforeDeleteHooks []UserManagerHook
var userManagerAfterDeleteMu sync.Mutex
var userManagerAfterDeleteHooks []UserManagerHook

var userManagerBeforeUpsertMu sync.Mutex
var userManagerBeforeUpsertHooks []UserManagerHook
var userManagerAfterUpsertMu sync.Mutex
var userManagerAfterUpsertHooks []UserManagerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserManager) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserManager) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserManager) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserManager) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserManager) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserManager) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserManager) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserManager) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserManager) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userManagerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserManagerHook registers your hook function for all future operations.
func AddUserManagerHook(hookPoint boil.HookPoint, userManagerHook UserManagerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userManagerAfterSelectMu.Lock()
		userManagerAfterSelectHooks = append(userManagerAfterSelectHooks, userManagerHook)
		userManagerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userManagerBeforeInsertMu.Lock()
		userManagerBeforeInsertHooks = append(userManagerBeforeInsertHooks, userManagerHook)
		userManagerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userManagerAfterInsertMu.Lock()
		userManagerAfterInsertHooks = append(userManagerAfterInsertHooks, userManagerHook)
		userManagerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userManagerBeforeUpdateMu.Lock()
		userManagerBeforeUpdateHooks = append(userManagerBeforeUpdateHooks, userManagerHook)
		userManagerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userManagerAfterUpdateMu.Lock()
		userManagerAfterUpdateHooks = append(userManagerAfterUpdateHooks, userManagerHook)
		userManagerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userManagerBeforeDeleteMu.Lock()
		userManagerBeforeDeleteHooks = append(userManagerBeforeDeleteHooks, userManagerHook)
		userManagerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userManagerAfterDeleteMu.Lock()
		userManagerAfterDeleteHooks = append(userManagerAfterDeleteHooks, userManagerHook)
		userManagerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userManagerBeforeUpsertMu.Lock()
		userManagerBeforeUpsertHooks = append(userManagerBeforeUpsertHooks, userManagerHook)
		userManagerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userManagerAfterUpsertMu.Lock()
		userManagerAfterUpsertHooks = append(userManagerAfterUpsertHooks, userManagerHook)
		userManagerAfterUpsertMu.Unlock()
	}
}

// One returns a single userManager record from the query.
func (q userManagerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserManager, error) {
	o := &UserManager{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_manager")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserManager records from the query.
func (q userManagerQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserManagerSlice, error) {
	var o []*UserManager

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserManager slice")
	}

	if len(userManagerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserManager records in the query.
func (q userManagerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_manager rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userManagerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_manager exists")
	}

	return count > 0, nil
}

// AdminAdmin pointed to by the foreign key.
func (o *UserManager) AdminAdmin(mods ...qm.QueryMod) adminQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"admin_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Admins(queryMods...)
}

// UserUserDatum pointed to by the foreign key.
func (o *UserManager) UserUserDatum(mods ...qm.QueryMod) userDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return UserData(queryMods...)
}

// UserUserLoginLogs retrieves all the user_login_log's UserLoginLogs with an executor via user_id column.
func (o *UserManager) UserUserLoginLogs(mods ...qm.QueryMod) userLoginLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_login_log\".\"user_id\"=?", o.ID),
	)

	return UserLoginLogs(queryMods...)
}

// LoadAdminAdmin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userManagerL) LoadAdminAdmin(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserManager interface{}, mods queries.Applicator) error {
	var slice []*UserManager
	var object *UserManager

	if singular {
		var ok bool
		object, ok = maybeUserManager.(*UserManager)
		if !ok {
			object = new(UserManager)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserManager))
			}
		}
	} else {
		s, ok := maybeUserManager.(*[]*UserManager)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserManager))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userManagerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userManagerR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`admin`),
		qm.WhereIn(`admin.admin_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Admin")
	}

	var resultSlice []*Admin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Admin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for admin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for admin")
	}

	if len(adminAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AdminAdmin = foreign
		if foreign.R == nil {
			foreign.R = &adminR{}
		}
		foreign.R.Admin = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.AdminID {
				local.R.AdminAdmin = foreign
				if foreign.R == nil {
					foreign.R = &adminR{}
				}
				foreign.R.Admin = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userManagerL) LoadUserUserDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserManager interface{}, mods queries.Applicator) error {
	var slice []*UserManager
	var object *UserManager

	if singular {
		var ok bool
		object, ok = maybeUserManager.(*UserManager)
		if !ok {
			object = new(UserManager)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserManager))
			}
		}
	} else {
		s, ok := maybeUserManager.(*[]*UserManager)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserManager))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userManagerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userManagerR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_data`),
		qm.WhereIn(`user_data.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserDatum")
	}

	var resultSlice []*UserDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_data")
	}

	if len(userDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserUserDatum = foreign
		if foreign.R == nil {
			foreign.R = &userDatumR{}
		}
		foreign.R.User = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserID {
				local.R.UserUserDatum = foreign
				if foreign.R == nil {
					foreign.R = &userDatumR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserLoginLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userManagerL) LoadUserUserLoginLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserManager interface{}, mods queries.Applicator) error {
	var slice []*UserManager
	var object *UserManager

	if singular {
		var ok bool
		object, ok = maybeUserManager.(*UserManager)
		if !ok {
			object = new(UserManager)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserManager))
			}
		}
	} else {
		s, ok := maybeUserManager.(*[]*UserManager)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserManager)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserManager))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userManagerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userManagerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_login_log`),
		qm.WhereIn(`user_login_log.user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_login_log")
	}

	var resultSlice []*UserLoginLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_login_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_login_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_login_log")
	}

	if len(userLoginLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserLoginLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userLoginLogR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserLoginLogs = append(local.R.UserUserLoginLogs, foreign)
				if foreign.R == nil {
					foreign.R = &userLoginLogR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// SetAdminAdmin of the userManager to the related item.
// Sets o.R.AdminAdmin to related.
// Adds o to related.R.Admin.
func (o *UserManager) SetAdminAdmin(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Admin) error {
	var err error

	if insert {
		related.AdminID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"admin\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"admin_id"}),
			strmangle.WhereClause("\"", "\"", 2, adminPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.AdminID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.AdminID = o.ID
	}

	if o.R == nil {
		o.R = &userManagerR{
			AdminAdmin: related,
		}
	} else {
		o.R.AdminAdmin = related
	}

	if related.R == nil {
		related.R = &adminR{
			Admin: o,
		}
	} else {
		related.R.Admin = o
	}
	return nil
}

// SetUserUserDatum of the userManager to the related item.
// Sets o.R.UserUserDatum to related.
// Adds o to related.R.User.
func (o *UserManager) SetUserUserDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserDatum) error {
	var err error

	if insert {
		related.UserID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"user_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
			strmangle.WhereClause("\"", "\"", 2, userDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UserID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserID = o.ID
	}

	if o.R == nil {
		o.R = &userManagerR{
			UserUserDatum: related,
		}
	} else {
		o.R.UserUserDatum = related
	}

	if related.R == nil {
		related.R = &userDatumR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddUserUserLoginLogs adds the given related objects to the existing relationships
// of the user_manager, optionally inserting them as new records.
// Appends related to o.R.UserUserLoginLogs.
// Sets related.R.User appropriately.
func (o *UserManager) AddUserUserLoginLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserLoginLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_login_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userLoginLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userManagerR{
			UserUserLoginLogs: related,
		}
	} else {
		o.R.UserUserLoginLogs = append(o.R.UserUserLoginLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userLoginLogR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// UserManagers retrieves all the records using an executor.
func UserManagers(mods ...qm.QueryMod) userManagerQuery {
	mods = append(mods, qm.From("\"user_manager\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_manager\".*"})
	}

	return userManagerQuery{q}
}

// FindUserManager retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserManager(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserManager, error) {
	userManagerObj := &UserManager{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_manager\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userManagerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_manager")
	}

	if err = userManagerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userManagerObj, err
	}

	return userManagerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserManager) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_manager provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userManagerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userManagerInsertCacheMut.RLock()
	cache, cached := userManagerInsertCache[key]
	userManagerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userManagerAllColumns,
			userManagerColumnsWithDefault,
			userManagerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userManagerType, userManagerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userManagerType, userManagerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_manager\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_manager\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_manager")
	}

	if !cached {
		userManagerInsertCacheMut.Lock()
		userManagerInsertCache[key] = cache
		userManagerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserManager.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserManager) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userManagerUpdateCacheMut.RLock()
	cache, cached := userManagerUpdateCache[key]
	userManagerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userManagerAllColumns,
			userManagerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"create_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_manager, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_manager\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userManagerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userManagerType, userManagerMapping, append(wl, userManagerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_manager row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_manager")
	}

	if !cached {
		userManagerUpdateCacheMut.Lock()
		userManagerUpdateCache[key] = cache
		userManagerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userManagerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_manager")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_manager")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserManagerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userManagerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_manager\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userManagerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userManager slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userManager")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserManager) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_manager provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userManagerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userManagerUpsertCacheMut.RLock()
	cache, cached := userManagerUpsertCache[key]
	userManagerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userManagerAllColumns,
			userManagerColumnsWithDefault,
			userManagerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userManagerAllColumns,
			userManagerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_manager, could not build update column list")
		}

		ret := strmangle.SetComplement(userManagerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userManagerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_manager, could not build conflict column list")
			}

			conflict = make([]string, len(userManagerPrimaryKeyColumns))
			copy(conflict, userManagerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_manager\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userManagerType, userManagerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userManagerType, userManagerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_manager")
	}

	if !cached {
		userManagerUpsertCacheMut.Lock()
		userManagerUpsertCache[key] = cache
		userManagerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserManager record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserManager) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserManager provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userManagerPrimaryKeyMapping)
	sql := "DELETE FROM \"user_manager\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_manager")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_manager")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userManagerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userManagerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_manager")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_manager")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserManagerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userManagerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userManagerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_manager\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userManagerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userManager slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_manager")
	}

	if len(userManagerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserManager) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserManager(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserManagerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserManagerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userManagerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_manager\".* FROM \"user_manager\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userManagerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserManagerSlice")
	}

	*o = slice

	return nil
}

// UserManagerExists checks if the UserManager row exists.
func UserManagerExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_manager\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_manager exists")
	}

	return exists, nil
}

// Exists checks if the UserManager row exists.
func (o *UserManager) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserManagerExists(ctx, exec, o.ID)
}
