// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserDatum is an object representing the database table.
type UserDatum struct {
	UserID        string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	FirstName     string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName      string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	FirstNameKana string      `boil:"first_name_kana" json:"first_name_kana" toml:"first_name_kana" yaml:"first_name_kana"`
	LastNameKana  string      `boil:"last_name_kana" json:"last_name_kana" toml:"last_name_kana" yaml:"last_name_kana"`
	CompanyName   null.String `boil:"company_name" json:"company_name,omitempty" toml:"company_name" yaml:"company_name,omitempty"`
	BirthDate     null.Time   `boil:"birth_date" json:"birth_date,omitempty" toml:"birth_date" yaml:"birth_date,omitempty"`
	ZipCode       null.String `boil:"zip_code" json:"zip_code,omitempty" toml:"zip_code" yaml:"zip_code,omitempty"`
	Prefecture    int         `boil:"prefecture" json:"prefecture" toml:"prefecture" yaml:"prefecture"`
	City          null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Address       null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Tel           null.String `boil:"tel" json:"tel,omitempty" toml:"tel" yaml:"tel,omitempty"`
	AcceptMail    bool        `boil:"accept_mail" json:"accept_mail" toml:"accept_mail" yaml:"accept_mail"`
	CreateAt      time.Time   `boil:"create_at" json:"create_at" toml:"create_at" yaml:"create_at"`
	UpdateAt      time.Time   `boil:"update_at" json:"update_at" toml:"update_at" yaml:"update_at"`

	R *userDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserDatumColumns = struct {
	UserID        string
	FirstName     string
	LastName      string
	FirstNameKana string
	LastNameKana  string
	CompanyName   string
	BirthDate     string
	ZipCode       string
	Prefecture    string
	City          string
	Address       string
	Tel           string
	AcceptMail    string
	CreateAt      string
	UpdateAt      string
}{
	UserID:        "user_id",
	FirstName:     "first_name",
	LastName:      "last_name",
	FirstNameKana: "first_name_kana",
	LastNameKana:  "last_name_kana",
	CompanyName:   "company_name",
	BirthDate:     "birth_date",
	ZipCode:       "zip_code",
	Prefecture:    "prefecture",
	City:          "city",
	Address:       "address",
	Tel:           "tel",
	AcceptMail:    "accept_mail",
	CreateAt:      "create_at",
	UpdateAt:      "update_at",
}

var UserDatumTableColumns = struct {
	UserID        string
	FirstName     string
	LastName      string
	FirstNameKana string
	LastNameKana  string
	CompanyName   string
	BirthDate     string
	ZipCode       string
	Prefecture    string
	City          string
	Address       string
	Tel           string
	AcceptMail    string
	CreateAt      string
	UpdateAt      string
}{
	UserID:        "user_data.user_id",
	FirstName:     "user_data.first_name",
	LastName:      "user_data.last_name",
	FirstNameKana: "user_data.first_name_kana",
	LastNameKana:  "user_data.last_name_kana",
	CompanyName:   "user_data.company_name",
	BirthDate:     "user_data.birth_date",
	ZipCode:       "user_data.zip_code",
	Prefecture:    "user_data.prefecture",
	City:          "user_data.city",
	Address:       "user_data.address",
	Tel:           "user_data.tel",
	AcceptMail:    "user_data.accept_mail",
	CreateAt:      "user_data.create_at",
	UpdateAt:      "user_data.update_at",
}

// Generated where

var UserDatumWhere = struct {
	UserID        whereHelperstring
	FirstName     whereHelperstring
	LastName      whereHelperstring
	FirstNameKana whereHelperstring
	LastNameKana  whereHelperstring
	CompanyName   whereHelpernull_String
	BirthDate     whereHelpernull_Time
	ZipCode       whereHelpernull_String
	Prefecture    whereHelperint
	City          whereHelpernull_String
	Address       whereHelpernull_String
	Tel           whereHelpernull_String
	AcceptMail    whereHelperbool
	CreateAt      whereHelpertime_Time
	UpdateAt      whereHelpertime_Time
}{
	UserID:        whereHelperstring{field: "\"user_data\".\"user_id\""},
	FirstName:     whereHelperstring{field: "\"user_data\".\"first_name\""},
	LastName:      whereHelperstring{field: "\"user_data\".\"last_name\""},
	FirstNameKana: whereHelperstring{field: "\"user_data\".\"first_name_kana\""},
	LastNameKana:  whereHelperstring{field: "\"user_data\".\"last_name_kana\""},
	CompanyName:   whereHelpernull_String{field: "\"user_data\".\"company_name\""},
	BirthDate:     whereHelpernull_Time{field: "\"user_data\".\"birth_date\""},
	ZipCode:       whereHelpernull_String{field: "\"user_data\".\"zip_code\""},
	Prefecture:    whereHelperint{field: "\"user_data\".\"prefecture\""},
	City:          whereHelpernull_String{field: "\"user_data\".\"city\""},
	Address:       whereHelpernull_String{field: "\"user_data\".\"address\""},
	Tel:           whereHelpernull_String{field: "\"user_data\".\"tel\""},
	AcceptMail:    whereHelperbool{field: "\"user_data\".\"accept_mail\""},
	CreateAt:      whereHelpertime_Time{field: "\"user_data\".\"create_at\""},
	UpdateAt:      whereHelpertime_Time{field: "\"user_data\".\"update_at\""},
}

// UserDatumRels is where relationship names are stored.
var UserDatumRels = struct {
	User                    string
	UserUserOption          string
	UserCheckins            string
	UserCouponAttachedUsers string
	UserMailMagazineLogs    string
	BookUserUserBooks       string
	UserUserReports         string
}{
	User:                    "User",
	UserUserOption:          "UserUserOption",
	UserCheckins:            "UserCheckins",
	UserCouponAttachedUsers: "UserCouponAttachedUsers",
	UserMailMagazineLogs:    "UserMailMagazineLogs",
	BookUserUserBooks:       "BookUserUserBooks",
	UserUserReports:         "UserUserReports",
}

// userDatumR is where relationships are stored.
type userDatumR struct {
	User                    *UserManager            `boil:"User" json:"User" toml:"User" yaml:"User"`
	UserUserOption          *UserOption             `boil:"UserUserOption" json:"UserUserOption" toml:"UserUserOption" yaml:"UserUserOption"`
	UserCheckins            CheckinSlice            `boil:"UserCheckins" json:"UserCheckins" toml:"UserCheckins" yaml:"UserCheckins"`
	UserCouponAttachedUsers CouponAttachedUserSlice `boil:"UserCouponAttachedUsers" json:"UserCouponAttachedUsers" toml:"UserCouponAttachedUsers" yaml:"UserCouponAttachedUsers"`
	UserMailMagazineLogs    MailMagazineLogSlice    `boil:"UserMailMagazineLogs" json:"UserMailMagazineLogs" toml:"UserMailMagazineLogs" yaml:"UserMailMagazineLogs"`
	BookUserUserBooks       UserBookSlice           `boil:"BookUserUserBooks" json:"BookUserUserBooks" toml:"BookUserUserBooks" yaml:"BookUserUserBooks"`
	UserUserReports         UserReportSlice         `boil:"UserUserReports" json:"UserUserReports" toml:"UserUserReports" yaml:"UserUserReports"`
}

// NewStruct creates a new relationship struct
func (*userDatumR) NewStruct() *userDatumR {
	return &userDatumR{}
}

func (r *userDatumR) GetUser() *UserManager {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userDatumR) GetUserUserOption() *UserOption {
	if r == nil {
		return nil
	}
	return r.UserUserOption
}

func (r *userDatumR) GetUserCheckins() CheckinSlice {
	if r == nil {
		return nil
	}
	return r.UserCheckins
}

func (r *userDatumR) GetUserCouponAttachedUsers() CouponAttachedUserSlice {
	if r == nil {
		return nil
	}
	return r.UserCouponAttachedUsers
}

func (r *userDatumR) GetUserMailMagazineLogs() MailMagazineLogSlice {
	if r == nil {
		return nil
	}
	return r.UserMailMagazineLogs
}

func (r *userDatumR) GetBookUserUserBooks() UserBookSlice {
	if r == nil {
		return nil
	}
	return r.BookUserUserBooks
}

func (r *userDatumR) GetUserUserReports() UserReportSlice {
	if r == nil {
		return nil
	}
	return r.UserUserReports
}

// userDatumL is where Load methods for each relationship are stored.
type userDatumL struct{}

var (
	userDatumAllColumns            = []string{"user_id", "first_name", "last_name", "first_name_kana", "last_name_kana", "company_name", "birth_date", "zip_code", "prefecture", "city", "address", "tel", "accept_mail", "create_at", "update_at"}
	userDatumColumnsWithoutDefault = []string{"user_id", "first_name", "last_name", "first_name_kana", "last_name_kana", "prefecture", "accept_mail"}
	userDatumColumnsWithDefault    = []string{"company_name", "birth_date", "zip_code", "city", "address", "tel", "create_at", "update_at"}
	userDatumPrimaryKeyColumns     = []string{"user_id"}
	userDatumGeneratedColumns      = []string{}
)

type (
	// UserDatumSlice is an alias for a slice of pointers to UserDatum.
	// This should almost always be used instead of []UserDatum.
	UserDatumSlice []*UserDatum
	// UserDatumHook is the signature for custom UserDatum hook methods
	UserDatumHook func(context.Context, boil.ContextExecutor, *UserDatum) error

	userDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userDatumType                 = reflect.TypeOf(&UserDatum{})
	userDatumMapping              = queries.MakeStructMapping(userDatumType)
	userDatumPrimaryKeyMapping, _ = queries.BindMapping(userDatumType, userDatumMapping, userDatumPrimaryKeyColumns)
	userDatumInsertCacheMut       sync.RWMutex
	userDatumInsertCache          = make(map[string]insertCache)
	userDatumUpdateCacheMut       sync.RWMutex
	userDatumUpdateCache          = make(map[string]updateCache)
	userDatumUpsertCacheMut       sync.RWMutex
	userDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userDatumAfterSelectHooks []UserDatumHook

var userDatumBeforeInsertHooks []UserDatumHook
var userDatumAfterInsertHooks []UserDatumHook

var userDatumBeforeUpdateHooks []UserDatumHook
var userDatumAfterUpdateHooks []UserDatumHook

var userDatumBeforeDeleteHooks []UserDatumHook
var userDatumAfterDeleteHooks []UserDatumHook

var userDatumBeforeUpsertHooks []UserDatumHook
var userDatumAfterUpsertHooks []UserDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserDatumHook registers your hook function for all future operations.
func AddUserDatumHook(hookPoint boil.HookPoint, userDatumHook UserDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userDatumAfterSelectHooks = append(userDatumAfterSelectHooks, userDatumHook)
	case boil.BeforeInsertHook:
		userDatumBeforeInsertHooks = append(userDatumBeforeInsertHooks, userDatumHook)
	case boil.AfterInsertHook:
		userDatumAfterInsertHooks = append(userDatumAfterInsertHooks, userDatumHook)
	case boil.BeforeUpdateHook:
		userDatumBeforeUpdateHooks = append(userDatumBeforeUpdateHooks, userDatumHook)
	case boil.AfterUpdateHook:
		userDatumAfterUpdateHooks = append(userDatumAfterUpdateHooks, userDatumHook)
	case boil.BeforeDeleteHook:
		userDatumBeforeDeleteHooks = append(userDatumBeforeDeleteHooks, userDatumHook)
	case boil.AfterDeleteHook:
		userDatumAfterDeleteHooks = append(userDatumAfterDeleteHooks, userDatumHook)
	case boil.BeforeUpsertHook:
		userDatumBeforeUpsertHooks = append(userDatumBeforeUpsertHooks, userDatumHook)
	case boil.AfterUpsertHook:
		userDatumAfterUpsertHooks = append(userDatumAfterUpsertHooks, userDatumHook)
	}
}

// One returns a single userDatum record from the query.
func (q userDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserDatum, error) {
	o := &UserDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserDatum records from the query.
func (q userDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserDatumSlice, error) {
	var o []*UserDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserDatum slice")
	}

	if len(userDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserDatum records in the query.
func (q userDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_data exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserDatum) User(mods ...qm.QueryMod) userManagerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return UserManagers(queryMods...)
}

// UserUserOption pointed to by the foreign key.
func (o *UserDatum) UserUserOption(mods ...qm.QueryMod) userOptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return UserOptions(queryMods...)
}

// UserCheckins retrieves all the checkin's Checkins with an executor via user_id column.
func (o *UserDatum) UserCheckins(mods ...qm.QueryMod) checkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkin\".\"user_id\"=?", o.UserID),
	)

	return Checkins(queryMods...)
}

// UserCouponAttachedUsers retrieves all the coupon_attached_user's CouponAttachedUsers with an executor via user_id column.
func (o *UserDatum) UserCouponAttachedUsers(mods ...qm.QueryMod) couponAttachedUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"coupon_attached_user\".\"user_id\"=?", o.UserID),
	)

	return CouponAttachedUsers(queryMods...)
}

// UserMailMagazineLogs retrieves all the mail_magazine_log's MailMagazineLogs with an executor via user_id column.
func (o *UserDatum) UserMailMagazineLogs(mods ...qm.QueryMod) mailMagazineLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mail_magazine_log\".\"user_id\"=?", o.UserID),
	)

	return MailMagazineLogs(queryMods...)
}

// BookUserUserBooks retrieves all the user_book's UserBooks with an executor via book_user_id column.
func (o *UserDatum) BookUserUserBooks(mods ...qm.QueryMod) userBookQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_book\".\"book_user_id\"=?", o.UserID),
	)

	return UserBooks(queryMods...)
}

// UserUserReports retrieves all the user_report's UserReports with an executor via user_id column.
func (o *UserDatum) UserUserReports(mods ...qm.QueryMod) userReportQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_report\".\"user_id\"=?", o.UserID),
	)

	return UserReports(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userDatumL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDatum interface{}, mods queries.Applicator) error {
	var slice []*UserDatum
	var object *UserDatum

	if singular {
		var ok bool
		object, ok = maybeUserDatum.(*UserDatum)
		if !ok {
			object = new(UserDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDatum))
			}
		}
	} else {
		s, ok := maybeUserDatum.(*[]*UserDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDatumR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDatumR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_manager`),
		qm.WhereIn(`user_manager.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserManager")
	}

	var resultSlice []*UserManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserManager")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_manager")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_manager")
	}

	if len(userManagerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userManagerR{}
		}
		foreign.R.UserUserDatum = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userManagerR{}
				}
				foreign.R.UserUserDatum = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserOption allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userDatumL) LoadUserUserOption(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDatum interface{}, mods queries.Applicator) error {
	var slice []*UserDatum
	var object *UserDatum

	if singular {
		var ok bool
		object, ok = maybeUserDatum.(*UserDatum)
		if !ok {
			object = new(UserDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDatum))
			}
		}
	} else {
		s, ok := maybeUserDatum.(*[]*UserDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDatumR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDatumR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_option`),
		qm.WhereIn(`user_option.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserOption")
	}

	var resultSlice []*UserOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserOption")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_option")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_option")
	}

	if len(userOptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserUserOption = foreign
		if foreign.R == nil {
			foreign.R = &userOptionR{}
		}
		foreign.R.User = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.UserID {
				local.R.UserUserOption = foreign
				if foreign.R == nil {
					foreign.R = &userOptionR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserCheckins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userDatumL) LoadUserCheckins(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDatum interface{}, mods queries.Applicator) error {
	var slice []*UserDatum
	var object *UserDatum

	if singular {
		var ok bool
		object, ok = maybeUserDatum.(*UserDatum)
		if !ok {
			object = new(UserDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDatum))
			}
		}
	} else {
		s, ok := maybeUserDatum.(*[]*UserDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDatumR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDatumR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkin`),
		qm.WhereIn(`checkin.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkin")
	}

	var resultSlice []*Checkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkin")
	}

	if len(checkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserCheckins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkinR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserID == foreign.UserID {
				local.R.UserCheckins = append(local.R.UserCheckins, foreign)
				if foreign.R == nil {
					foreign.R = &checkinR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserCouponAttachedUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userDatumL) LoadUserCouponAttachedUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDatum interface{}, mods queries.Applicator) error {
	var slice []*UserDatum
	var object *UserDatum

	if singular {
		var ok bool
		object, ok = maybeUserDatum.(*UserDatum)
		if !ok {
			object = new(UserDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDatum))
			}
		}
	} else {
		s, ok := maybeUserDatum.(*[]*UserDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDatumR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDatumR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coupon_attached_user`),
		qm.WhereIn(`coupon_attached_user.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load coupon_attached_user")
	}

	var resultSlice []*CouponAttachedUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice coupon_attached_user")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on coupon_attached_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coupon_attached_user")
	}

	if len(couponAttachedUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserCouponAttachedUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &couponAttachedUserR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserID == foreign.UserID {
				local.R.UserCouponAttachedUsers = append(local.R.UserCouponAttachedUsers, foreign)
				if foreign.R == nil {
					foreign.R = &couponAttachedUserR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserMailMagazineLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userDatumL) LoadUserMailMagazineLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDatum interface{}, mods queries.Applicator) error {
	var slice []*UserDatum
	var object *UserDatum

	if singular {
		var ok bool
		object, ok = maybeUserDatum.(*UserDatum)
		if !ok {
			object = new(UserDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDatum))
			}
		}
	} else {
		s, ok := maybeUserDatum.(*[]*UserDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDatumR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDatumR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mail_magazine_log`),
		qm.WhereIn(`mail_magazine_log.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mail_magazine_log")
	}

	var resultSlice []*MailMagazineLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mail_magazine_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mail_magazine_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mail_magazine_log")
	}

	if len(mailMagazineLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserMailMagazineLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mailMagazineLogR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserID == foreign.UserID {
				local.R.UserMailMagazineLogs = append(local.R.UserMailMagazineLogs, foreign)
				if foreign.R == nil {
					foreign.R = &mailMagazineLogR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadBookUserUserBooks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userDatumL) LoadBookUserUserBooks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDatum interface{}, mods queries.Applicator) error {
	var slice []*UserDatum
	var object *UserDatum

	if singular {
		var ok bool
		object, ok = maybeUserDatum.(*UserDatum)
		if !ok {
			object = new(UserDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDatum))
			}
		}
	} else {
		s, ok := maybeUserDatum.(*[]*UserDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDatumR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDatumR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_book`),
		qm.WhereIn(`user_book.book_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_book")
	}

	var resultSlice []*UserBook
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_book")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_book")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_book")
	}

	if len(userBookAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BookUserUserBooks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userBookR{}
			}
			foreign.R.BookUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserID == foreign.BookUserID {
				local.R.BookUserUserBooks = append(local.R.BookUserUserBooks, foreign)
				if foreign.R == nil {
					foreign.R = &userBookR{}
				}
				foreign.R.BookUser = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserReports allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userDatumL) LoadUserUserReports(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserDatum interface{}, mods queries.Applicator) error {
	var slice []*UserDatum
	var object *UserDatum

	if singular {
		var ok bool
		object, ok = maybeUserDatum.(*UserDatum)
		if !ok {
			object = new(UserDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserDatum))
			}
		}
	} else {
		s, ok := maybeUserDatum.(*[]*UserDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userDatumR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userDatumR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_report`),
		qm.WhereIn(`user_report.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_report")
	}

	var resultSlice []*UserReport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_report")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_report")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_report")
	}

	if len(userReportAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserReports = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userReportR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.UserID == foreign.UserID {
				local.R.UserUserReports = append(local.R.UserUserReports, foreign)
				if foreign.R == nil {
					foreign.R = &userReportR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// SetUser of the userDatum to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserDatum.
func (o *UserDatum) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserManager) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userDatumR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userManagerR{
			UserUserDatum: o,
		}
	} else {
		related.R.UserUserDatum = o
	}

	return nil
}

// SetUserUserOption of the userDatum to the related item.
// Sets o.R.UserUserOption to related.
// Adds o to related.R.User.
func (o *UserDatum) SetUserUserOption(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserOption) error {
	var err error

	if insert {
		related.UserID = o.UserID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"user_option\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
			strmangle.WhereClause("\"", "\"", 2, userOptionPrimaryKeyColumns),
		)
		values := []interface{}{o.UserID, related.UserID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserID = o.UserID
	}

	if o.R == nil {
		o.R = &userDatumR{
			UserUserOption: related,
		}
	} else {
		o.R.UserUserOption = related
	}

	if related.R == nil {
		related.R = &userOptionR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddUserCheckins adds the given related objects to the existing relationships
// of the user_datum, optionally inserting them as new records.
// Appends related to o.R.UserCheckins.
// Sets related.R.User appropriately.
func (o *UserDatum) AddUserCheckins(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.UserID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkinPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.UserID
		}
	}

	if o.R == nil {
		o.R = &userDatumR{
			UserCheckins: related,
		}
	} else {
		o.R.UserCheckins = append(o.R.UserCheckins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkinR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserCouponAttachedUsers adds the given related objects to the existing relationships
// of the user_datum, optionally inserting them as new records.
// Appends related to o.R.UserCouponAttachedUsers.
// Sets related.R.User appropriately.
func (o *UserDatum) AddUserCouponAttachedUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CouponAttachedUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.UserID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"coupon_attached_user\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, couponAttachedUserPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.CouponID, rel.UserID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.UserID
		}
	}

	if o.R == nil {
		o.R = &userDatumR{
			UserCouponAttachedUsers: related,
		}
	} else {
		o.R.UserCouponAttachedUsers = append(o.R.UserCouponAttachedUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &couponAttachedUserR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserMailMagazineLogs adds the given related objects to the existing relationships
// of the user_datum, optionally inserting them as new records.
// Appends related to o.R.UserMailMagazineLogs.
// Sets related.R.User appropriately.
func (o *UserDatum) AddUserMailMagazineLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MailMagazineLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.UserID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mail_magazine_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, mailMagazineLogPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.UserID
		}
	}

	if o.R == nil {
		o.R = &userDatumR{
			UserMailMagazineLogs: related,
		}
	} else {
		o.R.UserMailMagazineLogs = append(o.R.UserMailMagazineLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mailMagazineLogR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddBookUserUserBooks adds the given related objects to the existing relationships
// of the user_datum, optionally inserting them as new records.
// Appends related to o.R.BookUserUserBooks.
// Sets related.R.BookUser appropriately.
func (o *UserDatum) AddBookUserUserBooks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserBook) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BookUserID = o.UserID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_book\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"book_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userBookPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BookUserID = o.UserID
		}
	}

	if o.R == nil {
		o.R = &userDatumR{
			BookUserUserBooks: related,
		}
	} else {
		o.R.BookUserUserBooks = append(o.R.BookUserUserBooks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userBookR{
				BookUser: o,
			}
		} else {
			rel.R.BookUser = o
		}
	}
	return nil
}

// AddUserUserReports adds the given related objects to the existing relationships
// of the user_datum, optionally inserting them as new records.
// Appends related to o.R.UserUserReports.
// Sets related.R.User appropriately.
func (o *UserDatum) AddUserUserReports(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserReport) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.UserID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_report\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userReportPrimaryKeyColumns),
			)
			values := []interface{}{o.UserID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.UserID
		}
	}

	if o.R == nil {
		o.R = &userDatumR{
			UserUserReports: related,
		}
	} else {
		o.R.UserUserReports = append(o.R.UserUserReports, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userReportR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// UserData retrieves all the records using an executor.
func UserData(mods ...qm.QueryMod) userDatumQuery {
	mods = append(mods, qm.From("\"user_data\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_data\".*"})
	}

	return userDatumQuery{q}
}

// FindUserDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserDatum(ctx context.Context, exec boil.ContextExecutor, userID string, selectCols ...string) (*UserDatum, error) {
	userDatumObj := &UserDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_data\" where \"user_id\"=$1", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(ctx, exec, userDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_data")
	}

	if err = userDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userDatumObj, err
	}

	return userDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_data provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		if o.UpdateAt.IsZero() {
			o.UpdateAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userDatumInsertCacheMut.RLock()
	cache, cached := userDatumInsertCache[key]
	userDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userDatumAllColumns,
			userDatumColumnsWithDefault,
			userDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userDatumType, userDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userDatumType, userDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_data\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_data\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_data")
	}

	if !cached {
		userDatumInsertCacheMut.Lock()
		userDatumInsertCache[key] = cache
		userDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdateAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userDatumUpdateCacheMut.RLock()
	cache, cached := userDatumUpdateCache[key]
	userDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userDatumAllColumns,
			userDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_data\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userDatumType, userDatumMapping, append(wl, userDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_data")
	}

	if !cached {
		userDatumUpdateCacheMut.Lock()
		userDatumUpdateCache[key] = cache
		userDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_data\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userDatum")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_data provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreateAt.IsZero() {
			o.CreateAt = currTime
		}
		o.UpdateAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userDatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userDatumUpsertCacheMut.RLock()
	cache, cached := userDatumUpsertCache[key]
	userDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userDatumAllColumns,
			userDatumColumnsWithDefault,
			userDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userDatumAllColumns,
			userDatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_data, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userDatumPrimaryKeyColumns))
			copy(conflict, userDatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_data\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userDatumType, userDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userDatumType, userDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_data")
	}

	if !cached {
		userDatumUpsertCacheMut.Lock()
		userDatumUpsertCache[key] = cache
		userDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userDatumPrimaryKeyMapping)
	sql := "DELETE FROM \"user_data\" WHERE \"user_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_data")
	}

	if len(userDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserDatum(ctx, exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_data\".* FROM \"user_data\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserDatumSlice")
	}

	*o = slice

	return nil
}

// UserDatumExists checks if the UserDatum row exists.
func UserDatumExists(ctx context.Context, exec boil.ContextExecutor, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_data\" where \"user_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID)
	}
	row := exec.QueryRowContext(ctx, sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_data exists")
	}

	return exists, nil
}

// Exists checks if the UserDatum row exists.
func (o *UserDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserDatumExists(ctx, exec, o.UserID)
}
